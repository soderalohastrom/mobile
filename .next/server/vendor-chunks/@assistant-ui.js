"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@assistant-ui";
exports.ids = ["vendor-chunks/@assistant-ui"];
exports.modules = {

/***/ "(ssr)/./node_modules/@assistant-ui/react-ai-sdk/dist/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@assistant-ui/react-ai-sdk/dist/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getVercelAIMessage: () => (/* binding */ getVercelAIMessages),\n/* harmony export */   getVercelAIMessages: () => (/* binding */ getVercelAIMessages),\n/* harmony export */   getVercelRSCMessage: () => (/* binding */ getVercelRSCMessage),\n/* harmony export */   useVercelRSCRuntime: () => (/* binding */ useVercelRSCRuntime),\n/* harmony export */   useVercelUseAssistantRuntime: () => (/* binding */ useVercelUseAssistantRuntime),\n/* harmony export */   useVercelUseChatRuntime: () => (/* binding */ useVercelUseChatRuntime)\n/* harmony export */ });\n/* harmony import */ var _assistant_ui_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @assistant-ui/react */ \"(ssr)/./node_modules/@assistant-ui/react/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @radix-ui/react-use-callback-ref */ \"(ssr)/./node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ai-sdk/ui-utils */ \"(ssr)/./node_modules/@ai-sdk/ui-utils/node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n// src/rsc/useVercelRSCRuntime.tsx\n\nvar vercelToThreadMessage = (converter, rawMessage) => {\n  const message = converter(rawMessage);\n  return {\n    id: message.id,\n    role: message.role,\n    content: [{ type: \"ui\", display: message.display }],\n    createdAt: message.createdAt\n  };\n};\nvar useVercelRSCRuntime = (adapter) => {\n  const onNew = adapter.onNew ?? adapter.append;\n  if (!onNew)\n    throw new Error(\"You must pass a onNew function to useVercelRSCRuntime\");\n  const eAdapter = {\n    isRunning: adapter.isRunning,\n    messages: adapter.messages,\n    onNew,\n    onEdit: adapter.onEdit ?? adapter.edit,\n    onReload: adapter.onReload ?? adapter.reload,\n    convertMessage: (m) => vercelToThreadMessage(\n      adapter.convertMessage ?? ((m2) => m2),\n      m\n    ),\n    unstable_capabilities: {\n      copy: false\n    }\n  };\n  const runtime = (0,_assistant_ui_react__WEBPACK_IMPORTED_MODULE_0__.useExternalStoreRuntime)(eAdapter);\n  return runtime;\n};\n\n// src/rsc/getVercelRSCMessage.tsx\n\nvar symbolInnerRSCMessage = Symbol(\"innerVercelRSCMessage\");\nvar getVercelRSCMessage = (message) => {\n  return (0,_assistant_ui_react__WEBPACK_IMPORTED_MODULE_0__.getExternalStoreMessage)(message);\n};\n\n// src/ui/utils/convertMessage.ts\nvar convertMessage = (message) => {\n  switch (message.role) {\n    case \"user\":\n      return {\n        role: \"user\",\n        id: message.id,\n        createdAt: message.createdAt,\n        content: message.content,\n        attachments: message.experimental_attachments?.map(\n          (attachment, idx) => ({\n            id: idx.toString(),\n            type: \"file\",\n            name: attachment.name ?? attachment.url,\n            content: [],\n            status: { type: \"complete\" }\n          })\n        )\n      };\n    case \"system\":\n      return {\n        role: \"system\",\n        id: message.id,\n        createdAt: message.createdAt,\n        content: message.content\n      };\n    case \"assistant\":\n      return {\n        role: \"assistant\",\n        id: message.id,\n        createdAt: message.createdAt,\n        content: [\n          ...message.content ? [\n            {\n              type: \"text\",\n              text: message.content\n            }\n          ] : [],\n          ...message.toolInvocations?.map(\n            (t) => ({\n              type: \"tool-call\",\n              toolName: t.toolName,\n              toolCallId: t.toolCallId,\n              argsText: JSON.stringify(t.args),\n              args: t.args,\n              result: \"result\" in t ? t.result : void 0\n            })\n          ) ?? []\n        ]\n      };\n    case \"data\": {\n      if (!message.data || !(typeof message.data === \"object\") || Array.isArray(message.data))\n        return [];\n      const data = message.data;\n      if (data.type === \"tool-call\") {\n        return {\n          role: \"assistant\",\n          id: message.id,\n          createdAt: message.createdAt,\n          content: [data]\n        };\n      } else if (data.type === \"tool-result\") {\n        return {\n          role: \"tool\",\n          toolCallId: data.toolCallId,\n          result: data.result\n        };\n      }\n      return [];\n    }\n    default:\n      const _unsupported = message.role;\n      throw new Error(\n        `You have a message with an unsupported role. The role ${_unsupported} is not supported.`\n      );\n  }\n};\n\n// src/ui/use-chat/useVercelUseChatRuntime.tsx\n\n\n// src/ui/utils/useInputSync.tsx\n\n\nvar useInputSync = (helpers, runtime) => {\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (runtime.thread.composer.getState().text !== helpers.input) {\n      runtime.thread.composer.setText(helpers.input);\n    }\n  }, [helpers, runtime]);\n  const handleThreadUpdate = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_2__.useCallbackRef)(() => {\n    if (runtime.thread.composer.getState().text !== helpers.input) {\n      helpers.setInput(runtime.thread.composer.getState().text);\n    }\n  });\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    return runtime.thread.subscribe(handleThreadUpdate);\n  }, [runtime, handleThreadUpdate]);\n};\n\n// src/ui/utils/sliceMessagesUntil.tsx\nvar sliceMessagesUntil = (messages, messageId) => {\n  if (messageId == null) return [];\n  let messageIdx = messages.findIndex((m) => m.id === messageId);\n  if (messageIdx === -1)\n    throw new Error(\n      \"useVercelAIThreadState: Message not found. This is liekly an internal bug in assistant-ui.\"\n    );\n  while (messages[messageIdx + 1]?.role === \"assistant\") {\n    messageIdx++;\n  }\n  return messages.slice(0, messageIdx + 1);\n};\n\n// src/ui/utils/toCreateMessage.ts\nvar toCreateMessage = async (message) => {\n  const content = message.content.filter((part) => part.type === \"text\").map((t) => t.text).join(\"\\n\\n\");\n  const images = message.content.filter((part) => part.type === \"image\").map((part) => ({ url: part.image }));\n  return {\n    role: message.role,\n    content,\n    experimental_attachments: [\n      ...images,\n      ...await Promise.all(\n        (message.attachments ?? []).map(async (m) => {\n          if (m.file == null)\n            throw new Error(\"Attachment did not contain a file\");\n          return {\n            contentType: m.file.type,\n            name: m.file.name,\n            url: await getFileDataURL(m.file)\n          };\n        })\n      )\n    ]\n  };\n};\nvar getFileDataURL = (file) => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.onload = () => resolve(reader.result);\n  reader.onerror = (error) => reject(error);\n  reader.readAsDataURL(file);\n});\n\n// src/ui/utils/vercelAttachmentAdapter.ts\n\nvar vercelAttachmentAdapter = {\n  accept: \"image/*, text/plain, text/html, text/markdown, text/csv, text/xml, text/json, text/css\",\n  async add({ file }) {\n    return {\n      id: (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_3__.generateId)(),\n      type: \"file\",\n      name: file.name,\n      file,\n      contentType: file.type,\n      content: [],\n      status: { type: \"requires-action\", reason: \"composer-send\" }\n    };\n  },\n  async send(attachment) {\n    return {\n      ...attachment,\n      status: { type: \"complete\" },\n      content: []\n    };\n  },\n  async remove() {\n  }\n};\n\n// src/ui/getVercelAIMessages.tsx\n\nvar getVercelAIMessages = (message) => {\n  return (0,_assistant_ui_react__WEBPACK_IMPORTED_MODULE_0__.getExternalStoreMessage)(message);\n};\n\n// src/ui/use-chat/useVercelUseChatRuntime.tsx\nvar useVercelUseChatRuntime = (chatHelpers) => {\n  const messages = (0,_assistant_ui_react__WEBPACK_IMPORTED_MODULE_0__.useExternalMessageConverter)({\n    callback: convertMessage,\n    isRunning: chatHelpers.isLoading,\n    messages: chatHelpers.messages\n  });\n  const runtime = (0,_assistant_ui_react__WEBPACK_IMPORTED_MODULE_0__.useExternalStoreRuntime)({\n    isRunning: chatHelpers.isLoading,\n    messages,\n    setMessages: (messages2) => chatHelpers.setMessages(messages2.map(getVercelAIMessages).flat()),\n    onCancel: async () => chatHelpers.stop(),\n    onNew: async (message) => {\n      await chatHelpers.append(await toCreateMessage(message));\n    },\n    onEdit: async (message) => {\n      const newMessages = sliceMessagesUntil(\n        chatHelpers.messages,\n        message.parentId\n      );\n      chatHelpers.setMessages(newMessages);\n      await chatHelpers.append(await toCreateMessage(message));\n    },\n    onReload: async (parentId) => {\n      const newMessages = sliceMessagesUntil(chatHelpers.messages, parentId);\n      chatHelpers.setMessages(newMessages);\n      await chatHelpers.reload();\n    },\n    onAddToolResult: ({ toolCallId, result }) => {\n      chatHelpers.addToolResult({ toolCallId, result });\n    },\n    onSwitchToNewThread: () => {\n      chatHelpers.messages = [];\n      chatHelpers.input = \"\";\n      chatHelpers.setMessages([]);\n      chatHelpers.setInput(\"\");\n    },\n    adapters: {\n      attachments: vercelAttachmentAdapter\n    }\n  });\n  useInputSync(chatHelpers, runtime);\n  return runtime;\n};\n\n// src/ui/use-assistant/useVercelUseAssistantRuntime.tsx\n\nvar useVercelUseAssistantRuntime = (assistantHelpers) => {\n  const messages = (0,_assistant_ui_react__WEBPACK_IMPORTED_MODULE_0__.useExternalMessageConverter)({\n    callback: convertMessage,\n    isRunning: assistantHelpers.status === \"in_progress\",\n    messages: assistantHelpers.messages\n  });\n  const runtime = (0,_assistant_ui_react__WEBPACK_IMPORTED_MODULE_0__.useExternalStoreRuntime)({\n    isRunning: assistantHelpers.status === \"in_progress\",\n    messages,\n    onCancel: async () => assistantHelpers.stop(),\n    onNew: async (message) => {\n      await assistantHelpers.append(await toCreateMessage(message));\n    },\n    onSwitchToNewThread: () => {\n      assistantHelpers.messages = [];\n      assistantHelpers.input = \"\";\n      assistantHelpers.setMessages([]);\n      assistantHelpers.setInput(\"\");\n    },\n    adapters: {\n      attachments: vercelAttachmentAdapter\n    }\n  });\n  useInputSync(assistantHelpers, runtime);\n  return runtime;\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@assistant-ui/react-ai-sdk/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@assistant-ui/react-markdown/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@assistant-ui/react-markdown/dist/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CodeHeader: () => (/* binding */ CodeHeader),\n/* harmony export */   MarkdownTextPrimitive: () => (/* binding */ MarkdownTextPrimitive),\n/* harmony export */   makeMarkdownText: () => (/* binding */ makeMarkdownText),\n/* harmony export */   useIsMarkdownCodeBlock: () => (/* binding */ useIsMarkdownCodeBlock)\n/* harmony export */ });\n/* harmony import */ var _assistant_ui_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @assistant-ui/react */ \"(ssr)/./node_modules/@assistant-ui/react/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_markdown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-markdown */ \"(ssr)/./node_modules/react-markdown/lib/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-use-callback-ref */ \"(ssr)/./node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\");\n/* harmony import */ var _barrel_optimize_names_CheckIcon_CopyIcon_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=CheckIcon,CopyIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/copy.js\");\n/* harmony import */ var _barrel_optimize_names_CheckIcon_CopyIcon_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=CheckIcon,CopyIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/check.js\");\n/* __next_internal_client_entry_do_not_use__ CodeHeader,MarkdownTextPrimitive,makeMarkdownText,useIsMarkdownCodeBlock auto */ // src/primitives/MarkdownText.tsx\n\n\n\n// src/overrides/PreOverride.tsx\n\n\nvar PreContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar useIsMarkdownCodeBlock = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PreContext) !== null;\n};\nvar PreOverride = ({ children, ...rest })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PreContext.Provider, {\n        value: rest,\n        children\n    });\n};\n// src/overrides/defaultComponents.tsx\n\nvar DefaultPre = ({ node, ...rest })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"pre\", {\n        ...rest\n    });\nvar DefaultCode = ({ node, ...rest })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n        ...rest\n    });\nvar DefaultCodeBlockContent = ({ components: { Pre, Code }, code })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Pre, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Code, {\n            children: code\n        })\n    });\nvar DefaultCodeHeader = ()=>null;\n// src/primitives/MarkdownText.tsx\n\n// src/overrides/CodeOverride.tsx\n\n// src/overrides/CodeBlock.tsx\n\n\nvar DefaultCodeBlock = ({ components: { Pre, Code, SyntaxHighlighter, CodeHeader: CodeHeader2 }, language, code })=>{\n    const components = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            Pre,\n            Code\n        }), [\n        Pre,\n        Code\n    ]);\n    const SH = !!language ? SyntaxHighlighter : DefaultCodeBlockContent;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CodeHeader2, {\n                language,\n                code\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SH, {\n                components,\n                language: language ?? \"unknown\",\n                code\n            })\n        ]\n    });\n};\n// src/overrides/CodeOverride.tsx\n\n// src/overrides/withDefaults.tsx\n\nvar withDefaultProps = ({ className, ...defaultProps })=>({ className: classNameProp, ...props })=>{\n        return {\n            className: classnames__WEBPACK_IMPORTED_MODULE_2__(className, classNameProp),\n            ...defaultProps,\n            ...props\n        };\n    };\n// src/overrides/CodeOverride.tsx\n\nvar CodeBlockOverride = ({ components: { Pre, Code, SyntaxHighlighter: FallbackSyntaxHighlighter, CodeHeader: FallbackCodeHeader, by_language = {} }, children, ...codeProps })=>{\n    const preProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PreContext);\n    const getPreProps = withDefaultProps(preProps);\n    const WrappedPre = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_3__.useCallbackRef)((props)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Pre, {\n            ...getPreProps(props)\n        }));\n    const getCodeProps = withDefaultProps(codeProps);\n    const WrappedCode = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_3__.useCallbackRef)((props)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Code, {\n            ...getCodeProps(props)\n        }));\n    const language = /language-(\\w+)/.exec(codeProps.className || \"\")?.[1] ?? \"\";\n    if (typeof children !== \"string\") {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultCodeBlockContent, {\n            components: {\n                Pre: WrappedPre,\n                Code: WrappedCode\n            },\n            code: children\n        });\n    }\n    const SyntaxHighlighter = by_language[language]?.SyntaxHighlighter ?? FallbackSyntaxHighlighter;\n    const CodeHeader2 = by_language[language]?.CodeHeader ?? FallbackCodeHeader;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultCodeBlock, {\n        components: {\n            Pre: WrappedPre,\n            Code: WrappedCode,\n            SyntaxHighlighter,\n            CodeHeader: CodeHeader2\n        },\n        language: language || \"unknown\",\n        code: children\n    });\n};\nvar CodeOverride = ({ components, ...props })=>{\n    const preProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PreContext);\n    if (!preProps) return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(components.Code, {\n        ...props\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CodeBlockOverride, {\n        components,\n        ...props\n    });\n};\n// src/primitives/MarkdownText.tsx\n\n\nvar { useSmooth } = _assistant_ui_react__WEBPACK_IMPORTED_MODULE_4__.INTERNAL;\nvar MarkdownTextPrimitive = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ components: userComponents, className, containerProps, containerComponent: Container = \"div\", ...rest }, forwardedRef, smooth = true)=>{\n    const { text, status } = useSmooth((0,_assistant_ui_react__WEBPACK_IMPORTED_MODULE_4__.useContentPartText)(), smooth);\n    const { pre = DefaultPre, code = DefaultCode, SyntaxHighlighter = DefaultCodeBlockContent, CodeHeader: CodeHeader2 = DefaultCodeHeader, by_language, ...componentsRest } = userComponents ?? {};\n    const components = {\n        ...componentsRest,\n        pre: PreOverride,\n        code: (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_3__.useCallbackRef)((props)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CodeOverride, {\n                components: {\n                    Pre: pre,\n                    Code: code,\n                    SyntaxHighlighter,\n                    CodeHeader: CodeHeader2,\n                    by_language\n                },\n                ...props\n            }))\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Container, {\n        \"data-status\": status.type,\n        ...containerProps,\n        className: classnames__WEBPACK_IMPORTED_MODULE_2__(className, containerProps?.className),\n        ref: forwardedRef,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_markdown__WEBPACK_IMPORTED_MODULE_5__.Markdown, {\n            components,\n            ...rest,\n            children: text\n        })\n    });\n});\nMarkdownTextPrimitive.displayName = \"MarkdownTextPrimitive\";\n// src/ui/markdown-text.tsx\n\n// src/ui/code-header.tsx\n\n\n// src/ui/useCopyToClipboard.tsx\n\nvar useCopyToClipboard = ({ copiedDuration = 3e3 } = {})=>{\n    const [isCopied, setIsCopied] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const copyToClipboard = (value)=>{\n        if (!value) return;\n        navigator.clipboard.writeText(value).then(()=>{\n            setIsCopied(true);\n            setTimeout(()=>setIsCopied(false), copiedDuration);\n        });\n    };\n    return {\n        isCopied,\n        copyToClipboard\n    };\n};\n// src/ui/code-header.tsx\n\nvar { TooltipIconButton } = _assistant_ui_react__WEBPACK_IMPORTED_MODULE_4__.INTERNAL;\nvar CodeHeader = ({ language, code })=>{\n    const { strings: { code: { header: { copy: { tooltip = \"Copy\" } = {} } = {} } = {} } = {} } = (0,_assistant_ui_react__WEBPACK_IMPORTED_MODULE_4__.useThreadConfig)();\n    const { isCopied, copyToClipboard } = useCopyToClipboard();\n    const onCopy = ()=>{\n        if (!code || isCopied) return;\n        copyToClipboard(code);\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        className: \"aui-code-header-root\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n                className: \"aui-code-header-language\",\n                children: language\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(TooltipIconButton, {\n                tooltip,\n                onClick: onCopy,\n                children: [\n                    !isCopied && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_barrel_optimize_names_CheckIcon_CopyIcon_lucide_react__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {}),\n                    isCopied && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_barrel_optimize_names_CheckIcon_CopyIcon_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {})\n                ]\n            })\n        ]\n    });\n};\n// src/ui/markdown-text.tsx\n\n\n\nvar { withSmoothContextProvider, useSmoothStatus } = _assistant_ui_react__WEBPACK_IMPORTED_MODULE_4__.INTERNAL;\nvar makeMarkdownText = ({ className, components: userComponents, ...rest } = {})=>{\n    const components = {\n        ...userComponents,\n        CodeHeader: userComponents?.CodeHeader ?? CodeHeader\n    };\n    const MarkdownTextImpl = ()=>{\n        const status = useSmoothStatus();\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MarkdownTextPrimitive, {\n            components,\n            ...rest,\n            className: classnames__WEBPACK_IMPORTED_MODULE_2__(\"aui-md-root\", status.type === \"running\" && \"aui-md-running\", className)\n        });\n    };\n    MarkdownTextImpl.displayName = \"MarkdownText\";\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(withSmoothContextProvider(MarkdownTextImpl), ()=>true);\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@assistant-ui/react-markdown/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@assistant-ui/react/dist/chunk-BJPOCE4O.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@assistant-ui/react/dist/chunk-BJPOCE4O.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __export: () => (/* binding */ __export)
/* harmony export */ });
/* __next_internal_client_entry_do_not_use__ __export auto */ var __defProp = Object.defineProperty;
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
 //# sourceMappingURL=chunk-BJPOCE4O.mjs.map


/***/ }),

/***/ "(ssr)/./node_modules/@assistant-ui/react/dist/chunk-TWIMAOZR.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@assistant-ui/react/dist/chunk-TWIMAOZR.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PipeableTransformStream: () => (/* binding */ PipeableTransformStream),\n/* harmony export */   createEdgeRuntimeAPI: () => (/* binding */ createEdgeRuntimeAPI),\n/* harmony export */   getEdgeRuntimeResponse: () => (/* binding */ getEdgeRuntimeResponse),\n/* harmony export */   getEdgeRuntimeStream: () => (/* binding */ getEdgeRuntimeStream),\n/* harmony export */   mergeModelConfigs: () => (/* binding */ mergeModelConfigs),\n/* harmony export */   runResultStream: () => (/* binding */ runResultStream),\n/* harmony export */   streamPartEncoderStream: () => (/* binding */ streamPartEncoderStream),\n/* harmony export */   toCoreMessage: () => (/* binding */ toCoreMessage),\n/* harmony export */   toCoreMessages: () => (/* binding */ toCoreMessages),\n/* harmony export */   toLanguageModelMessages: () => (/* binding */ toLanguageModelMessages),\n/* harmony export */   toLanguageModelTools: () => (/* binding */ toLanguageModelTools),\n/* harmony export */   toolResultStream: () => (/* binding */ toolResultStream)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(ssr)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var secure_json_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! secure-json-parse */ \"(ssr)/./node_modules/secure-json-parse/index.js\");\n/* __next_internal_client_entry_do_not_use__ mergeModelConfigs,toLanguageModelMessages,toLanguageModelTools,toolResultStream,runResultStream,toCoreMessages,toCoreMessage,PipeableTransformStream,streamPartEncoderStream,getEdgeRuntimeStream,getEdgeRuntimeResponse,createEdgeRuntimeAPI auto */ // src/runtimes/edge/converters/toLanguageModelMessages.ts\nvar assistantMessageSplitter = ()=>{\n    const stash = [];\n    let assistantMessage = {\n        role: \"assistant\",\n        content: []\n    };\n    let toolMessage = {\n        role: \"tool\",\n        content: []\n    };\n    return {\n        addTextContentPart: (part)=>{\n            if (toolMessage.content.length > 0) {\n                stash.push(assistantMessage);\n                stash.push(toolMessage);\n                assistantMessage = {\n                    role: \"assistant\",\n                    content: []\n                };\n                toolMessage = {\n                    role: \"tool\",\n                    content: []\n                };\n            }\n            assistantMessage.content.push(part);\n        },\n        addToolCallPart: (part)=>{\n            assistantMessage.content.push({\n                type: \"tool-call\",\n                toolCallId: part.toolCallId,\n                toolName: part.toolName,\n                args: part.args\n            });\n            toolMessage.content.push({\n                type: \"tool-result\",\n                toolCallId: part.toolCallId,\n                toolName: part.toolName,\n                result: part.result ?? \"<no result>\",\n                isError: part.isError ?? false\n            });\n        },\n        getMessages: ()=>{\n            if (toolMessage.content.length > 0) {\n                return [\n                    ...stash,\n                    assistantMessage,\n                    toolMessage\n                ];\n            }\n            return [\n                ...stash,\n                assistantMessage\n            ];\n        }\n    };\n};\nfunction toLanguageModelMessages(message) {\n    return message.flatMap((message2)=>{\n        const role = message2.role;\n        switch(role){\n            case \"system\":\n                {\n                    return [\n                        {\n                            role: \"system\",\n                            content: message2.content[0].text\n                        }\n                    ];\n                }\n            case \"user\":\n                {\n                    const msg = {\n                        role: \"user\",\n                        content: message2.content.map((part)=>{\n                            const type = part.type;\n                            switch(type){\n                                case \"text\":\n                                    {\n                                        return part;\n                                    }\n                                case \"image\":\n                                    {\n                                        return {\n                                            type: \"image\",\n                                            image: new URL(part.image)\n                                        };\n                                    }\n                                default:\n                                    {\n                                        const unhandledType = type;\n                                        throw new Error(`Unspported content part type: ${unhandledType}`);\n                                    }\n                            }\n                        })\n                    };\n                    return [\n                        msg\n                    ];\n                }\n            case \"assistant\":\n                {\n                    const splitter = assistantMessageSplitter();\n                    for (const part of message2.content){\n                        const type = part.type;\n                        switch(type){\n                            case \"text\":\n                                {\n                                    splitter.addTextContentPart(part);\n                                    break;\n                                }\n                            case \"tool-call\":\n                                {\n                                    splitter.addToolCallPart(part);\n                                    break;\n                                }\n                            default:\n                                {\n                                    const unhandledType = type;\n                                    throw new Error(`Unhandled content part type: ${unhandledType}`);\n                                }\n                        }\n                    }\n                    return splitter.getMessages();\n                }\n            default:\n                {\n                    const unhandledRole = role;\n                    throw new Error(`Unknown message role: ${unhandledRole}`);\n                }\n        }\n    });\n}\n// src/runtimes/edge/converters/toLanguageModelTools.ts\n\n\nvar toLanguageModelTools = (tools)=>{\n    return Object.entries(tools).map(([name, tool])=>({\n            type: \"function\",\n            name,\n            ...tool.description ? {\n                description: tool.description\n            } : void 0,\n            parameters: tool.parameters instanceof zod__WEBPACK_IMPORTED_MODULE_1__.z.ZodType ? (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(tool.parameters) : tool.parameters\n        }));\n};\n// src/runtimes/edge/converters/toCoreMessages.ts\nvar toCoreMessages = (message)=>{\n    return message.map(toCoreMessage);\n};\nvar toCoreMessage = (message)=>{\n    const role = message.role;\n    switch(role){\n        case \"assistant\":\n            return {\n                role,\n                content: message.content.map((part)=>{\n                    if (part.type === \"ui\") throw new Error(\"UI parts are not supported\");\n                    if (part.type === \"tool-call\") {\n                        const { argsText, ...rest } = part;\n                        return rest;\n                    }\n                    return part;\n                })\n            };\n        case \"user\":\n            return {\n                role,\n                content: [\n                    ...message.content.map((part)=>{\n                        if (part.type === \"ui\") throw new Error(\"UI parts are not supported\");\n                        return part;\n                    }),\n                    ...message.attachments.map((a)=>a.content).flat()\n                ]\n            };\n        case \"system\":\n            return {\n                role,\n                content: message.content\n            };\n        default:\n            {\n                const unsupportedRole = role;\n                throw new Error(`Unknown message role: ${unsupportedRole}`);\n            }\n    }\n};\n// src/runtimes/edge/streams/assistantEncoderStream.ts\nfunction assistantEncoderStream() {\n    const toolCalls = /* @__PURE__ */ new Set();\n    return new TransformStream({\n        transform (chunk, controller) {\n            const chunkType = chunk.type;\n            switch(chunkType){\n                case \"text-delta\":\n                    {\n                        controller.enqueue({\n                            type: \"0\" /* TextDelta */ ,\n                            value: chunk.textDelta\n                        });\n                        break;\n                    }\n                case \"tool-call-delta\":\n                    {\n                        if (!toolCalls.has(chunk.toolCallId)) {\n                            toolCalls.add(chunk.toolCallId);\n                            controller.enqueue({\n                                type: \"b\" /* ToolCallBegin */ ,\n                                value: {\n                                    toolCallId: chunk.toolCallId,\n                                    toolName: chunk.toolName\n                                }\n                            });\n                        }\n                        controller.enqueue({\n                            type: \"c\" /* ToolCallDelta */ ,\n                            value: {\n                                toolCallId: chunk.toolCallId,\n                                argsTextDelta: chunk.argsTextDelta\n                            }\n                        });\n                        break;\n                    }\n                // ignore\n                case \"tool-call\":\n                case \"response-metadata\":\n                    break;\n                case \"tool-result\":\n                    {\n                        controller.enqueue({\n                            type: \"a\" /* ToolCallResult */ ,\n                            value: {\n                                toolCallId: chunk.toolCallId,\n                                result: chunk.result\n                            }\n                        });\n                        break;\n                    }\n                case \"step-finish\":\n                    {\n                        const { type, ...rest } = chunk;\n                        controller.enqueue({\n                            type: \"e\" /* StepFinish */ ,\n                            value: rest\n                        });\n                        break;\n                    }\n                case \"finish\":\n                    {\n                        const { type, ...rest } = chunk;\n                        controller.enqueue({\n                            type: \"d\" /* Finish */ ,\n                            value: rest\n                        });\n                        break;\n                    }\n                case \"error\":\n                    {\n                        controller.enqueue({\n                            type: \"3\" /* Error */ ,\n                            value: chunk.error\n                        });\n                        break;\n                    }\n                default:\n                    {\n                        const unhandledType = chunkType;\n                        throw new Error(`Unhandled chunk type: ${unhandledType}`);\n                    }\n            }\n        }\n    });\n}\n// src/types/ModelConfigTypes.ts\n\nvar LanguageModelV1CallSettingsSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    maxTokens: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().int().positive().optional(),\n    temperature: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().optional(),\n    topP: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().optional(),\n    presencePenalty: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().optional(),\n    frequencyPenalty: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().optional(),\n    seed: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().int().optional(),\n    headers: zod__WEBPACK_IMPORTED_MODULE_1__.z.record(zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional()).optional()\n});\nvar LanguageModelConfigSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    apiKey: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n    baseUrl: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n    modelName: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional()\n});\nvar mergeModelConfigs = (configSet)=>{\n    const configs = Array.from(configSet).map((c)=>c.getModelConfig()).sort((a, b)=>(b.priority ?? 0) - (a.priority ?? 0));\n    return configs.reduce((acc, config)=>{\n        if (config.system) {\n            if (acc.system) {\n                acc.system += `\n\n${config.system}`;\n            } else {\n                acc.system = config.system;\n            }\n        }\n        if (config.tools) {\n            for (const [name, tool] of Object.entries(config.tools)){\n                if (acc.tools?.[name]) {\n                    throw new Error(`You tried to define a tool with the name ${name}, but it already exists.`);\n                }\n                if (!acc.tools) acc.tools = {};\n                acc.tools[name] = tool;\n            }\n        }\n        if (config.config) {\n            acc.config = {\n                ...acc.config,\n                ...config.config\n            };\n        }\n        if (config.callSettings) {\n            acc.callSettings = {\n                ...acc.callSettings,\n                ...config.callSettings\n            };\n        }\n        return acc;\n    }, {});\n};\n// src/runtimes/edge/EdgeRuntimeRequestOptions.ts\n\nvar LanguageModelV1FunctionToolSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"function\"),\n    name: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n    description: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.custom((val)=>typeof val === \"object\" && val !== null)\n});\nvar TextContentPartSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"text\"),\n    text: zod__WEBPACK_IMPORTED_MODULE_1__.z.string()\n});\nvar ImageContentPartSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"image\"),\n    image: zod__WEBPACK_IMPORTED_MODULE_1__.z.string()\n});\nvar CoreToolCallContentPartSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"tool-call\"),\n    toolCallId: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n    toolName: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n    args: zod__WEBPACK_IMPORTED_MODULE_1__.z.record(zod__WEBPACK_IMPORTED_MODULE_1__.z.unknown()),\n    result: zod__WEBPACK_IMPORTED_MODULE_1__.z.unknown().optional(),\n    isError: zod__WEBPACK_IMPORTED_MODULE_1__.z.boolean().optional()\n});\nvar CoreUserMessageSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"user\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.discriminatedUnion(\"type\", [\n        TextContentPartSchema,\n        ImageContentPartSchema\n    ])).min(1)\n});\nvar CoreAssistantMessageSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"assistant\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.discriminatedUnion(\"type\", [\n        TextContentPartSchema,\n        CoreToolCallContentPartSchema\n    ])).min(1)\n});\nvar CoreSystemMessageSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"system\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_1__.z.tuple([\n        TextContentPartSchema\n    ])\n});\nvar CoreMessageSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.discriminatedUnion(\"role\", [\n    CoreSystemMessageSchema,\n    CoreUserMessageSchema,\n    CoreAssistantMessageSchema\n]);\nvar EdgeRuntimeRequestOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    system: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n    messages: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(CoreMessageSchema).min(1),\n    tools: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(LanguageModelV1FunctionToolSchema).optional()\n}).merge(LanguageModelV1CallSettingsSchema).merge(LanguageModelConfigSchema);\n// src/runtimes/edge/streams/toolResultStream.ts\n\n\nfunction toolResultStream(tools, abortSignal) {\n    const toolCallExecutions = /* @__PURE__ */ new Map();\n    return new TransformStream({\n        transform (chunk, controller) {\n            controller.enqueue(chunk);\n            const chunkType = chunk.type;\n            switch(chunkType){\n                case \"tool-call\":\n                    {\n                        const { toolCallId, toolCallType, toolName, args: argsText } = chunk;\n                        const tool = tools?.[toolName];\n                        if (!tool || !tool.execute) return;\n                        const args = secure_json_parse__WEBPACK_IMPORTED_MODULE_2__.parse(argsText);\n                        if (tool.parameters instanceof zod__WEBPACK_IMPORTED_MODULE_1__.z.ZodType) {\n                            const result = tool.parameters.safeParse(args);\n                            if (!result.success) {\n                                controller.enqueue({\n                                    type: \"tool-result\",\n                                    toolCallType,\n                                    toolCallId,\n                                    toolName,\n                                    result: \"Function parameter validation failed. \" + JSON.stringify(result.error.issues),\n                                    isError: true\n                                });\n                                return;\n                            } else {\n                                toolCallExecutions.set(toolCallId, (async ()=>{\n                                    if (!tool.execute) return;\n                                    try {\n                                        const result2 = await tool.execute(args, {\n                                            abortSignal\n                                        });\n                                        controller.enqueue({\n                                            type: \"tool-result\",\n                                            toolCallType,\n                                            toolCallId,\n                                            toolName,\n                                            result: result2\n                                        });\n                                    } catch (error) {\n                                        controller.enqueue({\n                                            type: \"tool-result\",\n                                            toolCallType,\n                                            toolCallId,\n                                            toolName,\n                                            result: \"Error: \" + error,\n                                            isError: true\n                                        });\n                                    } finally{\n                                        toolCallExecutions.delete(toolCallId);\n                                    }\n                                })());\n                            }\n                        }\n                        break;\n                    }\n                // ignore other parts\n                case \"text-delta\":\n                case \"tool-call-delta\":\n                case \"tool-result\":\n                case \"step-finish\":\n                case \"finish\":\n                case \"error\":\n                case \"response-metadata\":\n                    break;\n                default:\n                    {\n                        const unhandledType = chunkType;\n                        throw new Error(`Unhandled chunk type: ${unhandledType}`);\n                    }\n            }\n        },\n        async flush () {\n            await Promise.all(toolCallExecutions.values());\n        }\n    });\n}\n// src/runtimes/edge/partial-json/parse-partial-json.ts\n\n// src/runtimes/edge/partial-json/fix-json.ts\nfunction fixJson(input) {\n    const stack = [\n        \"ROOT\"\n    ];\n    let lastValidIndex = -1;\n    let literalStart = null;\n    function processValueStart(char, i, swapState) {\n        {\n            switch(char){\n                case '\"':\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_STRING\");\n                        break;\n                    }\n                case \"f\":\n                case \"t\":\n                case \"n\":\n                    {\n                        lastValidIndex = i;\n                        literalStart = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_LITERAL\");\n                        break;\n                    }\n                case \"-\":\n                    {\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_NUMBER\");\n                        break;\n                    }\n                case \"0\":\n                case \"1\":\n                case \"2\":\n                case \"3\":\n                case \"4\":\n                case \"5\":\n                case \"6\":\n                case \"7\":\n                case \"8\":\n                case \"9\":\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_NUMBER\");\n                        break;\n                    }\n                case \"{\":\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_OBJECT_START\");\n                        break;\n                    }\n                case \"[\":\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_ARRAY_START\");\n                        break;\n                    }\n            }\n        }\n    }\n    function processAfterObjectValue(char, i) {\n        switch(char){\n            case \",\":\n                {\n                    stack.pop();\n                    stack.push(\"INSIDE_OBJECT_AFTER_COMMA\");\n                    break;\n                }\n            case \"}\":\n                {\n                    lastValidIndex = i;\n                    stack.pop();\n                    break;\n                }\n        }\n    }\n    function processAfterArrayValue(char, i) {\n        switch(char){\n            case \",\":\n                {\n                    stack.pop();\n                    stack.push(\"INSIDE_ARRAY_AFTER_COMMA\");\n                    break;\n                }\n            case \"]\":\n                {\n                    lastValidIndex = i;\n                    stack.pop();\n                    break;\n                }\n        }\n    }\n    for(let i = 0; i < input.length; i++){\n        const char = input[i];\n        const currentState = stack[stack.length - 1];\n        switch(currentState){\n            case \"ROOT\":\n                processValueStart(char, i, \"FINISH\");\n                break;\n            case \"INSIDE_OBJECT_START\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_KEY\");\n                                break;\n                            }\n                        case \"}\":\n                            {\n                                lastValidIndex = i;\n                                stack.pop();\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_AFTER_COMMA\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_KEY\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_KEY\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_AFTER_KEY\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_AFTER_KEY\":\n                {\n                    switch(char){\n                        case \":\":\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_BEFORE_VALUE\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_BEFORE_VALUE\":\n                {\n                    processValueStart(char, i, \"INSIDE_OBJECT_AFTER_VALUE\");\n                    break;\n                }\n            case \"INSIDE_OBJECT_AFTER_VALUE\":\n                {\n                    processAfterObjectValue(char, i);\n                    break;\n                }\n            case \"INSIDE_STRING\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                lastValidIndex = i;\n                                break;\n                            }\n                        case \"\\\\\":\n                            {\n                                stack.push(\"INSIDE_STRING_ESCAPE\");\n                                break;\n                            }\n                        default:\n                            {\n                                lastValidIndex = i;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_ARRAY_START\":\n                {\n                    switch(char){\n                        case \"]\":\n                            {\n                                lastValidIndex = i;\n                                stack.pop();\n                                break;\n                            }\n                        default:\n                            {\n                                lastValidIndex = i;\n                                processValueStart(char, i, \"INSIDE_ARRAY_AFTER_VALUE\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_ARRAY_AFTER_VALUE\":\n                {\n                    switch(char){\n                        case \",\":\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_ARRAY_AFTER_COMMA\");\n                                break;\n                            }\n                        case \"]\":\n                            {\n                                lastValidIndex = i;\n                                stack.pop();\n                                break;\n                            }\n                        default:\n                            {\n                                lastValidIndex = i;\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_ARRAY_AFTER_COMMA\":\n                {\n                    processValueStart(char, i, \"INSIDE_ARRAY_AFTER_VALUE\");\n                    break;\n                }\n            case \"INSIDE_STRING_ESCAPE\":\n                {\n                    stack.pop();\n                    lastValidIndex = i;\n                    break;\n                }\n            case \"INSIDE_NUMBER\":\n                {\n                    switch(char){\n                        case \"0\":\n                        case \"1\":\n                        case \"2\":\n                        case \"3\":\n                        case \"4\":\n                        case \"5\":\n                        case \"6\":\n                        case \"7\":\n                        case \"8\":\n                        case \"9\":\n                            {\n                                lastValidIndex = i;\n                                break;\n                            }\n                        case \"e\":\n                        case \"E\":\n                        case \"-\":\n                        case \".\":\n                            {\n                                break;\n                            }\n                        case \",\":\n                            {\n                                stack.pop();\n                                if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n                                    processAfterArrayValue(char, i);\n                                }\n                                if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n                                    processAfterObjectValue(char, i);\n                                }\n                                break;\n                            }\n                        case \"}\":\n                            {\n                                stack.pop();\n                                if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n                                    processAfterObjectValue(char, i);\n                                }\n                                break;\n                            }\n                        case \"]\":\n                            {\n                                stack.pop();\n                                if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n                                    processAfterArrayValue(char, i);\n                                }\n                                break;\n                            }\n                        default:\n                            {\n                                stack.pop();\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_LITERAL\":\n                {\n                    const partialLiteral = input.substring(literalStart, i + 1);\n                    if (!\"false\".startsWith(partialLiteral) && !\"true\".startsWith(partialLiteral) && !\"null\".startsWith(partialLiteral)) {\n                        stack.pop();\n                        if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n                            processAfterObjectValue(char, i);\n                        } else if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n                            processAfterArrayValue(char, i);\n                        }\n                    } else {\n                        lastValidIndex = i;\n                    }\n                    break;\n                }\n        }\n    }\n    let result = input.slice(0, lastValidIndex + 1);\n    for(let i = stack.length - 1; i >= 0; i--){\n        const state = stack[i];\n        switch(state){\n            case \"INSIDE_STRING\":\n                {\n                    result += '\"';\n                    break;\n                }\n            case \"INSIDE_OBJECT_KEY\":\n            case \"INSIDE_OBJECT_AFTER_KEY\":\n            case \"INSIDE_OBJECT_AFTER_COMMA\":\n            case \"INSIDE_OBJECT_START\":\n            case \"INSIDE_OBJECT_BEFORE_VALUE\":\n            case \"INSIDE_OBJECT_AFTER_VALUE\":\n                {\n                    result += \"}\";\n                    break;\n                }\n            case \"INSIDE_ARRAY_START\":\n            case \"INSIDE_ARRAY_AFTER_COMMA\":\n            case \"INSIDE_ARRAY_AFTER_VALUE\":\n                {\n                    result += \"]\";\n                    break;\n                }\n            case \"INSIDE_LITERAL\":\n                {\n                    const partialLiteral = input.substring(literalStart, input.length);\n                    if (\"true\".startsWith(partialLiteral)) {\n                        result += \"true\".slice(partialLiteral.length);\n                    } else if (\"false\".startsWith(partialLiteral)) {\n                        result += \"false\".slice(partialLiteral.length);\n                    } else if (\"null\".startsWith(partialLiteral)) {\n                        result += \"null\".slice(partialLiteral.length);\n                    }\n                }\n        }\n    }\n    return result;\n}\n// src/runtimes/edge/partial-json/parse-partial-json.ts\nvar parsePartialJson = (json)=>{\n    try {\n        return secure_json_parse__WEBPACK_IMPORTED_MODULE_2__.parse(json);\n    } catch  {\n        try {\n            return secure_json_parse__WEBPACK_IMPORTED_MODULE_2__.parse(fixJson(json));\n        } catch  {\n            return void 0;\n        }\n    }\n};\n// src/runtimes/edge/streams/runResultStream.ts\nfunction runResultStream() {\n    let message = {\n        content: [],\n        status: {\n            type: \"running\"\n        }\n    };\n    return new TransformStream({\n        transform (chunk, controller) {\n            const chunkType = chunk.type;\n            switch(chunkType){\n                case \"text-delta\":\n                    {\n                        message = appendOrUpdateText(message, chunk.textDelta);\n                        controller.enqueue(message);\n                        break;\n                    }\n                case \"tool-call-delta\":\n                    {\n                        const { toolCallId, toolName, argsTextDelta } = chunk;\n                        message = appendOrUpdateToolCall(message, toolCallId, toolName, argsTextDelta);\n                        controller.enqueue(message);\n                        break;\n                    }\n                case \"tool-call\":\n                case \"response-metadata\":\n                    break;\n                case \"tool-result\":\n                    {\n                        message = appendOrUpdateToolResult(message, chunk.toolCallId, chunk.toolName, chunk.result);\n                        controller.enqueue(message);\n                        break;\n                    }\n                case \"step-finish\":\n                    {\n                        message = appendOrUpdateStepFinish(message, chunk);\n                        controller.enqueue(message);\n                        break;\n                    }\n                case \"finish\":\n                    {\n                        message = appendOrUpdateFinish(message, chunk);\n                        controller.enqueue(message);\n                        break;\n                    }\n                case \"error\":\n                    {\n                        if (chunk.error instanceof Error && chunk.error.name === \"AbortError\") {\n                            message = appendOrUpdateCancel(message);\n                            controller.enqueue(message);\n                            break;\n                        } else {\n                            throw chunk.error;\n                        }\n                    }\n                default:\n                    {\n                        const unhandledType = chunkType;\n                        throw new Error(`Unhandled chunk type: ${unhandledType}`);\n                    }\n            }\n        }\n    });\n}\nvar appendOrUpdateText = (message, textDelta)=>{\n    let contentParts = message.content ?? [];\n    let contentPart = message.content?.at(-1);\n    if (contentPart?.type !== \"text\") {\n        contentPart = {\n            type: \"text\",\n            text: textDelta\n        };\n    } else {\n        contentParts = contentParts.slice(0, -1);\n        contentPart = {\n            type: \"text\",\n            text: contentPart.text + textDelta\n        };\n    }\n    return {\n        ...message,\n        content: contentParts.concat([\n            contentPart\n        ])\n    };\n};\nvar appendOrUpdateToolCall = (message, toolCallId, toolName, argsTextDelta)=>{\n    let contentParts = message.content ?? [];\n    let contentPartIdx = contentParts.findIndex((c)=>c.type === \"tool-call\" && c.toolCallId === toolCallId);\n    let contentPart = contentPartIdx === -1 ? null : contentParts[contentPartIdx];\n    if (contentPart == null) {\n        contentPart = {\n            type: \"tool-call\",\n            toolCallId,\n            toolName,\n            argsText: argsTextDelta,\n            args: parsePartialJson(argsTextDelta)\n        };\n        contentParts = [\n            ...contentParts,\n            contentPart\n        ];\n    } else {\n        const argsText = contentPart.argsText + argsTextDelta;\n        contentPart = {\n            ...contentPart,\n            argsText,\n            args: parsePartialJson(argsText)\n        };\n        contentParts = [\n            ...contentParts.slice(0, contentPartIdx),\n            contentPart,\n            ...contentParts.slice(contentPartIdx + 1)\n        ];\n    }\n    return {\n        ...message,\n        content: contentParts\n    };\n};\nvar appendOrUpdateToolResult = (message, toolCallId, toolName, result)=>{\n    let found = false;\n    const newContentParts = message.content?.map((part)=>{\n        if (part.type !== \"tool-call\" || part.toolCallId !== toolCallId) return part;\n        found = true;\n        if (part.toolName !== toolName) throw new Error(`Tool call ${toolCallId} found with tool name ${part.toolName}, but expected ${toolName}`);\n        return {\n            ...part,\n            result\n        };\n    });\n    if (!found) throw new Error(`Received tool result for unknown tool call \"${toolName}\" / \"${toolCallId}\". This is likely an internal bug in assistant-ui.`);\n    return {\n        ...message,\n        content: newContentParts\n    };\n};\nvar appendOrUpdateStepFinish = (message, chunk)=>{\n    const { type, ...rest } = chunk;\n    const steps = [\n        ...message.metadata?.steps ?? [],\n        {\n            usage: rest.usage\n        }\n    ];\n    return {\n        ...message,\n        status: getStatus(chunk),\n        metadata: {\n            ...message.metadata,\n            roundtrips: steps,\n            steps\n        }\n    };\n};\nvar appendOrUpdateFinish = (message, chunk)=>{\n    const { type, ...rest } = chunk;\n    const steps = [\n        ...message.metadata?.steps ?? [],\n        {\n            logprobs: rest.logprobs,\n            usage: rest.usage\n        }\n    ];\n    return {\n        ...message,\n        status: getStatus(chunk),\n        metadata: {\n            ...message.metadata,\n            roundtrips: steps,\n            steps\n        }\n    };\n};\nvar getStatus = (chunk)=>{\n    if (chunk.finishReason === \"tool-calls\") {\n        return {\n            type: \"requires-action\",\n            reason: \"tool-calls\"\n        };\n    } else if (chunk.finishReason === \"stop\" || chunk.finishReason === \"unknown\") {\n        return {\n            type: \"complete\",\n            reason: chunk.finishReason\n        };\n    } else {\n        return {\n            type: \"incomplete\",\n            reason: chunk.finishReason\n        };\n    }\n};\nvar appendOrUpdateCancel = (message)=>{\n    return {\n        ...message,\n        status: {\n            type: \"incomplete\",\n            reason: \"cancelled\"\n        }\n    };\n};\n// src/runtimes/edge/streams/utils/PipeableTransformStream.ts\nvar PipeableTransformStream = class extends TransformStream {\n    constructor(transform){\n        super();\n        const readable = transform(super.readable);\n        Object.defineProperty(this, \"readable\", {\n            value: readable,\n            writable: false\n        });\n    }\n};\n// src/runtimes/edge/streams/utils/streamPartEncoderStream.ts\nfunction encodeStreamPart({ type, value }) {\n    return `${type}:${JSON.stringify(value)}\n`;\n}\nfunction streamPartEncoderStream() {\n    const encodeStream = new TransformStream({\n        transform (chunk, controller) {\n            controller.enqueue(encodeStreamPart(chunk));\n        }\n    });\n    return new PipeableTransformStream((readable)=>{\n        return readable.pipeThrough(encodeStream).pipeThrough(new TextEncoderStream());\n    });\n}\n// src/runtimes/edge/createEdgeRuntimeAPI.ts\nvar voidStream = ()=>{\n    return new WritableStream({\n        abort (reason) {\n            console.error(\"Server stream processing aborted:\", reason);\n        }\n    });\n};\nvar getEdgeRuntimeStream = async ({ abortSignal, requestData: unsafeRequest, options: { model: modelOrCreator, system: serverSystem, tools: serverTools = {}, toolChoice, onFinish, ...unsafeSettings } })=>{\n    const settings = LanguageModelV1CallSettingsSchema.parse(unsafeSettings);\n    const lmServerTools = toLanguageModelTools(serverTools);\n    const hasServerTools = Object.values(serverTools).some((v)=>!!v.execute);\n    const { system: clientSystem, tools: clientTools = [], messages, apiKey, baseUrl, modelName, ...callSettings } = EdgeRuntimeRequestOptionsSchema.parse(unsafeRequest);\n    const systemMessages = [];\n    if (serverSystem) systemMessages.push(serverSystem);\n    if (clientSystem) systemMessages.push(clientSystem);\n    const system = systemMessages.join(\"\\n\\n\");\n    for (const clientTool of clientTools){\n        if (serverTools?.[clientTool.name]) {\n            throw new Error(`Tool ${clientTool.name} was defined in both the client and server tools. This is not allowed.`);\n        }\n    }\n    const model = typeof modelOrCreator === \"function\" ? await modelOrCreator({\n        apiKey,\n        baseUrl,\n        modelName\n    }) : modelOrCreator;\n    let stream;\n    const streamResult = await streamMessage({\n        ...settings,\n        ...callSettings,\n        model,\n        abortSignal,\n        ...!!system ? {\n            system\n        } : void 0,\n        messages,\n        tools: lmServerTools.concat(clientTools),\n        ...toolChoice ? {\n            toolChoice\n        } : void 0\n    });\n    stream = streamResult.stream;\n    const canExecuteTools = hasServerTools && toolChoice?.type !== \"none\";\n    if (canExecuteTools) {\n        stream = stream.pipeThrough(toolResultStream(serverTools, abortSignal));\n    }\n    if (canExecuteTools || onFinish) {\n        const tees = stream.tee();\n        stream = tees[0];\n        let serverStream = tees[1];\n        if (onFinish) {\n            let lastChunk;\n            serverStream = serverStream.pipeThrough(runResultStream()).pipeThrough(new TransformStream({\n                transform (chunk) {\n                    lastChunk = chunk;\n                },\n                flush () {\n                    if (!lastChunk?.status || lastChunk.status.type === \"running\") return;\n                    const resultingMessages = [\n                        ...messages,\n                        toCoreMessage({\n                            role: \"assistant\",\n                            content: lastChunk.content\n                        })\n                    ];\n                    onFinish({\n                        messages: resultingMessages,\n                        metadata: {\n                            // TODO\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\n                            roundtrips: lastChunk.metadata?.steps,\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\n                            steps: lastChunk.metadata?.steps\n                        }\n                    });\n                }\n            }));\n        }\n        serverStream.pipeTo(voidStream()).catch((e)=>{\n            console.error(\"Server stream processing error:\", e);\n        });\n    }\n    return stream;\n};\nvar getEdgeRuntimeResponse = async (options)=>{\n    const stream = await getEdgeRuntimeStream(options);\n    return new Response(stream.pipeThrough(assistantEncoderStream()).pipeThrough(streamPartEncoderStream()), {\n        headers: {\n            \"Content-Type\": \"text/plain; charset=utf-8\"\n        }\n    });\n};\nvar createEdgeRuntimeAPI = (options)=>({\n        POST: async (request)=>getEdgeRuntimeResponse({\n                abortSignal: request.signal,\n                requestData: await request.json(),\n                options\n            })\n    });\nasync function streamMessage({ model, system, messages, tools, toolChoice, ...options }) {\n    return model.doStream({\n        inputFormat: \"messages\",\n        mode: {\n            type: \"regular\",\n            ...tools ? {\n                tools\n            } : void 0,\n            ...toolChoice ? {\n                toolChoice\n            } : void 0\n        },\n        prompt: convertToLanguageModelPrompt(system, messages),\n        ...options\n    });\n}\nfunction convertToLanguageModelPrompt(system, messages) {\n    const languageModelMessages = [];\n    if (system != null) {\n        languageModelMessages.push({\n            role: \"system\",\n            content: system\n        });\n    }\n    languageModelMessages.push(...toLanguageModelMessages(messages));\n    return languageModelMessages;\n}\n //# sourceMappingURL=chunk-TWIMAOZR.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@assistant-ui/react/dist/chunk-TWIMAOZR.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@assistant-ui/react/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@assistant-ui/react/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionBarPrimitive: () => (/* binding */ actionBar_exports),\n/* harmony export */   AssistantActionBar: () => (/* binding */ assistant_action_bar_default),\n/* harmony export */   AssistantMessage: () => (/* binding */ assistant_message_default),\n/* harmony export */   AssistantModal: () => (/* binding */ assistant_modal_default),\n/* harmony export */   AssistantModalPrimitive: () => (/* binding */ assistantModal_exports),\n/* harmony export */   AssistantRuntimeProvider: () => (/* binding */ AssistantRuntimeProvider),\n/* harmony export */   AttachmentPrimitive: () => (/* binding */ attachment_exports),\n/* harmony export */   AttachmentUI: () => (/* binding */ attachment_default),\n/* harmony export */   BranchPicker: () => (/* binding */ branch_picker_default),\n/* harmony export */   BranchPickerPrimitive: () => (/* binding */ branchPicker_exports),\n/* harmony export */   Composer: () => (/* binding */ composer_default),\n/* harmony export */   ComposerAttachment: () => (/* binding */ attachment_default),\n/* harmony export */   ComposerPrimitive: () => (/* binding */ composer_exports),\n/* harmony export */   CompositeAttachmentAdapter: () => (/* binding */ CompositeAttachmentAdapter),\n/* harmony export */   ContentPart: () => (/* binding */ content_part_default),\n/* harmony export */   ContentPartPrimitive: () => (/* binding */ contentPart_exports),\n/* harmony export */   EdgeChatAdapter: () => (/* binding */ EdgeChatAdapter),\n/* harmony export */   EditComposer: () => (/* binding */ edit_composer_default),\n/* harmony export */   INTERNAL: () => (/* binding */ internal_exports),\n/* harmony export */   MessagePrimitive: () => (/* binding */ message_exports),\n/* harmony export */   SimpleImageAttachmentAdapter: () => (/* binding */ SimpleImageAttachmentAdapter),\n/* harmony export */   SimpleTextAttachmentAdapter: () => (/* binding */ SimpleTextAttachmentAdapter),\n/* harmony export */   TextContentPartProvider: () => (/* binding */ TextContentPartProvider),\n/* harmony export */   Thread: () => (/* binding */ thread_default),\n/* harmony export */   ThreadConfigProvider: () => (/* binding */ ThreadConfigProvider),\n/* harmony export */   ThreadPrimitive: () => (/* binding */ thread_exports),\n/* harmony export */   ThreadWelcome: () => (/* binding */ thread_welcome_default),\n/* harmony export */   UserActionBar: () => (/* binding */ user_action_bar_default),\n/* harmony export */   UserMessage: () => (/* binding */ user_message_default),\n/* harmony export */   UserMessageAttachment: () => (/* binding */ attachment_default),\n/* harmony export */   WebSpeechSynthesisAdapter: () => (/* binding */ WebSpeechSynthesisAdapter),\n/* harmony export */   fromCoreMessage: () => (/* binding */ fromCoreMessage),\n/* harmony export */   fromCoreMessages: () => (/* binding */ fromCoreMessages),\n/* harmony export */   fromLanguageModelMessages: () => (/* binding */ fromLanguageModelMessages),\n/* harmony export */   fromLanguageModelTools: () => (/* binding */ fromLanguageModelTools),\n/* harmony export */   getExternalStoreMessage: () => (/* binding */ getExternalStoreMessage),\n/* harmony export */   makeAssistantTool: () => (/* binding */ makeAssistantTool),\n/* harmony export */   makeAssistantToolUI: () => (/* binding */ makeAssistantToolUI),\n/* harmony export */   streamUtils: () => (/* binding */ streamUtils),\n/* harmony export */   subscribeToMainThread: () => (/* binding */ subscribeToMainThread),\n/* harmony export */   toCoreMessage: () => (/* reexport safe */ _chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.toCoreMessage),\n/* harmony export */   toCoreMessages: () => (/* reexport safe */ _chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.toCoreMessages),\n/* harmony export */   toLanguageModelMessages: () => (/* reexport safe */ _chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.toLanguageModelMessages),\n/* harmony export */   toLanguageModelTools: () => (/* reexport safe */ _chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.toLanguageModelTools),\n/* harmony export */   useActionBarCopy: () => (/* binding */ useActionBarCopy),\n/* harmony export */   useActionBarEdit: () => (/* binding */ useActionBarEdit),\n/* harmony export */   useActionBarFeedbackNegative: () => (/* binding */ useActionBarFeedbackNegative),\n/* harmony export */   useActionBarFeedbackPositive: () => (/* binding */ useActionBarFeedbackPositive),\n/* harmony export */   useActionBarReload: () => (/* binding */ useActionBarReload),\n/* harmony export */   useActionBarSpeak: () => (/* binding */ useActionBarSpeak),\n/* harmony export */   useActionBarStopSpeaking: () => (/* binding */ useActionBarStopSpeaking),\n/* harmony export */   useAppendMessage: () => (/* binding */ useAppendMessage),\n/* harmony export */   useAssistantActions: () => (/* binding */ useAssistantActions),\n/* harmony export */   useAssistantActionsStore: () => (/* binding */ useAssistantActionsStore),\n/* harmony export */   useAssistantContext: () => (/* binding */ useAssistantContext),\n/* harmony export */   useAssistantInstructions: () => (/* binding */ useAssistantInstructions),\n/* harmony export */   useAssistantRuntime: () => (/* binding */ useAssistantRuntime),\n/* harmony export */   useAssistantRuntimeStore: () => (/* binding */ useAssistantRuntimeStore),\n/* harmony export */   useAssistantTool: () => (/* binding */ useAssistantTool),\n/* harmony export */   useAssistantToolUI: () => (/* binding */ useAssistantToolUI),\n/* harmony export */   useBranchPickerCount: () => (/* binding */ useBranchPickerCount),\n/* harmony export */   useBranchPickerNext: () => (/* binding */ useBranchPickerNext),\n/* harmony export */   useBranchPickerNumber: () => (/* binding */ useBranchPickerNumber),\n/* harmony export */   useBranchPickerPrevious: () => (/* binding */ useBranchPickerPrevious),\n/* harmony export */   useComposer: () => (/* binding */ useComposer),\n/* harmony export */   useComposerAddAttachment: () => (/* binding */ useComposerAddAttachment),\n/* harmony export */   useComposerCancel: () => (/* binding */ useComposerCancel),\n/* harmony export */   useComposerContext: () => (/* binding */ useComposerContext),\n/* harmony export */   useComposerIf: () => (/* binding */ useComposerIf),\n/* harmony export */   useComposerRuntime: () => (/* binding */ useComposerRuntime),\n/* harmony export */   useComposerSend: () => (/* binding */ useComposerSend),\n/* harmony export */   useComposerStore: () => (/* binding */ useComposerStore),\n/* harmony export */   useContentPart: () => (/* binding */ useContentPart),\n/* harmony export */   useContentPartContext: () => (/* binding */ useContentPartContext),\n/* harmony export */   useContentPartDisplay: () => (/* binding */ useContentPartDisplay),\n/* harmony export */   useContentPartImage: () => (/* binding */ useContentPartImage),\n/* harmony export */   useContentPartRuntime: () => (/* binding */ useContentPartRuntime),\n/* harmony export */   useContentPartStore: () => (/* binding */ useContentPartStore),\n/* harmony export */   useContentPartText: () => (/* binding */ useContentPartText),\n/* harmony export */   useDangerousInBrowserRuntime: () => (/* binding */ useDangerousInBrowserRuntime),\n/* harmony export */   useEdgeRuntime: () => (/* binding */ useEdgeRuntime),\n/* harmony export */   useEditComposer: () => (/* binding */ useEditComposer),\n/* harmony export */   useEditComposerStore: () => (/* binding */ useEditComposerStore),\n/* harmony export */   useExternalMessageConverter: () => (/* binding */ useExternalMessageConverter),\n/* harmony export */   useExternalStoreRuntime: () => (/* binding */ useExternalStoreRuntime),\n/* harmony export */   useLocalRuntime: () => (/* binding */ useLocalRuntime),\n/* harmony export */   useMessage: () => (/* binding */ useMessage),\n/* harmony export */   useMessageContext: () => (/* binding */ useMessageContext),\n/* harmony export */   useMessageIf: () => (/* binding */ useMessageIf),\n/* harmony export */   useMessageRuntime: () => (/* binding */ useMessageRuntime),\n/* harmony export */   useMessageStore: () => (/* binding */ useMessageStore),\n/* harmony export */   useMessageUtils: () => (/* binding */ useMessageUtils),\n/* harmony export */   useMessageUtilsStore: () => (/* binding */ useMessageUtilsStore),\n/* harmony export */   useSwitchToNewThread: () => (/* binding */ useSwitchToNewThread),\n/* harmony export */   useThread: () => (/* binding */ useThread),\n/* harmony export */   useThreadActions: () => (/* binding */ useThreadActions),\n/* harmony export */   useThreadActionsStore: () => (/* binding */ useThreadActionsStore),\n/* harmony export */   useThreadComposer: () => (/* binding */ useThreadComposer),\n/* harmony export */   useThreadComposerStore: () => (/* binding */ useThreadComposerStore),\n/* harmony export */   useThreadConfig: () => (/* binding */ useThreadConfig),\n/* harmony export */   useThreadContext: () => (/* binding */ useThreadContext),\n/* harmony export */   useThreadEmpty: () => (/* binding */ useThreadEmpty),\n/* harmony export */   useThreadIf: () => (/* binding */ useThreadIf),\n/* harmony export */   useThreadMessages: () => (/* binding */ useThreadMessages),\n/* harmony export */   useThreadMessagesStore: () => (/* binding */ useThreadMessagesStore),\n/* harmony export */   useThreadModelConfig: () => (/* binding */ useThreadModelConfig),\n/* harmony export */   useThreadRuntime: () => (/* binding */ useThreadRuntime),\n/* harmony export */   useThreadRuntimeStore: () => (/* binding */ useThreadRuntimeStore),\n/* harmony export */   useThreadScrollToBottom: () => (/* binding */ useThreadScrollToBottom),\n/* harmony export */   useThreadStore: () => (/* binding */ useThreadStore),\n/* harmony export */   useThreadSuggestion: () => (/* binding */ useThreadSuggestion),\n/* harmony export */   useThreadViewport: () => (/* binding */ useThreadViewport),\n/* harmony export */   useThreadViewportStore: () => (/* binding */ useThreadViewportStore),\n/* harmony export */   useToolUIs: () => (/* binding */ useToolUIs),\n/* harmony export */   useToolUIsStore: () => (/* binding */ useToolUIsStore)\n/* harmony export */ });\n/* harmony import */ var _chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./chunk-TWIMAOZR.mjs */ \"(ssr)/./node_modules/@assistant-ui/react/dist/chunk-TWIMAOZR.mjs\");\n/* harmony import */ var _chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-BJPOCE4O.mjs */ \"(ssr)/./node_modules/@assistant-ui/react/dist/chunk-BJPOCE4O.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(ssr)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @radix-ui/react-primitive */ \"(ssr)/./node_modules/@radix-ui/react-primitive/dist/index.mjs\");\n/* harmony import */ var _radix_ui_primitive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/primitive */ \"(ssr)/./node_modules/@radix-ui/primitive/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_use_escape_keydown__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @radix-ui/react-use-escape-keydown */ \"(ssr)/./node_modules/@radix-ui/react-use-escape-keydown/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @radix-ui/react-popover */ \"(ssr)/./node_modules/@radix-ui/react-popover/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @radix-ui/react-compose-refs */ \"(ssr)/./node_modules/@radix-ui/react-compose-refs/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @radix-ui/react-use-callback-ref */ \"(ssr)/./node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react_textarea_autosize__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-textarea-autosize */ \"(ssr)/./node_modules/react-textarea-autosize/dist/react-textarea-autosize.development.esm.js\");\n/* harmony import */ var nanoid_non_secure__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! nanoid/non-secure */ \"(ssr)/./node_modules/nanoid/non-secure/index.js\");\n/* harmony import */ var _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @radix-ui/react-tooltip */ \"(ssr)/./node_modules/@radix-ui/react-tooltip/dist/index.mjs\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\");\n/* harmony import */ var class_variance_authority__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! class-variance-authority */ \"(ssr)/./node_modules/class-variance-authority/dist/index.mjs\");\n/* harmony import */ var _barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=AudioLinesIcon,CheckIcon,CopyIcon,RefreshCwIcon,StopCircleIcon,ThumbsDownIcon,ThumbsUpIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/check.js\");\n/* harmony import */ var _barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=AudioLinesIcon,CheckIcon,CopyIcon,RefreshCwIcon,StopCircleIcon,ThumbsDownIcon,ThumbsUpIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/copy.js\");\n/* harmony import */ var _barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=AudioLinesIcon,CheckIcon,CopyIcon,RefreshCwIcon,StopCircleIcon,ThumbsDownIcon,ThumbsUpIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/audio-lines.js\");\n/* harmony import */ var _barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=AudioLinesIcon,CheckIcon,CopyIcon,RefreshCwIcon,StopCircleIcon,ThumbsDownIcon,ThumbsUpIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/circle-stop.js\");\n/* harmony import */ var _barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=AudioLinesIcon,CheckIcon,CopyIcon,RefreshCwIcon,StopCircleIcon,ThumbsDownIcon,ThumbsUpIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/refresh-cw.js\");\n/* harmony import */ var _barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=AudioLinesIcon,CheckIcon,CopyIcon,RefreshCwIcon,StopCircleIcon,ThumbsDownIcon,ThumbsUpIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/thumbs-up.js\");\n/* harmony import */ var _barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! __barrel_optimize__?names=AudioLinesIcon,CheckIcon,CopyIcon,RefreshCwIcon,StopCircleIcon,ThumbsDownIcon,ThumbsUpIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/thumbs-down.js\");\n/* harmony import */ var _barrel_optimize_names_ChevronLeftIcon_ChevronRightIcon_lucide_react__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! __barrel_optimize__?names=ChevronLeftIcon,ChevronRightIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/chevron-left.js\");\n/* harmony import */ var _barrel_optimize_names_ChevronLeftIcon_ChevronRightIcon_lucide_react__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! __barrel_optimize__?names=ChevronLeftIcon,ChevronRightIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/chevron-right.js\");\n/* harmony import */ var _radix_ui_react_avatar__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @radix-ui/react-avatar */ \"(ssr)/./node_modules/@radix-ui/react-avatar/dist/index.mjs\");\n/* harmony import */ var _barrel_optimize_names_BotIcon_ChevronDownIcon_lucide_react__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! __barrel_optimize__?names=BotIcon,ChevronDownIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/bot.js\");\n/* harmony import */ var _barrel_optimize_names_BotIcon_ChevronDownIcon_lucide_react__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! __barrel_optimize__?names=BotIcon,ChevronDownIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/chevron-down.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowDownIcon_lucide_react__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowDownIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/arrow-down.js\");\n/* harmony import */ var _barrel_optimize_names_PaperclipIcon_SendHorizontalIcon_lucide_react__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! __barrel_optimize__?names=PaperclipIcon,SendHorizontalIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/paperclip.js\");\n/* harmony import */ var _barrel_optimize_names_PaperclipIcon_SendHorizontalIcon_lucide_react__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! __barrel_optimize__?names=PaperclipIcon,SendHorizontalIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/send-horizontal.js\");\n/* harmony import */ var _barrel_optimize_names_CircleXIcon_FileIcon_lucide_react__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! __barrel_optimize__?names=CircleXIcon,FileIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/file.js\");\n/* harmony import */ var _barrel_optimize_names_CircleXIcon_FileIcon_lucide_react__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! __barrel_optimize__?names=CircleXIcon,FileIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/circle-x.js\");\n/* harmony import */ var _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @radix-ui/react-dialog */ \"(ssr)/./node_modules/@radix-ui/react-dialog/dist/index.mjs\");\n/* harmony import */ var _barrel_optimize_names_PencilIcon_lucide_react__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! __barrel_optimize__?names=PencilIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/pencil.js\");\n/* __next_internal_client_entry_do_not_use__ ActionBarPrimitive,AssistantActionBar,AssistantMessage,AssistantModal,AssistantModalPrimitive,AssistantRuntimeProvider,AttachmentPrimitive,AttachmentUI,BranchPicker,BranchPickerPrimitive,Composer,ComposerAttachment,ComposerPrimitive,CompositeAttachmentAdapter,ContentPart,ContentPartPrimitive,EdgeChatAdapter,EditComposer,INTERNAL,MessagePrimitive,SimpleImageAttachmentAdapter,SimpleTextAttachmentAdapter,TextContentPartProvider,Thread,ThreadConfigProvider,ThreadPrimitive,ThreadWelcome,UserActionBar,UserMessage,UserMessageAttachment,WebSpeechSynthesisAdapter,fromCoreMessage,fromCoreMessages,fromLanguageModelMessages,fromLanguageModelTools,getExternalStoreMessage,makeAssistantTool,makeAssistantToolUI,streamUtils,subscribeToMainThread,toCoreMessage,toCoreMessages,toLanguageModelMessages,toLanguageModelTools,useActionBarCopy,useActionBarEdit,useActionBarFeedbackNegative,useActionBarFeedbackPositive,useActionBarReload,useActionBarSpeak,useActionBarStopSpeaking,useAppendMessage,useAssistantActions,useAssistantActionsStore,useAssistantContext,useAssistantInstructions,useAssistantRuntime,useAssistantRuntimeStore,useAssistantTool,useAssistantToolUI,useBranchPickerCount,useBranchPickerNext,useBranchPickerNumber,useBranchPickerPrevious,useComposer,useComposerAddAttachment,useComposerCancel,useComposerContext,useComposerIf,useComposerRuntime,useComposerSend,useComposerStore,useContentPart,useContentPartContext,useContentPartDisplay,useContentPartImage,useContentPartRuntime,useContentPartStore,useContentPartText,useDangerousInBrowserRuntime,useEdgeRuntime,useEditComposer,useEditComposerStore,useExternalMessageConverter,useExternalStoreRuntime,useLocalRuntime,useMessage,useMessageContext,useMessageIf,useMessageRuntime,useMessageStore,useMessageUtils,useMessageUtilsStore,useSwitchToNewThread,useThread,useThreadActions,useThreadActionsStore,useThreadComposer,useThreadComposerStore,useThreadConfig,useThreadContext,useThreadEmpty,useThreadIf,useThreadMessages,useThreadMessagesStore,useThreadModelConfig,useThreadRuntime,useThreadRuntimeStore,useThreadScrollToBottom,useThreadStore,useThreadSuggestion,useThreadViewport,useThreadViewportStore,useToolUIs,useToolUIsStore auto */ \n\n// src/context/providers/AssistantRuntimeProvider.tsx\n\n// src/context/react/AssistantContext.ts\n\n// src/context/react/utils/createContextHook.ts\n\nfunction createContextHook(context, providerName) {\n    function useContextHook(options) {\n        const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(context);\n        if (!options?.optional && !contextValue) {\n            throw new Error(`This component must be used within ${providerName}.`);\n        }\n        return contextValue;\n    }\n    return useContextHook;\n}\n// src/context/react/utils/createContextStoreHook.ts\nfunction createContextStoreHook(contextHook, contextKey) {\n    function useStoreStoreHook(options) {\n        const context = contextHook(options);\n        if (!context) return null;\n        return context[contextKey];\n    }\n    function useStoreHook(param) {\n        let optional = false;\n        let selector;\n        if (typeof param === \"function\") {\n            selector = param;\n        } else if (param && typeof param === \"object\") {\n            optional = !!param.optional;\n            selector = param.selector;\n        }\n        const store = useStoreStoreHook({\n            optional\n        });\n        if (!store) return null;\n        return selector ? store(selector) : store();\n    }\n    return {\n        [contextKey]: useStoreHook,\n        [`${contextKey}Store`]: useStoreStoreHook\n    };\n}\n// src/context/react/AssistantContext.ts\nvar AssistantContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar useAssistantContext = createContextHook(AssistantContext, \"AssistantRuntimeProvider\");\nfunction useAssistantRuntime(options) {\n    const context = useAssistantContext(options);\n    if (!context) return null;\n    return context.useAssistantRuntime();\n}\nvar actions = createContextStoreHook(useAssistantContext, \"useAssistantActions\");\nvar useAssistantActionsStore = actions.useAssistantActionsStore;\nvar useAssistantActions = actions.useAssistantActions;\nvar useAssistantRuntimeStore = useAssistantActionsStore;\nvar { useToolUIs, useToolUIsStore } = createContextStoreHook(useAssistantContext, \"useToolUIs\");\n// src/context/stores/AssistantToolUIs.ts\n\nvar makeAssistantToolUIsStore = ()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set)=>{\n        const renderers = /* @__PURE__ */ new Map();\n        return Object.freeze({\n            getToolUI: (name)=>{\n                const arr = renderers.get(name);\n                const last = arr?.at(-1);\n                if (last) return last;\n                return null;\n            },\n            setToolUI: (name, render)=>{\n                let arr = renderers.get(name);\n                if (!arr) {\n                    arr = [];\n                    renderers.set(name, arr);\n                }\n                arr.push(render);\n                set({});\n                return ()=>{\n                    const index = arr.indexOf(render);\n                    if (index !== -1) {\n                        arr.splice(index, 1);\n                    }\n                    if (index === arr.length) {\n                        set({});\n                    }\n                };\n            }\n        });\n    });\n// src/context/providers/ThreadRuntimeProvider.tsx\n\n// src/context/react/ThreadContext.ts\n\nvar ThreadContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar useThreadContext = createContextHook(ThreadContext, \"AssistantRuntimeProvider\");\nfunction useThreadRuntime(options) {\n    const context = useThreadContext(options);\n    if (!context) return null;\n    return context.useThreadRuntime();\n}\nvar actions2 = createContextStoreHook(useThreadContext, \"useThreadActions\");\nvar useThreadActionsStore = actions2.useThreadActionsStore;\nvar useThreadActions = actions2.useThreadActions;\nvar useThreadRuntimeStore = useThreadActionsStore;\nvar { useThread, useThreadStore } = createContextStoreHook(useThreadContext, \"useThread\");\nvar messages = createContextStoreHook(useThreadContext, \"useThreadMessages\");\nvar useThreadMessages = messages.useThreadMessages;\nvar useThreadMessagesStore = messages.useThreadMessagesStore;\nvar { useComposer: useThreadComposer, useComposerStore: useThreadComposerStore } = createContextStoreHook(useThreadContext, \"useComposer\");\nvar { useViewport: useThreadViewport, useViewportStore: useThreadViewportStore } = createContextStoreHook(useThreadContext, \"useViewport\");\nfunction useThreadModelConfig(options) {\n    const [, rerender] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const runtime = useThreadRuntime(options);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return runtime?.unstable_on(\"model-config-update\", ()=>rerender({}));\n    }, [\n        runtime\n    ]);\n    if (!runtime) return null;\n    return runtime?.getModelConfig();\n}\n// src/context/stores/ThreadViewport.tsx\n\nvar makeThreadViewportStore = ()=>{\n    const scrollToBottomListeners = /* @__PURE__ */ new Set();\n    return (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>({\n            isAtBottom: true,\n            scrollToBottom: ()=>{\n                for (const listener of scrollToBottomListeners){\n                    listener();\n                }\n            },\n            onScrollToBottom: (callback)=>{\n                scrollToBottomListeners.add(callback);\n                return ()=>{\n                    scrollToBottomListeners.delete(callback);\n                };\n            }\n        }));\n};\n// src/context/ReadonlyStore.ts\nvar writableStore = (store)=>{\n    return store;\n};\n// src/context/providers/ThreadRuntimeProvider.tsx\n\n\nvar useThreadRuntimeStore2 = (runtime)=>{\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>runtime));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        writableStore(store).setState(runtime, true);\n    }, [\n        runtime,\n        store\n    ]);\n    return store;\n};\nvar useThreadStore2 = (runtime)=>{\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>runtime.getState()));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const updateState = ()=>writableStore(store).setState(runtime.getState(), true);\n        updateState();\n        return runtime.subscribe(updateState);\n    }, [\n        runtime,\n        store\n    ]);\n    return store;\n};\nvar useThreadMessagesStore2 = (runtime)=>{\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>runtime.messages));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const updateState = ()=>writableStore(store).setState(runtime.messages, true);\n        updateState();\n        return runtime.subscribe(updateState);\n    }, [\n        runtime,\n        store\n    ]);\n    return store;\n};\nvar useThreadComposerStore2 = (runtime)=>{\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>runtime.getState()));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const updateState = ()=>writableStore(store).setState(runtime.getState(), true);\n        updateState();\n        return runtime.subscribe(updateState);\n    }, [\n        runtime,\n        store\n    ]);\n    return store;\n};\nvar ThreadRuntimeProvider = ({ children, runtime })=>{\n    const useThreadRuntime2 = useThreadRuntimeStore2(runtime);\n    const useThread2 = useThreadStore2(runtime);\n    const useThreadMessages2 = useThreadMessagesStore2(runtime);\n    const useThreadComposer2 = useThreadComposerStore2(runtime.composer);\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const useViewport = makeThreadViewportStore();\n        return {\n            useThread: useThread2,\n            useThreadRuntime: useThreadRuntime2,\n            useThreadMessages: useThreadMessages2,\n            useThreadActions: useThreadRuntime2,\n            useComposer: useThreadComposer2,\n            useViewport\n        };\n    }, [\n        useThread2,\n        useThreadRuntime2,\n        useThreadMessages2,\n        useThreadComposer2\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadContext.Provider, {\n        value: context,\n        children\n    });\n};\n// src/context/providers/AssistantRuntimeProvider.tsx\n\n\nvar useAssistantRuntimeStore2 = (runtime)=>{\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>runtime));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        writableStore(store).setState(runtime, true);\n    }, [\n        runtime,\n        store\n    ]);\n    return store;\n};\nvar useAssistantToolUIsStore = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>makeAssistantToolUIsStore(), []);\n};\nvar AssistantRuntimeProviderImpl = ({ children, runtime })=>{\n    const useAssistantRuntime2 = useAssistantRuntimeStore2(runtime);\n    const useToolUIs2 = useAssistantToolUIsStore();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return {\n            useToolUIs: useToolUIs2,\n            useAssistantRuntime: useAssistantRuntime2,\n            useAssistantActions: useAssistantRuntime2\n        };\n    }, [\n        useAssistantRuntime2,\n        useToolUIs2\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantContext.Provider, {\n        value: context,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadRuntimeProvider, {\n            runtime: runtime.thread,\n            children\n        })\n    });\n};\nvar AssistantRuntimeProvider = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(AssistantRuntimeProviderImpl);\n// src/context/providers/TextContentPartProvider.tsx\n\n\n// src/context/react/ContentPartContext.ts\n\nvar ContentPartContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar useContentPartContext = createContextHook(ContentPartContext, \"a component passed to <MessagePrimitive.Content components={...}>\");\nfunction useContentPartRuntime(options) {\n    const context = useContentPartContext(options);\n    if (!context) return null;\n    return context.useContentPartRuntime();\n}\nvar { useContentPart, useContentPartStore } = createContextStoreHook(useContentPartContext, \"useContentPart\");\n// src/api/ContentPartRuntime.ts\nvar ContentPartRuntimeImpl = class {\n    constructor(contentBinding, messageApi, threadApi){\n        this.contentBinding = contentBinding;\n        this.messageApi = messageApi;\n        this.threadApi = threadApi;\n    }\n    get path() {\n        return this.contentBinding.path;\n    }\n    getState() {\n        return this.contentBinding.getState();\n    }\n    addToolResult(result) {\n        const message = this.messageApi.getState();\n        if (!message) throw new Error(\"Message is not available\");\n        const state = this.contentBinding.getState();\n        if (!state) throw new Error(\"Content part is not available\");\n        if (state.type !== \"tool-call\") throw new Error(\"Tried to add tool result to non-tool content part\");\n        const toolName = state.toolName;\n        const toolCallId = state.toolCallId;\n        this.threadApi.getState().addToolResult({\n            messageId: message.id,\n            toolName,\n            toolCallId,\n            result\n        });\n    }\n    subscribe(callback) {\n        return this.contentBinding.subscribe(callback);\n    }\n};\n// src/context/providers/TextContentPartProvider.tsx\n\nvar COMPLETE_STATUS = {\n    type: \"complete\"\n};\nvar RUNNING_STATUS = {\n    type: \"running\"\n};\nvar TextContentPartProvider = ({ children, text, isRunning })=>{\n    const [context] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        const useContentPartRuntime2 = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(// TODO\n        ()=>new ContentPartRuntimeImpl(null, null, null));\n        const useContentPart2 = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>({\n                status: isRunning ? RUNNING_STATUS : COMPLETE_STATUS,\n                part: {\n                    type: \"text\",\n                    text\n                },\n                type: \"text\",\n                text\n            }));\n        return {\n            useContentPartRuntime: useContentPartRuntime2,\n            useContentPart: useContentPart2\n        };\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const state = context.useContentPart.getState();\n        const textUpdated = state.text !== text;\n        const targetStatus = isRunning ? RUNNING_STATUS : COMPLETE_STATUS;\n        const statusUpdated = state.status !== targetStatus;\n        if (!textUpdated && !statusUpdated) return;\n        writableStore(context.useContentPart).setState({\n            type: \"text\",\n            text,\n            part: {\n                type: \"text\",\n                text\n            },\n            status: targetStatus\n        }, true);\n    }, [\n        context,\n        isRunning,\n        text\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ContentPartContext.Provider, {\n        value: context,\n        children\n    });\n};\n// src/context/react/MessageContext.ts\n\nvar MessageContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar useMessageContext = createContextHook(MessageContext, \"a component passed to <ThreadPrimitive.Messages components={...} />\");\nfunction useMessageRuntime(options) {\n    const context = useMessageContext(options);\n    if (!context) return null;\n    return context.useMessageRuntime();\n}\nvar { useMessage, useMessageStore } = createContextStoreHook(useMessageContext, \"useMessage\");\nvar { useMessageUtils, useMessageUtilsStore } = createContextStoreHook(useMessageContext, \"useMessageUtils\");\nvar { useEditComposer, useEditComposerStore } = createContextStoreHook(useMessageContext, \"useEditComposer\");\n// src/context/react/ComposerContext.ts\n\nvar useComposerContext = ()=>{\n    const { useComposer: useThreadComposer2 } = useThreadContext();\n    const { useEditComposer: useEditComposer2 } = useMessageContext({\n        optional: true\n    }) ?? {};\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            useComposer: useEditComposer2 ?? useThreadComposer2,\n            type: useEditComposer2 ? \"edit\" : \"new\"\n        }), [\n        useEditComposer2,\n        useThreadComposer2\n    ]);\n};\nvar { useComposer, useComposerStore } = createContextStoreHook(useComposerContext, \"useComposer\");\nfunction useComposerRuntime(options) {\n    const messageRuntime = useMessageRuntime({\n        optional: true\n    });\n    const threadRuntime = useThreadRuntime(options);\n    return messageRuntime ? messageRuntime.composer : threadRuntime?.composer ?? null;\n}\n// src/hooks/useAppendMessage.tsx\n\nvar useAppendMessage = ()=>{\n    const threadRuntime = useThreadRuntime();\n    const append = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((message)=>{\n        threadRuntime.append(message);\n    }, [\n        threadRuntime\n    ]);\n    return append;\n};\n// src/hooks/useSwitchToNewThread.tsx\n\nvar useSwitchToNewThread = ()=>{\n    const assistantRuntime = useAssistantRuntime();\n    const switchToNewThread = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        assistantRuntime.switchToNewThread();\n    }, [\n        assistantRuntime\n    ]);\n    return switchToNewThread;\n};\n// src/model-config/useAssistantTool.tsx\n\nvar useAssistantTool = (tool)=>{\n    const assistantRuntime = useAssistantRuntime();\n    const toolUIsStore = useToolUIsStore();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const { toolName, render, ...rest } = tool;\n        const config = {\n            tools: {\n                [tool.toolName]: rest\n            }\n        };\n        const unsub1 = assistantRuntime.registerModelConfigProvider({\n            getModelConfig: ()=>config\n        });\n        const unsub2 = render ? toolUIsStore.getState().setToolUI(toolName, render) : void 0;\n        return ()=>{\n            unsub1();\n            unsub2?.();\n        };\n    }, [\n        assistantRuntime,\n        toolUIsStore,\n        tool\n    ]);\n};\n// src/model-config/makeAssistantTool.tsx\nvar makeAssistantTool = (tool)=>{\n    const Tool = ()=>{\n        useAssistantTool(tool);\n        return null;\n    };\n    Tool.unstable_tool = tool;\n    return Tool;\n};\n// src/model-config/useAssistantToolUI.tsx\n\nvar useAssistantToolUI = (tool)=>{\n    const toolUIsStore = useToolUIsStore();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!tool) return;\n        const { toolName, render } = tool;\n        return toolUIsStore.getState().setToolUI(toolName, render);\n    }, [\n        toolUIsStore,\n        tool\n    ]);\n};\n// src/model-config/makeAssistantToolUI.tsx\nvar makeAssistantToolUI = (tool)=>{\n    const ToolUI = ()=>{\n        useAssistantToolUI(tool);\n        return null;\n    };\n    ToolUI.unstable_tool = tool;\n    return ToolUI;\n};\n// src/model-config/useAssistantInstructions.tsx\n\nvar useAssistantInstructions = (instruction)=>{\n    const assistantRuntime = useAssistantRuntime();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const config = {\n            system: instruction\n        };\n        return assistantRuntime.registerModelConfigProvider({\n            getModelConfig: ()=>config\n        });\n    }, [\n        assistantRuntime,\n        instruction\n    ]);\n};\n// src/primitive-hooks/actionBar/useActionBarCopy.tsx\n\nvar useActionBarCopy = ({ copiedDuration = 3e3 } = {})=>{\n    const messageRuntime = useMessageRuntime();\n    const composerRuntime = useComposerRuntime();\n    const setIsCopied = useMessageUtils((s)=>s.setIsCopied);\n    const hasCopyableContent = useMessage((message)=>{\n        return (message.role !== \"assistant\" || message.status.type !== \"running\") && message.content.some((c)=>c.type === \"text\" && c.text.length > 0);\n    });\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const { isEditing, text: composerValue } = composerRuntime.getState();\n        const valueToCopy = isEditing ? composerValue : messageRuntime.unstable_getCopyText();\n        navigator.clipboard.writeText(valueToCopy).then(()=>{\n            setIsCopied(true);\n            setTimeout(()=>setIsCopied(false), copiedDuration);\n        });\n    }, [\n        messageRuntime,\n        setIsCopied,\n        composerRuntime,\n        copiedDuration\n    ]);\n    if (!hasCopyableContent) return null;\n    return callback;\n};\n// src/primitive-hooks/actionBar/useActionBarEdit.tsx\n\nvar useActionBarEdit = ()=>{\n    const messageRuntime = useMessageRuntime();\n    const disabled = useEditComposer((c)=>c.isEditing);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        messageRuntime.composer.beginEdit();\n    }, [\n        messageRuntime\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/actionBar/useActionBarReload.tsx\n\n// src/utils/combined/useCombinedStore.ts\n\n// src/utils/combined/createCombinedStore.ts\n\nvar createCombinedStore = (stores)=>{\n    const subscribe = (callback)=>{\n        const unsubscribes = stores.map((store)=>store.subscribe(callback));\n        return ()=>{\n            for (const unsub of unsubscribes){\n                unsub();\n            }\n        };\n    };\n    return (selector)=>{\n        const getSnapshot = ()=>selector(...stores.map((store)=>store.getState()));\n        return (0,react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(subscribe, getSnapshot, getSnapshot);\n    };\n};\n// src/utils/combined/useCombinedStore.ts\nvar useCombinedStore = (stores, selector)=>{\n    const useCombined = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>createCombinedStore(stores), stores);\n    return useCombined(selector);\n};\n// src/primitive-hooks/actionBar/useActionBarReload.tsx\nvar useActionBarReload = ()=>{\n    const messageRuntime = useMessageRuntime();\n    const threadRuntime = useThreadRuntime();\n    const disabled = useCombinedStore([\n        threadRuntime,\n        messageRuntime\n    ], (t, m)=>t.isRunning || t.isDisabled || m.role !== \"assistant\");\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        messageRuntime.reload();\n    }, [\n        messageRuntime\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/actionBar/useActionBarSpeak.tsx\n\nvar useActionBarSpeak = ()=>{\n    const messageRunime = useMessageRuntime();\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        messageRunime.speak();\n    }, [\n        messageRunime\n    ]);\n    const hasSpeakableContent = useMessage((m)=>{\n        return (m.role !== \"assistant\" || m.status.type !== \"running\") && m.content.some((c)=>c.type === \"text\" && c.text.length > 0);\n    });\n    if (!hasSpeakableContent) return null;\n    return callback;\n};\n// src/primitive-hooks/actionBar/useActionBarStopSpeaking.tsx\n\nvar useActionBarStopSpeaking = ()=>{\n    const messageRuntime = useMessageRuntime();\n    const isSpeaking = useMessage((u)=>u.speech != null);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        messageRuntime.stopSpeaking();\n    }, [\n        messageRuntime\n    ]);\n    if (!isSpeaking) return null;\n    return callback;\n};\n// src/primitive-hooks/actionBar/useActionBarFeedbackPositive.tsx\n\nvar useActionBarFeedbackPositive = ()=>{\n    const messageRuntime = useMessageRuntime();\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        messageRuntime.submitFeedback({\n            type: \"positive\"\n        });\n    }, [\n        messageRuntime\n    ]);\n    return callback;\n};\n// src/primitive-hooks/actionBar/useActionBarFeedbackNegative.tsx\n\nvar useActionBarFeedbackNegative = ()=>{\n    const messageRuntime = useMessageRuntime();\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        messageRuntime.submitFeedback({\n            type: \"negative\"\n        });\n    }, [\n        messageRuntime\n    ]);\n    return callback;\n};\n// src/primitive-hooks/branchPicker/useBranchPickerCount.tsx\nvar useBranchPickerCount = ()=>{\n    const branchCount = useMessage((s)=>s.branchCount);\n    return branchCount;\n};\n// src/primitive-hooks/branchPicker/useBranchPickerNext.tsx\n\nvar useBranchPickerNext = ()=>{\n    const messageRuntime = useMessageRuntime();\n    const disabled = useMessage((m)=>m.branchNumber >= m.branchCount);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        messageRuntime.switchToBranch({\n            position: \"next\"\n        });\n    }, [\n        messageRuntime\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/branchPicker/useBranchPickerNumber.tsx\nvar useBranchPickerNumber = ()=>{\n    const branchNumber = useMessage((s)=>s.branchNumber);\n    return branchNumber;\n};\n// src/primitive-hooks/branchPicker/useBranchPickerPrevious.tsx\n\nvar useBranchPickerPrevious = ()=>{\n    const messageRuntime = useMessageRuntime();\n    const disabled = useMessage((m)=>m.branchNumber <= 1);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        messageRuntime.switchToBranch({\n            position: \"previous\"\n        });\n    }, [\n        messageRuntime\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/composer/useComposerCancel.tsx\n\nvar useComposerCancel = ()=>{\n    const composerRuntime = useComposerRuntime();\n    const disabled = useComposer((c)=>!c.canCancel);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        composerRuntime.cancel();\n    }, [\n        composerRuntime\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/composer/useComposerIf.tsx\nvar useComposerIf = (props)=>{\n    return useComposer((composer)=>{\n        if (props.editing === true && !composer.isEditing) return false;\n        if (props.editing === false && composer.isEditing) return false;\n        return true;\n    });\n};\n// src/primitive-hooks/composer/useComposerSend.tsx\n\nvar useComposerSend = ()=>{\n    const composerRuntime = useComposerRuntime();\n    const threadRuntime = useThreadRuntime();\n    const disabled = useCombinedStore([\n        threadRuntime,\n        composerRuntime\n    ], (t, c)=>t.isRunning || !c.isEditing || c.isEmpty);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!composerRuntime.getState().isEditing) return;\n        composerRuntime.send();\n    }, [\n        threadRuntime\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/composer/useComposerAddAttachment.tsx\n\nvar useComposerAddAttachment = ()=>{\n    const disabled = useComposer((c)=>!c.isEditing);\n    const composerRuntime = useComposerRuntime();\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const input = document.createElement(\"input\");\n        input.type = \"file\";\n        const attachmentAccept = composerRuntime.getAttachmentAccept();\n        if (attachmentAccept !== \"*\") {\n            input.accept = attachmentAccept;\n        }\n        input.onchange = (e)=>{\n            const file = e.target.files?.[0];\n            if (!file) return;\n            composerRuntime.addAttachment(file);\n        };\n        input.click();\n    }, [\n        composerRuntime\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/contentPart/useContentPartDisplay.tsx\nvar useContentPartDisplay = ()=>{\n    const display = useContentPart((c)=>{\n        if (c.type !== \"ui\") throw new Error(\"This component can only be used inside ui content parts.\");\n        return c;\n    });\n    return display;\n};\n// src/primitive-hooks/contentPart/useContentPartImage.tsx\nvar useContentPartImage = ()=>{\n    const image = useContentPart((c)=>{\n        if (c.type !== \"image\") throw new Error(\"ContentPartImage can only be used inside image content parts.\");\n        return c;\n    });\n    return image;\n};\n// src/primitive-hooks/contentPart/useContentPartText.tsx\nvar useContentPartText = ()=>{\n    const text = useContentPart((c)=>{\n        if (c.type !== \"text\") throw new Error(\"ContentPartText can only be used inside text content parts.\");\n        return c;\n    });\n    return text;\n};\n// src/primitive-hooks/message/useMessageIf.tsx\nvar useMessageIf = (props)=>{\n    const messageRuntime = useMessageRuntime();\n    const messageUtilsStore = useMessageUtilsStore();\n    return useCombinedStore([\n        messageRuntime,\n        messageUtilsStore\n    ], ({ role, attachments, content, branchCount, isLast, speech, submittedFeedback }, { isCopied, isHovering })=>{\n        if (props.hasBranches === true && branchCount < 2) return false;\n        if (props.user && role !== \"user\") return false;\n        if (props.assistant && role !== \"assistant\") return false;\n        if (props.system && role !== \"system\") return false;\n        if (props.lastOrHover === true && !isHovering && !isLast) return false;\n        if (props.copied === true && !isCopied) return false;\n        if (props.copied === false && isCopied) return false;\n        if (props.speaking === true && speech == null) return false;\n        if (props.speaking === false && speech != null) return false;\n        if (props.hasAttachments === true && (role !== \"user\" || !attachments.length)) return false;\n        if (props.hasAttachments === false && role === \"user\" && !!attachments.length) return false;\n        if (props.hasContent === true && content.length === 0) return false;\n        if (props.hasContent === false && content.length > 0) return false;\n        if (props.submittedFeedback !== void 0 && (submittedFeedback?.type ?? null) !== props.submittedFeedback) return false;\n        return true;\n    });\n};\n// src/primitive-hooks/thread/useThreadIf.tsx\nvar useThreadIf = (props)=>{\n    return useThread((thread)=>{\n        if (props.empty === true && thread.messages.length !== 0) return false;\n        if (props.empty === false && thread.messages.length === 0) return false;\n        if (props.running === true && !thread.isRunning) return false;\n        if (props.running === false && thread.isRunning) return false;\n        if (props.disabled === true && thread.isDisabled) return false;\n        if (props.disabled === false && thread.isDisabled) return false;\n        return true;\n    });\n};\n// src/primitive-hooks/thread/useThreadEmpty.tsx\nvar useThreadEmpty = ()=>{\n    return useThreadIf({\n        empty: true\n    });\n};\n// src/primitive-hooks/thread/useThreadScrollToBottom.tsx\n\nvar useThreadScrollToBottom = ()=>{\n    const isAtBottom = useThreadViewport((s)=>s.isAtBottom);\n    const threadViewportStore = useThreadViewportStore();\n    const handleScrollToBottom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        threadViewportStore.getState().scrollToBottom();\n    }, [\n        threadViewportStore\n    ]);\n    if (isAtBottom) return null;\n    return handleScrollToBottom;\n};\n// src/primitive-hooks/thread/useThreadSuggestion.tsx\n\nvar useThreadSuggestion = ({ prompt, autoSend })=>{\n    const threadRuntime = useThreadRuntime();\n    const disabled = useThread((t)=>t.isDisabled);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (autoSend && !threadRuntime.getState().isRunning) {\n            threadRuntime.append(prompt);\n            threadRuntime.composer.setText(\"\");\n        } else {\n            threadRuntime.composer.setText(prompt);\n        }\n    }, [\n        threadRuntime,\n        autoSend,\n        prompt\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitives/actionBar/index.ts\nvar actionBar_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(actionBar_exports, {\n    Copy: ()=>ActionBarPrimitiveCopy,\n    Edit: ()=>ActionBarPrimitiveEdit,\n    FeedbackNegative: ()=>ActionBarPrimitiveFeedbackNegative,\n    FeedbackPositive: ()=>ActionBarPrimitiveFeedbackPositive,\n    Reload: ()=>ActionBarPrimitiveReload,\n    Root: ()=>ActionBarPrimitiveRoot,\n    Speak: ()=>ActionBarPrimitiveSpeak,\n    StopSpeaking: ()=>ActionBarPrimitiveStopSpeaking\n});\n// src/primitives/actionBar/ActionBarRoot.tsx\n\n\n// src/primitives/actionBar/useActionBarFloatStatus.tsx\nvar useActionBarFloatStatus = ({ hideWhenRunning, autohide, autohideFloat })=>{\n    const threadRuntime = useThreadRuntime();\n    const messageRuntime = useMessageRuntime();\n    const messageUtilsStore = useMessageUtilsStore();\n    return useCombinedStore([\n        threadRuntime,\n        messageRuntime,\n        messageUtilsStore\n    ], (t, m, mu)=>{\n        if (hideWhenRunning && t.isRunning) return \"hidden\" /* Hidden */ ;\n        const autohideEnabled = autohide === \"always\" || autohide === \"not-last\" && !m.isLast;\n        if (!autohideEnabled) return \"normal\" /* Normal */ ;\n        if (!mu.isHovering) return \"hidden\" /* Hidden */ ;\n        if (autohideFloat === \"always\" || autohideFloat === \"single-branch\" && m.branchCount <= 1) return \"floating\" /* Floating */ ;\n        return \"normal\" /* Normal */ ;\n    });\n};\n// src/primitives/actionBar/ActionBarRoot.tsx\n\nvar ActionBarPrimitiveRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ hideWhenRunning, autohide, autohideFloat, ...rest }, ref)=>{\n    const hideAndfloatStatus = useActionBarFloatStatus({\n        hideWhenRunning,\n        autohide,\n        autohideFloat\n    });\n    if (hideAndfloatStatus === \"hidden\" /* Hidden */ ) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.div, {\n        ...hideAndfloatStatus === \"floating\" /* Floating */  ? {\n            \"data-floating\": \"true\"\n        } : null,\n        ...rest,\n        ref\n    });\n});\nActionBarPrimitiveRoot.displayName = \"ActionBarPrimitive.Root\";\n// src/primitives/actionBar/ActionBarCopy.tsx\n\n\n\n\nvar ActionBarPrimitiveCopy = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ copiedDuration, onClick, disabled, ...props }, forwardedRef)=>{\n    const isCopied = useMessageUtils((u)=>u.isCopied);\n    const callback = useActionBarCopy({\n        copiedDuration\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.button, {\n        type: \"button\",\n        ...isCopied ? {\n            \"data-copied\": \"true\"\n        } : {},\n        ...props,\n        ref: forwardedRef,\n        disabled: disabled || !callback,\n        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_5__.composeEventHandlers)(onClick, ()=>{\n            callback?.();\n        })\n    });\n});\nActionBarPrimitiveCopy.displayName = \"ActionBarPrimitive.Copy\";\n// src/utils/createActionButton.tsx\n\n\n\n\nvar createActionButton = (displayName, useActionButton, forwardProps = [])=>{\n    const ActionButton = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{\n        const forwardedProps = {};\n        const primitiveProps = {};\n        Object.keys(props).forEach((key)=>{\n            if (forwardProps.includes(key)) {\n                forwardedProps[key] = props[key];\n            } else {\n                primitiveProps[key] = props[key];\n            }\n        });\n        const callback = useActionButton(forwardedProps);\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.button, {\n            type: \"button\",\n            ...primitiveProps,\n            ref: forwardedRef,\n            disabled: primitiveProps.disabled || !callback,\n            onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_5__.composeEventHandlers)(primitiveProps.onClick, ()=>{\n                callback?.();\n            })\n        });\n    });\n    ActionButton.displayName = displayName;\n    return ActionButton;\n};\n// src/primitives/actionBar/ActionBarReload.tsx\nvar ActionBarPrimitiveReload = createActionButton(\"ActionBarPrimitive.Reload\", useActionBarReload);\n// src/primitives/actionBar/ActionBarEdit.tsx\nvar ActionBarPrimitiveEdit = createActionButton(\"ActionBarPrimitive.Edit\", useActionBarEdit);\n// src/primitives/actionBar/ActionBarSpeak.tsx\nvar ActionBarPrimitiveSpeak = createActionButton(\"ActionBarPrimitive.Speak\", useActionBarSpeak);\n// src/primitives/actionBar/ActionBarStopSpeaking.tsx\n\n\n\n\n\nvar ActionBarPrimitiveStopSpeaking = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const callback = useActionBarStopSpeaking();\n    (0,_radix_ui_react_use_escape_keydown__WEBPACK_IMPORTED_MODULE_6__.useEscapeKeydown)((e)=>{\n        if (callback) {\n            e.preventDefault();\n            callback();\n        }\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.button, {\n        type: \"button\",\n        disabled: !callback,\n        ...props,\n        ref,\n        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_5__.composeEventHandlers)(props.onClick, ()=>{\n            callback?.();\n        })\n    });\n});\nActionBarPrimitiveStopSpeaking.displayName = \"ActionBarPrimitive.StopSpeaking\";\n// src/primitives/actionBar/ActionBarFeedbackPositive.tsx\n\n\n\n\nvar ActionBarPrimitiveFeedbackPositive = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ onClick, disabled, ...props }, forwardedRef)=>{\n    const isSubmitted = useMessage((u)=>u.submittedFeedback?.type === \"positive\");\n    const callback = useActionBarFeedbackPositive();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.button, {\n        type: \"button\",\n        ...isSubmitted ? {\n            \"data-submitted\": \"true\"\n        } : {},\n        ...props,\n        ref: forwardedRef,\n        disabled: disabled || !callback,\n        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_5__.composeEventHandlers)(onClick, ()=>{\n            callback?.();\n        })\n    });\n});\nActionBarPrimitiveFeedbackPositive.displayName = \"ActionBarPrimitive.FeedbackPositive\";\n// src/primitives/actionBar/ActionBarFeedbackNegative.tsx\n\n\n\n\nvar ActionBarPrimitiveFeedbackNegative = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ onClick, disabled, ...props }, forwardedRef)=>{\n    const isSubmitted = useMessage((u)=>u.submittedFeedback?.type === \"negative\");\n    const callback = useActionBarFeedbackNegative();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.button, {\n        type: \"button\",\n        ...isSubmitted ? {\n            \"data-submitted\": \"true\"\n        } : {},\n        ...props,\n        ref: forwardedRef,\n        disabled: disabled || !callback,\n        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_5__.composeEventHandlers)(onClick, ()=>{\n            callback?.();\n        })\n    });\n});\nActionBarPrimitiveFeedbackNegative.displayName = \"ActionBarPrimitive.FeedbackNegative\";\n// src/primitives/assistantModal/index.ts\nvar assistantModal_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(assistantModal_exports, {\n    Anchor: ()=>AssistantModalPrimitiveAnchor,\n    Content: ()=>AssistantModalPrimitiveContent,\n    Root: ()=>AssistantModalPrimitiveRoot,\n    Trigger: ()=>AssistantModalPrimitiveTrigger\n});\n// src/primitives/assistantModal/AssistantModalRoot.tsx\n\n\n\n// src/primitives/assistantModal/scope.tsx\n\nvar usePopoverScope = _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_7__.createPopoverScope();\n// src/primitives/assistantModal/AssistantModalRoot.tsx\n\nvar useAssistantModalOpenState = ({ defaultOpen = false, unstable_openOnRunStart = true })=>{\n    const state = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultOpen);\n    const [, setOpen] = state;\n    const threadRuntime = useThreadRuntime();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!unstable_openOnRunStart) return void 0;\n        return threadRuntime.unstable_on(\"run-start\", ()=>{\n            setOpen(true);\n        });\n    }, [\n        unstable_openOnRunStart\n    ]);\n    return state;\n};\nvar AssistantModalPrimitiveRoot = ({ __scopeAssistantModal, defaultOpen, unstable_openOnRunStart, open, onOpenChange, ...rest })=>{\n    const scope = usePopoverScope(__scopeAssistantModal);\n    const [modalOpen, setOpen] = useAssistantModalOpenState({\n        defaultOpen,\n        unstable_openOnRunStart\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_7__.Root, {\n        ...scope,\n        open: open === void 0 ? modalOpen : open,\n        onOpenChange: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_5__.composeEventHandlers)(onOpenChange, setOpen),\n        ...rest\n    });\n};\nAssistantModalPrimitiveRoot.displayName = \"AssistantModalPrimitive.Root\";\n// src/primitives/assistantModal/AssistantModalTrigger.tsx\n\n\n\nvar AssistantModalPrimitiveTrigger = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ __scopeAssistantModal, ...rest }, ref)=>{\n    const scope = usePopoverScope(__scopeAssistantModal);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_7__.Trigger, {\n        ...scope,\n        ...rest,\n        ref\n    });\n});\nAssistantModalPrimitiveTrigger.displayName = \"AssistantModalPrimitive.Trigger\";\n// src/primitives/assistantModal/AssistantModalContent.tsx\n\n\n\n\nvar AssistantModalPrimitiveContent = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ __scopeAssistantModal, side, align, onInteractOutside, dissmissOnInteractOutside = false, ...props }, forwardedRef)=>{\n    const scope = usePopoverScope(__scopeAssistantModal);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_7__.Portal, {\n        ...scope,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_7__.Content, {\n            ...scope,\n            ...props,\n            ref: forwardedRef,\n            side: side ?? \"top\",\n            align: align ?? \"end\",\n            onInteractOutside: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_5__.composeEventHandlers)(onInteractOutside, dissmissOnInteractOutside ? void 0 : (e)=>e.preventDefault())\n        })\n    });\n});\nAssistantModalPrimitiveContent.displayName = \"AssistantModalPrimitive.Content\";\n// src/primitives/assistantModal/AssistantModalAnchor.tsx\n\n\n\nvar AssistantModalPrimitiveAnchor = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ __scopeAssistantModal, ...rest }, ref)=>{\n    const scope = usePopoverScope(__scopeAssistantModal);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_7__.Anchor, {\n        ...scope,\n        ...rest,\n        ref\n    });\n});\nAssistantModalPrimitiveAnchor.displayName = \"AssistantModalPrimitive.Anchor\";\n// src/primitives/attachment/index.ts\nvar attachment_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(attachment_exports, {\n    Name: ()=>AttachmentPrimitiveName,\n    Remove: ()=>AttachmentPrimitiveRemove,\n    Root: ()=>AttachmentPrimitiveRoot,\n    unstable_Thumb: ()=>AttachmentPrimitiveThumb\n});\n// src/primitives/attachment/AttachmentRoot.tsx\n\n\n\nvar AttachmentPrimitiveRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.div, {\n        ...props,\n        ref\n    });\n});\nAttachmentPrimitiveRoot.displayName = \"AttachmentPrimitive.Root\";\n// src/primitives/attachment/AttachmentThumb.tsx\n\n// src/context/react/AttachmentContext.ts\n\nvar AttachmentContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction useAttachmentContext(options) {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(AttachmentContext);\n    if (!options?.optional && !context) throw new Error(\"This component must be used within a ComposerPrimitive.Attachments or MessagePrimitive.Attachments component.\");\n    return context;\n}\nfunction useThreadComposerAttachmentContext(options) {\n    const context = useAttachmentContext(options);\n    if (!context) return null;\n    if (context.source !== \"thread-composer\") throw new Error(\"This component must be used within a thread's ComposerPrimitive.Attachments component.\");\n    return context;\n}\nfunction useEditComposerAttachmentContext(options) {\n    const context = useAttachmentContext(options);\n    if (!context) return null;\n    if (context.source !== \"edit-composer\") throw new Error(\"This component must be used within a messages's ComposerPrimitive.Attachments component.\");\n    return context;\n}\nfunction useMessageAttachmentContext(options) {\n    const context = useAttachmentContext(options);\n    if (!context) return null;\n    if (context.source !== \"message\") throw new Error(\"This component must be used within a MessagePrimitive.Attachments component.\");\n    return context;\n}\nfunction useAttachmentRuntime(options) {\n    const attachmentRuntime = useAttachmentContext(options);\n    if (!attachmentRuntime) return null;\n    return attachmentRuntime.useAttachmentRuntime();\n}\nvar { useAttachment } = createContextStoreHook(useAttachmentContext, \"useAttachment\");\nvar { useAttachment: useThreadComposerAttachment } = createContextStoreHook(useThreadComposerAttachmentContext, \"useAttachment\");\nvar { useAttachment: useEditComposerAttachment } = createContextStoreHook(useEditComposerAttachmentContext, \"useAttachment\");\nvar { useAttachment: useMessageAttachment } = createContextStoreHook(useMessageAttachmentContext, \"useAttachment\");\n// src/primitives/attachment/AttachmentThumb.tsx\n\n\nvar AttachmentPrimitiveThumb = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const ext = useAttachment((a)=>a.name.split(\".\").pop());\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.div, {\n        ...props,\n        ref,\n        children: [\n            \".\",\n            ext\n        ]\n    });\n});\nAttachmentPrimitiveThumb.displayName = \"AttachmentPrimitive.Thumb\";\n// src/primitives/attachment/AttachmentName.tsx\n\nvar AttachmentPrimitiveName = ()=>{\n    const name = useAttachment((a)=>a.name);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n        children: name\n    });\n};\nAttachmentPrimitiveName.displayName = \"AttachmentPrimitive.Name\";\n// src/primitive-hooks/attachment/useAttachmentRemove.ts\n\nvar useAttachmentRemove = ()=>{\n    const attachmentRuntime = useAttachmentRuntime();\n    const handleRemoveAttachment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        attachmentRuntime.remove();\n    }, [\n        attachmentRuntime\n    ]);\n    return handleRemoveAttachment;\n};\n// src/primitives/attachment/AttachmentRemove.tsx\nvar AttachmentPrimitiveRemove = createActionButton(\"AttachmentPrimitive.Remove\", useAttachmentRemove);\n// src/primitives/branchPicker/index.ts\nvar branchPicker_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(branchPicker_exports, {\n    Count: ()=>BranchPickerPrimitiveCount,\n    Next: ()=>BranchPickerPrimitiveNext,\n    Number: ()=>BranchPickerPrimitiveNumber,\n    Previous: ()=>BranchPickerPrimitivePrevious,\n    Root: ()=>BranchPickerPrimitiveRoot\n});\n// src/primitives/branchPicker/BranchPickerNext.tsx\nvar BranchPickerPrimitiveNext = createActionButton(\"BranchPickerPrimitive.Next\", useBranchPickerNext);\n// src/primitives/branchPicker/BranchPickerPrevious.tsx\nvar BranchPickerPrimitivePrevious = createActionButton(\"BranchPickerPrimitive.Previous\", useBranchPickerPrevious);\n// src/primitives/branchPicker/BranchPickerCount.tsx\n\nvar BranchPickerPrimitiveCount = ()=>{\n    const branchCount = useBranchPickerCount();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n        children: branchCount\n    });\n};\nBranchPickerPrimitiveCount.displayName = \"BranchPickerPrimitive.Count\";\n// src/primitives/branchPicker/BranchPickerNumber.tsx\n\nvar BranchPickerPrimitiveNumber = ()=>{\n    const branchNumber = useBranchPickerNumber();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n        children: branchNumber\n    });\n};\nBranchPickerPrimitiveNumber.displayName = \"BranchPickerPrimitive.Number\";\n// src/primitives/branchPicker/BranchPickerRoot.tsx\n\n\n// src/primitives/message/index.ts\nvar message_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(message_exports, {\n    Attachments: ()=>MessagePrimitiveAttachments,\n    Content: ()=>MessagePrimitiveContent,\n    If: ()=>MessagePrimitiveIf,\n    InProgress: ()=>MessagePrimitiveInProgress,\n    Root: ()=>MessagePrimitiveRoot\n});\n// src/primitives/message/MessageRoot.tsx\n\n\n// src/utils/hooks/useManagedRef.ts\n\nvar useManagedRef = (callback)=>{\n    const cleanupRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((el)=>{\n        if (cleanupRef.current) {\n            cleanupRef.current();\n        }\n        if (el) {\n            cleanupRef.current = callback(el);\n        }\n    }, [\n        callback\n    ]);\n    return ref;\n};\n// src/primitives/message/MessageRoot.tsx\n\n\nvar useIsHoveringRef = ()=>{\n    const messageUtilsStore = useMessageUtilsStore();\n    const callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((el)=>{\n        const setIsHovering = messageUtilsStore.getState().setIsHovering;\n        const handleMouseEnter = ()=>{\n            setIsHovering(true);\n        };\n        const handleMouseLeave = ()=>{\n            setIsHovering(false);\n        };\n        el.addEventListener(\"mouseenter\", handleMouseEnter);\n        el.addEventListener(\"mouseleave\", handleMouseLeave);\n        return ()=>{\n            el.removeEventListener(\"mouseenter\", handleMouseEnter);\n            el.removeEventListener(\"mouseleave\", handleMouseLeave);\n            setIsHovering(false);\n        };\n    }, [\n        messageUtilsStore\n    ]);\n    return useManagedRef(callbackRef);\n};\nvar MessagePrimitiveRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardRef36)=>{\n    const isHoveringRef = useIsHoveringRef();\n    const ref = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_8__.useComposedRefs)(forwardRef36, isHoveringRef);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.div, {\n        ...props,\n        ref\n    });\n});\nMessagePrimitiveRoot.displayName = \"MessagePrimitive.Root\";\n// src/primitives/message/MessageIf.tsx\nvar MessagePrimitiveIf = ({ children, ...query })=>{\n    const result = useMessageIf(query);\n    return result ? children : null;\n};\nMessagePrimitiveIf.displayName = \"MessagePrimitive.If\";\n// src/primitives/message/MessageContent.tsx\n\n// src/context/providers/ContentPartRuntimeProvider.tsx\n\n\n\nvar useContentPartRuntimeStore = (runtime)=>{\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>runtime));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        writableStore(store).setState(runtime, true);\n    }, [\n        runtime,\n        store\n    ]);\n    return store;\n};\nvar useContentPartStore2 = (runtime)=>{\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>runtime.getState()));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const updateState = ()=>writableStore(store).setState(runtime.getState(), true);\n        updateState();\n        return runtime.subscribe(updateState);\n    }, [\n        runtime,\n        store\n    ]);\n    return store;\n};\nvar ContentPartRuntimeProvider = ({ runtime, children })=>{\n    const useContentPartRuntime2 = useContentPartRuntimeStore(runtime);\n    const useContentPart2 = useContentPartStore2(runtime);\n    const [context] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        return {\n            useContentPartRuntime: useContentPartRuntime2,\n            useContentPart: useContentPart2\n        };\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ContentPartContext.Provider, {\n        value: context,\n        children\n    });\n};\n// src/primitives/contentPart/ContentPartText.tsx\n\n// src/utils/smooth/useSmooth.tsx\n\n\n// src/utils/smooth/SmoothContext.tsx\n\n\n\nvar SmoothContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar makeSmoothContext = (initialState)=>{\n    const useSmoothStatus2 = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>initialState);\n    return {\n        useSmoothStatus: useSmoothStatus2\n    };\n};\nvar SmoothContextProvider = ({ children })=>{\n    const outer = useSmoothContext({\n        optional: true\n    });\n    const contentPartStore = useContentPartStore();\n    const [context] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>makeSmoothContext(contentPartStore.getState().status));\n    if (outer) return children;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SmoothContext.Provider, {\n        value: context,\n        children\n    });\n};\nvar withSmoothContextProvider = (Component)=>{\n    const Wrapped = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SmoothContextProvider, {\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, {\n                ...props,\n                ref\n            })\n        });\n    });\n    Wrapped.displayName = Component.displayName;\n    return Wrapped;\n};\nfunction useSmoothContext(options) {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SmoothContext);\n    if (!options?.optional && !context) throw new Error(\"This component must be used within a SmoothContextProvider.\");\n    return context;\n}\nvar { useSmoothStatus, useSmoothStatusStore } = createContextStoreHook(useSmoothContext, \"useSmoothStatus\");\n// src/utils/smooth/useSmooth.tsx\nvar TextStreamAnimator = class {\n    constructor(currentText, setText){\n        this.animationFrameId = null;\n        this.lastUpdateTime = Date.now();\n        this.targetText = \"\";\n        this.animate = ()=>{\n            const currentTime = Date.now();\n            const deltaTime = currentTime - this.lastUpdateTime;\n            let timeToConsume = deltaTime;\n            const remainingChars = this.targetText.length - this.currentText.length;\n            const baseTimePerChar = Math.min(5, 250 / remainingChars);\n            let charsToAdd = 0;\n            while(timeToConsume >= baseTimePerChar && charsToAdd < remainingChars){\n                charsToAdd++;\n                timeToConsume -= baseTimePerChar;\n            }\n            if (charsToAdd !== remainingChars) {\n                this.animationFrameId = requestAnimationFrame(this.animate);\n            } else {\n                this.animationFrameId = null;\n            }\n            if (charsToAdd === 0) return;\n            this.currentText = this.targetText.slice(0, this.currentText.length + charsToAdd);\n            this.lastUpdateTime = currentTime - timeToConsume;\n            this.setText(this.currentText);\n        };\n        this.currentText = currentText;\n        this.setText = setText;\n    }\n    start() {\n        if (this.animationFrameId !== null) return;\n        this.lastUpdateTime = Date.now();\n        this.animate();\n    }\n    stop() {\n        if (this.animationFrameId !== null) {\n            cancelAnimationFrame(this.animationFrameId);\n            this.animationFrameId = null;\n        }\n    }\n};\nvar SMOOTH_STATUS = Object.freeze({\n    type: \"running\"\n});\nvar useSmooth = (state, smooth = false)=>{\n    const { text } = state;\n    const id = useMessage({\n        optional: true,\n        selector: (m)=>m.id\n    });\n    const idRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(id);\n    const [displayedText, setDisplayedText] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(text);\n    const smoothStatusStore = useSmoothStatusStore({\n        optional: true\n    });\n    const setText = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_9__.useCallbackRef)((text2)=>{\n        setDisplayedText(text2);\n        if (smoothStatusStore) {\n            writableStore(smoothStatusStore).setState(text2 !== state.text ? SMOOTH_STATUS : state.status);\n        }\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (smoothStatusStore) {\n            writableStore(smoothStatusStore).setState(text !== state.text ? SMOOTH_STATUS : state.status);\n        }\n    }, [\n        smoothStatusStore,\n        text,\n        displayedText,\n        state.status,\n        state.text\n    ]);\n    const [animatorRef] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(new TextStreamAnimator(text, setText));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!smooth) {\n            animatorRef.stop();\n            return;\n        }\n        if (idRef.current !== id || !text.startsWith(animatorRef.targetText)) {\n            idRef.current = id;\n            setText(text);\n            animatorRef.currentText = text;\n            animatorRef.targetText = text;\n            animatorRef.stop();\n            return;\n        }\n        animatorRef.targetText = text;\n        animatorRef.start();\n    }, [\n        setText,\n        animatorRef,\n        id,\n        smooth,\n        text\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            animatorRef.stop();\n        };\n    }, [\n        animatorRef\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>smooth ? {\n            type: \"text\",\n            text: displayedText,\n            part: {\n                type: \"text\",\n                text: displayedText\n            },\n            status: text === displayedText ? state.status : SMOOTH_STATUS\n        } : state, [\n        smooth,\n        displayedText,\n        state,\n        text\n    ]);\n};\n// src/primitives/contentPart/ContentPartText.tsx\n\nvar ContentPartPrimitiveText = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ smooth = true, component: Component = \"span\", ...rest }, forwardedRef)=>{\n    const { text, status } = useSmooth(useContentPartText(), smooth);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, {\n        \"data-status\": status.type,\n        ...rest,\n        ref: forwardedRef,\n        children: text\n    });\n});\nContentPartPrimitiveText.displayName = \"ContentPartPrimitive.Text\";\n// src/primitives/contentPart/ContentPartImage.tsx\n\n\n\nvar ContentPartPrimitiveImage = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{\n    const { image } = useContentPartImage();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.img, {\n        src: image,\n        ...props,\n        ref: forwardedRef\n    });\n});\nContentPartPrimitiveImage.displayName = \"ContentPartPrimitive.Image\";\n// src/primitives/contentPart/ContentPartDisplay.tsx\nvar ContentPartPrimitiveDisplay = ()=>{\n    const { display } = useContentPartDisplay();\n    return display ?? null;\n};\nContentPartPrimitiveDisplay.displayName = \"ContentPartPrimitive.Display\";\n// src/primitives/contentPart/ContentPartInProgress.tsx\nvar ContentPartPrimitiveInProgress = ({ children })=>{\n    const isInProgress = useContentPart((c)=>c.status.type === \"running\");\n    return isInProgress ? children : null;\n};\nContentPartPrimitiveInProgress.displayName = \"ContentPartPrimitive.InProgress\";\n// src/utils/getThreadMessageText.tsx\nvar getThreadMessageText = (message)=>{\n    const textParts = message.content.filter((part)=>part.type === \"text\");\n    return textParts.map((part)=>part.text).join(\"\\n\\n\");\n};\n// src/api/AttachmentRuntime.ts\nvar AttachmentRuntimeImpl = class {\n    constructor(_core){\n        this._core = _core;\n    }\n    get path() {\n        return this._core.path;\n    }\n    getState() {\n        return this._core.getState();\n    }\n    subscribe(callback) {\n        return this._core.subscribe(callback);\n    }\n};\nvar ComposerAttachmentRuntime = class extends AttachmentRuntimeImpl {\n    constructor(core, _composerApi){\n        super(core);\n        this._composerApi = _composerApi;\n    }\n    remove() {\n        const core = this._composerApi.getState();\n        if (!core) throw new Error(\"Composer is not available\");\n        return core.removeAttachment(this.getState().id);\n    }\n};\nvar ThreadComposerAttachmentRuntimeImpl = class extends ComposerAttachmentRuntime {\n    get source() {\n        return \"thread-composer\";\n    }\n};\nvar EditComposerAttachmentRuntimeImpl = class extends ComposerAttachmentRuntime {\n    get source() {\n        return \"edit-composer\";\n    }\n};\nvar MessageAttachmentRuntimeImpl = class extends AttachmentRuntimeImpl {\n    get source() {\n        return \"message\";\n    }\n    constructor(core){\n        super(core);\n    }\n    remove() {\n        throw new Error(\"Message attachments cannot be removed\");\n    }\n};\n// src/api/subscribable/BaseSubject.ts\nvar BaseSubject = class {\n    get isConnected() {\n        return !!this._connection;\n    }\n    notifySubscribers() {\n        for (const callback of this._subscriptions)callback();\n    }\n    _updateConnection() {\n        if (this._subscriptions.size > 0) {\n            if (this._connection) return;\n            this._connection = this._connect();\n        } else {\n            this._connection?.();\n            this._connection = void 0;\n        }\n    }\n    subscribe(callback) {\n        this._subscriptions.add(callback);\n        this._updateConnection();\n        return ()=>{\n            this._subscriptions.delete(callback);\n            this._updateConnection();\n        };\n    }\n    constructor(){\n        this._subscriptions = /* @__PURE__ */ new Set();\n    }\n};\n// src/api/subscribable/SKIP_UPDATE.ts\nvar SKIP_UPDATE = Symbol(\"skip-update\");\n// src/api/subscribable/LazyMemoizeSubject.ts\nvar LazyMemoizeSubject = class extends BaseSubject {\n    constructor(binding){\n        super();\n        this._previousStateDirty = true;\n        this.getState = ()=>{\n            if (!this.isConnected || this._previousStateDirty) {\n                const newState = this.binding.getState();\n                if (newState !== SKIP_UPDATE) {\n                    this._previousState = newState;\n                }\n                this._previousStateDirty = false;\n            }\n            if (this._previousState === void 0) throw new Error(\"Entry not available in the store\");\n            return this._previousState;\n        };\n        this.binding = binding;\n    }\n    get path() {\n        return this.binding.path;\n    }\n    _connect() {\n        const callback = ()=>{\n            this._previousStateDirty = true;\n            this.notifySubscribers();\n        };\n        return this.binding.subscribe(callback);\n    }\n};\n// src/api/subscribable/shallowEqual.ts\nfunction shallowEqual(objA, objB) {\n    if (objA === void 0 && objB === void 0) return true;\n    if (objA === void 0) return false;\n    if (objB === void 0) return false;\n    for (const key of Object.keys(objA)){\n        const valueA = objA[key];\n        const valueB = objB[key];\n        if (!Object.is(valueA, valueB)) return false;\n    }\n    return true;\n}\n// src/api/subscribable/ShallowMemoizeSubject.ts\nvar ShallowMemoizeSubject = class extends BaseSubject {\n    constructor(binding){\n        super();\n        this.getState = ()=>{\n            if (!this.isConnected) this._syncState();\n            return this._previousState;\n        };\n        this.binding = binding;\n        const state = binding.getState();\n        if (state === SKIP_UPDATE) throw new Error(\"Entry not available in the store\");\n        this._previousState = state;\n    }\n    get path() {\n        return this.binding.path;\n    }\n    _syncState() {\n        const state = this.binding.getState();\n        if (state === SKIP_UPDATE) return false;\n        if (shallowEqual(state, this._previousState)) return false;\n        this._previousState = state;\n        return true;\n    }\n    _connect() {\n        const callback = ()=>{\n            if (this._syncState()) {\n                this.notifySubscribers();\n            }\n        };\n        return this.binding.subscribe(callback);\n    }\n};\n// src/api/ComposerRuntime.ts\nvar METHOD_NOT_SUPPORTED = ()=>{\n    throw new Error(\"Composer is not available\");\n};\nvar EMPTY_ARRAY = Object.freeze([]);\nvar getThreadComposerState = (runtime)=>{\n    return Object.freeze({\n        type: \"thread\",\n        isEditing: runtime?.isEditing ?? false,\n        canCancel: runtime?.canCancel ?? false,\n        isEmpty: runtime?.isEmpty ?? true,\n        text: runtime?.text ?? \"\",\n        attachments: runtime?.attachments ?? EMPTY_ARRAY,\n        value: runtime?.text ?? \"\",\n        setValue: runtime?.setText.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n        setText: runtime?.setText.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n        // edit: beginEdit,\n        send: runtime?.send.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n        cancel: runtime?.cancel.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n        reset: runtime?.reset.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n        addAttachment: runtime?.addAttachment.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n        removeAttachment: runtime?.removeAttachment.bind(runtime) ?? METHOD_NOT_SUPPORTED\n    });\n};\nvar getEditComposerState = (runtime, beginEdit)=>{\n    return Object.freeze({\n        type: \"edit\",\n        isEditing: runtime?.isEditing ?? false,\n        canCancel: runtime?.canCancel ?? false,\n        isEmpty: runtime?.isEmpty ?? true,\n        text: runtime?.text ?? \"\",\n        attachments: runtime?.attachments ?? EMPTY_ARRAY,\n        value: runtime?.text ?? \"\",\n        setValue: runtime?.setText.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n        setText: runtime?.setText.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n        edit: beginEdit,\n        send: runtime?.send.bind(runtime) ?? METHOD_NOT_SUPPORTED,\n        cancel: runtime?.cancel.bind(runtime) ?? METHOD_NOT_SUPPORTED\n    });\n};\nvar ComposerRuntimeImpl = class {\n    constructor(_core){\n        this._core = _core;\n    }\n    get path() {\n        return this._core.path;\n    }\n    /**\n   * @deprecated Use `getState().isEditing` instead. This will be removed in 0.6.0.\n   */ get isEditing() {\n        return this.getState().isEditing;\n    }\n    /**\n   * @deprecated Use `getState().isEmpty` instead. This will be removed in 0.6.0.\n   */ get isEmpty() {\n        return this.getState().isEmpty;\n    }\n    /**\n   * @deprecated Use `getState().canCancel` instead. This will be removed in 0.6.0.\n   */ get canCancel() {\n        return this.getState().canCancel;\n    }\n    /**\n   * @deprecated Use `getState().text` instead. This will be removed in 0.6.0.\n   */ get text() {\n        return this.getState().text;\n    }\n    /**\n   * @deprecated Use `getState().attachments` instead. This will be removed in 0.6.0.\n   */ get attachments() {\n        return this.getState().attachments;\n    }\n    /**\n   * @deprecated Use `getState().text` instead. This will be removed in 0.6.0.\n   */ get value() {\n        return this.text;\n    }\n    setText(text) {\n        const core = this._core.getState();\n        if (!core) throw new Error(\"Composer is not available\");\n        core.setText(text);\n    }\n    setValue(text) {\n        this.setText(text);\n    }\n    addAttachment(file) {\n        const core = this._core.getState();\n        if (!core) throw new Error(\"Composer is not available\");\n        return core.addAttachment(file);\n    }\n    /**\n   * @deprecated Use `getAttachmentById(id).removeAttachment()` instead. This will be removed in 0.6.0.\n   */ removeAttachment(attachmentId) {\n        const core = this._core.getState();\n        if (!core) throw new Error(\"Composer is not available\");\n        return core.removeAttachment(attachmentId);\n    }\n    /**\n   * @deprecated This method will be removed in 0.6.0. Submit feedback if you need this functionality.\n   */ reset() {\n        const core = this._core.getState();\n        if (!core) throw new Error(\"Composer is not available\");\n        core.reset();\n    }\n    send() {\n        const core = this._core.getState();\n        if (!core) throw new Error(\"Composer is not available\");\n        core.send();\n    }\n    cancel() {\n        const core = this._core.getState();\n        if (!core) throw new Error(\"Composer is not available\");\n        core.cancel();\n    }\n    subscribe(callback) {\n        return this._core.subscribe(callback);\n    }\n    getAttachmentAccept() {\n        const core = this._core.getState();\n        if (!core) throw new Error(\"Composer is not available\");\n        return core.getAttachmentAccept();\n    }\n};\nvar ThreadComposerRuntimeImpl = class extends ComposerRuntimeImpl {\n    get path() {\n        return this._core.path;\n    }\n    get type() {\n        return \"thread\";\n    }\n    constructor(core){\n        const stateBinding = new LazyMemoizeSubject({\n            path: core.path,\n            getState: ()=>getThreadComposerState(core.getState()),\n            subscribe: (callback)=>core.subscribe(callback)\n        });\n        super({\n            path: core.path,\n            getState: ()=>core.getState(),\n            subscribe: (callback)=>stateBinding.subscribe(callback)\n        });\n        this._getState = stateBinding.getState.bind(stateBinding);\n    }\n    get attachments() {\n        return this.getState()?.attachments ?? EMPTY_ARRAY;\n    }\n    getState() {\n        return this._getState();\n    }\n    getAttachmentByIndex(idx) {\n        return new ThreadComposerAttachmentRuntimeImpl(new ShallowMemoizeSubject({\n            path: {\n                ...this.path,\n                attachmentSource: \"thread-composer\",\n                attachmentSelector: {\n                    type: \"index\",\n                    index: idx\n                },\n                ref: this.path.ref + `${this.path.ref}.attachments[${idx}]`\n            },\n            getState: ()=>{\n                const attachments = this.getState().attachments;\n                const attachment = attachments[idx];\n                if (!attachment) return SKIP_UPDATE;\n                return {\n                    ...attachment,\n                    attachment,\n                    source: \"thread-composer\"\n                };\n            },\n            subscribe: (callback)=>this._core.subscribe(callback)\n        }), this._core);\n    }\n};\nvar EditComposerRuntimeImpl = class extends ComposerRuntimeImpl {\n    constructor(core, _beginEdit){\n        const stateBinding = new LazyMemoizeSubject({\n            path: core.path,\n            getState: ()=>getEditComposerState(core.getState(), this._beginEdit),\n            subscribe: (callback)=>core.subscribe(callback)\n        });\n        super({\n            path: core.path,\n            getState: ()=>core.getState(),\n            subscribe: (callback)=>stateBinding.subscribe(callback)\n        });\n        this._beginEdit = _beginEdit;\n        this._getState = stateBinding.getState.bind(stateBinding);\n    }\n    get path() {\n        return this._core.path;\n    }\n    get type() {\n        return \"edit\";\n    }\n    getState() {\n        return this._getState();\n    }\n    beginEdit() {\n        this._beginEdit();\n    }\n    /**\n   * @deprecated Use `beginEdit()` instead. This will be removed in 0.6.0.\n   */ edit() {\n        this.beginEdit();\n    }\n    getAttachmentByIndex(idx) {\n        return new EditComposerAttachmentRuntimeImpl(new ShallowMemoizeSubject({\n            path: {\n                ...this.path,\n                attachmentSource: \"edit-composer\",\n                attachmentSelector: {\n                    type: \"index\",\n                    index: idx\n                },\n                ref: this.path.ref + `${this.path.ref}.attachments[${idx}]`\n            },\n            getState: ()=>{\n                const attachments = this.getState().attachments;\n                const attachment = attachments[idx];\n                if (!attachment) return SKIP_UPDATE;\n                return {\n                    ...attachment,\n                    attachment,\n                    source: \"edit-composer\"\n                };\n            },\n            subscribe: (callback)=>this._core.subscribe(callback)\n        }), this._core);\n    }\n};\n// src/api/subscribable/NestedSubscriptionSubject.ts\nvar NestedSubscriptionSubject = class extends BaseSubject {\n    constructor(binding){\n        super();\n        this.binding = binding;\n    }\n    get path() {\n        return this.binding.path;\n    }\n    getState() {\n        return this.binding.getState();\n    }\n    outerSubscribe(callback) {\n        return this.binding.subscribe(callback);\n    }\n    _connect() {\n        const callback = ()=>{\n            this.notifySubscribers();\n        };\n        let lastState = this.binding.getState();\n        let innerUnsubscribe = lastState?.subscribe(callback);\n        const onRuntimeUpdate = ()=>{\n            const newState = this.binding.getState();\n            if (newState === lastState) return;\n            lastState = newState;\n            innerUnsubscribe?.();\n            innerUnsubscribe = this.binding.getState()?.subscribe(callback);\n            callback();\n        };\n        const outerUnsubscribe = this.outerSubscribe(onRuntimeUpdate);\n        return ()=>{\n            outerUnsubscribe?.();\n            innerUnsubscribe?.();\n        };\n    }\n};\n// src/api/MessageRuntime.ts\nvar COMPLETE_STATUS2 = {\n    type: \"complete\"\n};\nvar toContentPartStatus = (message, partIndex, part)=>{\n    if (message.role !== \"assistant\") return COMPLETE_STATUS2;\n    const isLastPart = partIndex === Math.max(0, message.content.length - 1);\n    if (part.type !== \"tool-call\") {\n        if (\"reason\" in message.status && message.status.reason === \"tool-calls\" && isLastPart) throw new Error(\"Encountered unexpected requires-action status. This is likely an internal bug in assistant-ui.\");\n        return isLastPart ? message.status : COMPLETE_STATUS2;\n    }\n    if (!!part.result) {\n        return COMPLETE_STATUS2;\n    }\n    return message.status;\n};\nvar EMPTY_CONTENT = Object.freeze({\n    type: \"text\",\n    text: \"\"\n});\nvar getContentPartState = (message, partIndex)=>{\n    let part = message.content[partIndex];\n    if (!part) {\n        if (message.content.length === 0 && partIndex === 0) {\n            part = EMPTY_CONTENT;\n        } else {\n            return SKIP_UPDATE;\n        }\n    } else if (message.content.length === 1 && part.type === \"text\" && part.text.length === 0) {\n        part = EMPTY_CONTENT;\n    }\n    const status = toContentPartStatus(message, partIndex, part);\n    return Object.freeze({\n        ...part,\n        part,\n        status\n    });\n};\nvar MessageRuntimeImpl = class {\n    constructor(_core, _threadBinding){\n        this._core = _core;\n        this._threadBinding = _threadBinding;\n        this.composer = new EditComposerRuntimeImpl(new NestedSubscriptionSubject({\n            path: {\n                ...this.path,\n                ref: this.path.ref + `${this.path.ref}.composer`,\n                composerSource: \"edit\"\n            },\n            getState: ()=>this._threadBinding.getState().getEditComposer(this._core.getState().id),\n            subscribe: (callback)=>this._threadBinding.subscribe(callback)\n        }), ()=>this._threadBinding.getState().beginEdit(this._core.getState().id));\n    }\n    get path() {\n        return this._core.path;\n    }\n    getState() {\n        return this._core.getState();\n    }\n    reload() {\n        const state = this._core.getState();\n        if (!state) throw new Error(\"Message is not available\");\n        if (state.role !== \"assistant\") throw new Error(\"Can only reload assistant messages\");\n        this._threadBinding.getState().startRun(state.parentId);\n    }\n    speak() {\n        const state = this._core.getState();\n        if (!state) throw new Error(\"Message is not available\");\n        return this._threadBinding.getState().speak(state.id);\n    }\n    stopSpeaking() {\n        const state = this._core.getState();\n        if (!state) throw new Error(\"Message is not available\");\n        const thread = this._threadBinding.getState();\n        if (thread.speech?.messageId === state.id) {\n            this._threadBinding.getState().stopSpeaking();\n        } else {\n            throw new Error(\"Message is not being spoken\");\n        }\n    }\n    submitFeedback({ type }) {\n        const state = this._core.getState();\n        if (!state) throw new Error(\"Message is not available\");\n        this._threadBinding.getState().submitFeedback({\n            messageId: state.id,\n            type\n        });\n    }\n    switchToBranch({ position, branchId }) {\n        const state = this._core.getState();\n        if (!state) throw new Error(\"Message is not available\");\n        if (branchId && position) {\n            throw new Error(\"May not specify both branchId and position\");\n        } else if (!branchId && !position) {\n            throw new Error(\"Must specify either branchId or position\");\n        }\n        const thread = this._threadBinding.getState();\n        const branches = thread.getBranches(state.id);\n        let targetBranch = branchId;\n        if (position === \"previous\") {\n            targetBranch = branches[state.branchNumber - 2];\n        } else if (position === \"next\") {\n            targetBranch = branches[state.branchNumber];\n        }\n        if (!targetBranch) throw new Error(\"Branch not found\");\n        this._threadBinding.getState().switchToBranch(targetBranch);\n    }\n    unstable_getCopyText() {\n        return getThreadMessageText(this.getState());\n    }\n    subscribe(callback) {\n        return this._core.subscribe(callback);\n    }\n    getContentPartByIndex(idx) {\n        if (idx < 0) throw new Error(\"Content part index must be >= 0\");\n        return new ContentPartRuntimeImpl(new ShallowMemoizeSubject({\n            path: {\n                ...this.path,\n                ref: this.path.ref + `${this.path.ref}.content[${idx}]`,\n                contentPartSelector: {\n                    type: \"index\",\n                    index: idx\n                }\n            },\n            getState: ()=>{\n                return getContentPartState(this.getState(), idx);\n            },\n            subscribe: (callback)=>this._core.subscribe(callback)\n        }), this._core, this._threadBinding);\n    }\n    getContentPartByToolCallId(toolCallId) {\n        return new ContentPartRuntimeImpl(new ShallowMemoizeSubject({\n            path: {\n                ...this.path,\n                ref: this.path.ref + `${this.path.ref}.content[toolCallId=${JSON.stringify(toolCallId)}]`,\n                contentPartSelector: {\n                    type: \"toolCallId\",\n                    toolCallId\n                }\n            },\n            getState: ()=>{\n                const state = this._core.getState();\n                const idx = state.content.findIndex((part)=>part.type === \"tool-call\" && part.toolCallId === toolCallId);\n                if (idx === -1) return SKIP_UPDATE;\n                return getContentPartState(state, idx);\n            },\n            subscribe: (callback)=>this._core.subscribe(callback)\n        }), this._core, this._threadBinding);\n    }\n    getAttachmentByIndex(idx) {\n        return new MessageAttachmentRuntimeImpl(new ShallowMemoizeSubject({\n            path: {\n                ...this.path,\n                ref: this.path.ref + `${this.path.ref}.attachments[${idx}]`,\n                attachmentSource: \"message\",\n                attachmentSelector: {\n                    type: \"index\",\n                    index: idx\n                }\n            },\n            getState: ()=>{\n                const attachments = this.getState().attachments;\n                const attachment = attachments?.[idx];\n                if (!attachment) return SKIP_UPDATE;\n                return {\n                    ...attachment,\n                    attachment,\n                    source: \"message\"\n                };\n            },\n            subscribe: (callback)=>this._core.subscribe(callback)\n        }));\n    }\n};\n// src/primitives/message/MessageContent.tsx\n\nvar ToolUIDisplay = ({ UI, ...props })=>{\n    const Render = useToolUIs((s)=>s.getToolUI(props.toolName)) ?? UI;\n    if (!Render) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Render, {\n        ...props\n    });\n};\nvar defaultComponents = {\n    Text: ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"p\", {\n            style: {\n                whiteSpace: \"pre-line\"\n            },\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ContentPartPrimitiveText, {}),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ContentPartPrimitiveInProgress, {\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", {\n                        style: {\n                            fontFamily: \"revert\"\n                        },\n                        children: \" ●\"\n                    })\n                })\n            ]\n        }),\n    Image: ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ContentPartPrimitiveImage, {}),\n    UI: ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ContentPartPrimitiveDisplay, {})\n};\nvar MessageContentPartComponent = ({ components: { Text: Text2 = defaultComponents.Text, Empty, Image: Image2 = defaultComponents.Image, UI = defaultComponents.UI, tools: { by_name = {}, Fallback: Fallback2 = void 0 } = {} } = {} })=>{\n    const contentPartRuntime = useContentPartRuntime();\n    const part = useContentPart();\n    const type = part.type;\n    switch(type){\n        case \"text\":\n            if (part.status.type === \"requires-action\") throw new Error(\"Encountered unexpected requires-action status\");\n            if (part.part === EMPTY_CONTENT && !!Empty) {\n                return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Empty, {\n                    status: part.status\n                });\n            }\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Text2, {\n                ...part,\n                part\n            });\n        case \"image\":\n            if (part.status.type === \"requires-action\") throw new Error(\"Encountered unexpected requires-action status\");\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Image2, {\n                ...part,\n                part\n            });\n        case \"ui\":\n            if (part.status.type === \"requires-action\") throw new Error(\"Encountered unexpected requires-action status\");\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(UI, {\n                ...part,\n                part\n            });\n        case \"tool-call\":\n            {\n                const Tool = by_name[part.toolName] || Fallback2;\n                const addResult = (result)=>contentPartRuntime.addToolResult(result);\n                return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToolUIDisplay, {\n                    ...part,\n                    part,\n                    UI: Tool,\n                    addResult\n                });\n            }\n        default:\n            const unhandledType = type;\n            throw new Error(`Unknown content part type: ${unhandledType}`);\n    }\n};\nvar MessageContentPartImpl = ({ partIndex, components })=>{\n    const messageRuntime = useMessageRuntime();\n    const runtime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>messageRuntime.getContentPartByIndex(partIndex), [\n        messageRuntime,\n        partIndex\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ContentPartRuntimeProvider, {\n        runtime,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MessageContentPartComponent, {\n            components\n        })\n    });\n};\nvar MessageContentPart = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(MessageContentPartImpl, (prev, next)=>prev.partIndex === next.partIndex && prev.components?.Text === next.components?.Text && prev.components?.Image === next.components?.Image && prev.components?.UI === next.components?.UI && prev.components?.tools === next.components?.tools);\nvar MessagePrimitiveContent = ({ components })=>{\n    const contentLength = useMessage((s)=>s.content.length) || 1;\n    return Array.from({\n        length: contentLength\n    }, (_, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MessageContentPart, {\n            partIndex: index,\n            components\n        }, index));\n};\nMessagePrimitiveContent.displayName = \"MessagePrimitive.Content\";\n// src/primitives/message/MessageInProgress.tsx\nvar MessagePrimitiveInProgress = ()=>{\n    return null;\n};\nMessagePrimitiveInProgress.displayName = \"MessagePrimitive.InProgress\";\n// src/primitives/message/MessageAttachments.tsx\n\n// src/context/providers/AttachmentRuntimeProvider.tsx\n\n\n\nvar useAttachmentRuntimeStore = (runtime)=>{\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>runtime));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        writableStore(store).setState(runtime, true);\n    }, [\n        runtime,\n        store\n    ]);\n    return store;\n};\nvar useAttachmentStore = (runtime)=>{\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>runtime.getState()));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const updateState = ()=>writableStore(store).setState(runtime.getState(), true);\n        updateState();\n        return runtime.subscribe(updateState);\n    }, [\n        runtime,\n        store\n    ]);\n    return store;\n};\nvar AttachmentRuntimeProvider = ({ runtime, children })=>{\n    const useAttachmentRuntime2 = useAttachmentRuntimeStore(runtime);\n    const useAttachment2 = useAttachmentStore(runtime);\n    const source = useAttachment2((s)=>s.source);\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return {\n            source,\n            useAttachmentRuntime: useAttachmentRuntime2,\n            useAttachment: useAttachment2\n        };\n    }, [\n        useAttachmentRuntime2,\n        useAttachment2\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AttachmentContext.Provider, {\n        value: context,\n        children\n    });\n};\n// src/primitives/message/MessageAttachments.tsx\n\nvar getComponent = (components, attachment)=>{\n    const type = attachment.type;\n    switch(type){\n        case \"image\":\n            return components?.Image ?? components?.Attachment;\n        case \"document\":\n            return components?.Document ?? components?.Attachment;\n        case \"file\":\n            return components?.File ?? components?.Attachment;\n        default:\n            const _exhaustiveCheck = type;\n            throw new Error(`Unknown attachment type: ${_exhaustiveCheck}`);\n    }\n};\nvar AttachmentComponent = ({ components })=>{\n    const Component = useMessageAttachment((a)=>getComponent(components, a.attachment));\n    if (!Component) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, {});\n};\nvar MessageAttachmentImpl = ({ components, attachmentIndex })=>{\n    const messageRuntime = useMessageRuntime();\n    const runtime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>messageRuntime.getAttachmentByIndex(attachmentIndex), [\n        messageRuntime,\n        attachmentIndex\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AttachmentRuntimeProvider, {\n        runtime,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AttachmentComponent, {\n            components\n        })\n    });\n};\nvar MessageAttachment = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(MessageAttachmentImpl, (prev, next)=>prev.attachmentIndex === next.attachmentIndex && prev.components?.Image === next.components?.Image && prev.components?.Document === next.components?.Document && prev.components?.File === next.components?.File && prev.components?.Attachment === next.components?.Attachment);\nvar MessagePrimitiveAttachments = ({ components })=>{\n    const attachmentsCount = useMessage(({ message })=>{\n        if (message.role !== \"user\") return 0;\n        return message.attachments.length;\n    });\n    return Array.from({\n        length: attachmentsCount\n    }, (_, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MessageAttachment, {\n            attachmentIndex: index,\n            components\n        }, index));\n};\nMessagePrimitiveAttachments.displayName = \"MessagePrimitive.Attachments\";\n// src/primitives/branchPicker/BranchPickerRoot.tsx\n\nvar BranchPickerPrimitiveRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ hideWhenSingleBranch, ...rest }, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MessagePrimitiveIf, {\n        hasBranches: hideWhenSingleBranch ? true : void 0,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.div, {\n            ...rest,\n            ref\n        })\n    });\n});\nBranchPickerPrimitiveRoot.displayName = \"BranchPickerPrimitive.Root\";\n// src/primitives/composer/index.ts\nvar composer_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(composer_exports, {\n    AddAttachment: ()=>ComposerPrimitiveAddAttachment,\n    Attachments: ()=>ComposerPrimitiveAttachments,\n    Cancel: ()=>ComposerPrimitiveCancel,\n    If: ()=>ComposerPrimitiveIf,\n    Input: ()=>ComposerPrimitiveInput,\n    Root: ()=>ComposerPrimitiveRoot,\n    Send: ()=>ComposerPrimitiveSend\n});\n// src/primitives/composer/ComposerRoot.tsx\n\n\n\n\nvar ComposerPrimitiveRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ onSubmit, ...rest }, forwardedRef)=>{\n    const send = useComposerSend();\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        if (!send) return;\n        send();\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.form, {\n        ...rest,\n        ref: forwardedRef,\n        onSubmit: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_5__.composeEventHandlers)(onSubmit, handleSubmit)\n    });\n});\nComposerPrimitiveRoot.displayName = \"ComposerPrimitive.Root\";\n// src/primitives/composer/ComposerInput.tsx\n\n\n\n\n\n\n// src/utils/hooks/useOnScrollToBottom.tsx\n\n\nvar useOnScrollToBottom = (callback)=>{\n    const callbackRef = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_9__.useCallbackRef)(callback);\n    const onScrollToBottom = useThreadViewport((vp)=>vp.onScrollToBottom);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return onScrollToBottom(callbackRef);\n    }, [\n        onScrollToBottom,\n        callbackRef\n    ]);\n};\n// src/primitives/composer/ComposerInput.tsx\n\nvar ComposerPrimitiveInput = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ autoFocus = false, asChild, disabled: disabledProp, onChange, onKeyDown, submitOnEnter = true, cancelOnEscape = true, unstable_focusOnRunStart = true, unstable_focusOnScrollToBottom = true, unstable_focusOnThreadSwitched = true, ...rest }, forwardedRef)=>{\n    const threadRuntime = useThreadRuntime();\n    const composerRuntime = useComposerRuntime();\n    const value = useComposer((c)=>{\n        if (!c.isEditing) return \"\";\n        return c.text;\n    });\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_10__.Slot : react_textarea_autosize__WEBPACK_IMPORTED_MODULE_11__[\"default\"];\n    const isDisabled = useThread((t)=>t.isDisabled) ?? disabledProp ?? false;\n    const textareaRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const ref = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_8__.useComposedRefs)(forwardedRef, textareaRef);\n    (0,_radix_ui_react_use_escape_keydown__WEBPACK_IMPORTED_MODULE_6__.useEscapeKeydown)((e)=>{\n        if (!cancelOnEscape) return;\n        if (composerRuntime.getState().canCancel) {\n            composerRuntime.cancel();\n            e.preventDefault();\n        }\n    });\n    const handleKeyPress = (e)=>{\n        if (isDisabled || !submitOnEnter) return;\n        if (e.nativeEvent.isComposing) return;\n        if (e.key === \"Enter\" && e.shiftKey === false) {\n            const { isRunning } = threadRuntime.getState();\n            if (!isRunning) {\n                e.preventDefault();\n                textareaRef.current?.closest(\"form\")?.requestSubmit();\n            }\n        }\n    };\n    const autoFocusEnabled = autoFocus && !isDisabled;\n    const focus2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const textarea = textareaRef.current;\n        if (!textarea || !autoFocusEnabled) return;\n        textarea.focus({\n            preventScroll: true\n        });\n        textarea.setSelectionRange(textareaRef.current.value.length, textareaRef.current.value.length);\n    }, [\n        autoFocusEnabled\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>focus2(), [\n        focus2\n    ]);\n    useOnScrollToBottom(()=>{\n        if (composerRuntime.type === \"thread\" && unstable_focusOnScrollToBottom) {\n            focus2();\n        }\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (composerRuntime.type !== \"thread\" || !unstable_focusOnRunStart) return void 0;\n        return threadRuntime.unstable_on(\"run-start\", focus2);\n    }, [\n        unstable_focusOnRunStart\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (composerRuntime.type !== \"thread\" || !unstable_focusOnThreadSwitched) return void 0;\n        return threadRuntime.unstable_on(\"switched-to\", focus2);\n    }, [\n        unstable_focusOnThreadSwitched\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, {\n        name: \"input\",\n        value,\n        ...rest,\n        ref,\n        disabled: isDisabled,\n        onChange: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_5__.composeEventHandlers)(onChange, (e)=>{\n            if (!composerRuntime.getState().isEditing) return;\n            return composerRuntime.setText(e.target.value);\n        }),\n        onKeyDown: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_5__.composeEventHandlers)(onKeyDown, handleKeyPress)\n    });\n});\nComposerPrimitiveInput.displayName = \"ComposerPrimitive.Input\";\n// src/primitives/composer/ComposerSend.tsx\nvar ComposerPrimitiveSend = createActionButton(\"ComposerPrimitive.Send\", useComposerSend);\n// src/primitives/composer/ComposerCancel.tsx\nvar ComposerPrimitiveCancel = createActionButton(\"ComposerPrimitive.Cancel\", useComposerCancel);\n// src/primitives/composer/ComposerAddAttachment.tsx\nvar ComposerPrimitiveAddAttachment = createActionButton(\"ComposerPrimitive.AddAttachment\", useComposerAddAttachment);\n// src/primitives/composer/ComposerAttachments.tsx\n\n\nvar getComponent2 = (components, attachment)=>{\n    const type = attachment.type;\n    switch(type){\n        case \"image\":\n            return components?.Image ?? components?.Attachment;\n        case \"document\":\n            return components?.Document ?? components?.Attachment;\n        case \"file\":\n            return components?.File ?? components?.Attachment;\n        default:\n            const _exhaustiveCheck = type;\n            throw new Error(`Unknown attachment type: ${_exhaustiveCheck}`);\n    }\n};\nvar AttachmentComponent2 = ({ components })=>{\n    const Component = useThreadComposerAttachment((a)=>getComponent2(components, a));\n    if (!Component) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, {});\n};\nvar ComposerAttachmentImpl = ({ components, attachmentIndex })=>{\n    const composerRuntime = useComposerRuntime();\n    const runtime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>composerRuntime.getAttachmentByIndex(attachmentIndex), [\n        composerRuntime,\n        attachmentIndex\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AttachmentRuntimeProvider, {\n        runtime,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AttachmentComponent2, {\n            components\n        })\n    });\n};\nvar ComposerAttachment = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(ComposerAttachmentImpl, (prev, next)=>prev.attachmentIndex === next.attachmentIndex && prev.components?.Image === next.components?.Image && prev.components?.Document === next.components?.Document && prev.components?.File === next.components?.File && prev.components?.Attachment === next.components?.Attachment);\nvar ComposerPrimitiveAttachments = ({ components })=>{\n    const attachmentsCount = useComposer((s)=>s.attachments.length);\n    return Array.from({\n        length: attachmentsCount\n    }, (_, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerAttachment, {\n            attachmentIndex: index,\n            components\n        }, index));\n};\nComposerPrimitiveAttachments.displayName = \"ComposerPrimitive.Attachments\";\n// src/primitives/composer/ComposerIf.tsx\nvar ComposerPrimitiveIf = ({ children, ...query })=>{\n    const result = useComposerIf(query);\n    return result ? children : null;\n};\nComposerPrimitiveIf.displayName = \"ComposerPrimitive.If\";\n// src/primitives/contentPart/index.ts\nvar contentPart_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(contentPart_exports, {\n    Display: ()=>ContentPartPrimitiveDisplay,\n    Image: ()=>ContentPartPrimitiveImage,\n    InProgress: ()=>ContentPartPrimitiveInProgress,\n    Text: ()=>ContentPartPrimitiveText\n});\n// src/primitives/thread/index.ts\nvar thread_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(thread_exports, {\n    Empty: ()=>ThreadPrimitiveEmpty,\n    If: ()=>ThreadPrimitiveIf,\n    Messages: ()=>ThreadPrimitiveMessages,\n    Root: ()=>ThreadPrimitiveRoot,\n    ScrollToBottom: ()=>ThreadPrimitiveScrollToBottom,\n    Suggestion: ()=>ThreadPrimitiveSuggestion,\n    Viewport: ()=>ThreadPrimitiveViewport\n});\n// src/primitives/thread/ThreadRoot.tsx\n\n\n\nvar ThreadPrimitiveRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.div, {\n        ...props,\n        ref\n    });\n});\nThreadPrimitiveRoot.displayName = \"ThreadPrimitive.Root\";\n// src/primitives/thread/ThreadEmpty.tsx\nvar ThreadPrimitiveEmpty = ({ children })=>{\n    const empty = useThreadEmpty();\n    return empty ? children : null;\n};\nThreadPrimitiveEmpty.displayName = \"ThreadPrimitive.Empty\";\n// src/primitives/thread/ThreadIf.tsx\nvar ThreadPrimitiveIf = ({ children, ...query })=>{\n    const result = useThreadIf(query);\n    return result ? children : null;\n};\nThreadPrimitiveIf.displayName = \"ThreadPrimitive.If\";\n// src/primitives/thread/ThreadViewport.tsx\n\n\n\n// src/primitive-hooks/thread/useThreadViewportAutoScroll.tsx\n\n\n// src/utils/hooks/useOnResizeContent.tsx\n\n\nvar useOnResizeContent = (callback)=>{\n    const callbackRef = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_9__.useCallbackRef)(callback);\n    const refCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((el)=>{\n        const resizeObserver = new ResizeObserver(()=>{\n            callbackRef();\n        });\n        const mutationObserver = new MutationObserver((mutations)=>{\n            for (const mutation of mutations){\n                for (const node of mutation.addedNodes){\n                    if (node instanceof Element) {\n                        resizeObserver.observe(node);\n                    }\n                }\n                for (const node of mutation.removedNodes){\n                    if (node instanceof Element) {\n                        resizeObserver.unobserve(node);\n                    }\n                }\n            }\n            callbackRef();\n        });\n        resizeObserver.observe(el);\n        mutationObserver.observe(el, {\n            childList: true\n        });\n        for (const child of el.children){\n            resizeObserver.observe(child);\n        }\n        return ()=>{\n            resizeObserver.disconnect();\n            mutationObserver.disconnect();\n        };\n    }, [\n        callbackRef\n    ]);\n    return useManagedRef(refCallback);\n};\n// src/primitive-hooks/thread/useThreadViewportAutoScroll.tsx\nvar useThreadViewportAutoScroll = ({ autoScroll = true, unstable_scrollToBottomOnRunStart = true })=>{\n    const divRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const threadViewportStore = useThreadViewportStore();\n    const lastScrollTop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const isScrollingToBottomRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const scrollToBottom = (behavior)=>{\n        const div = divRef.current;\n        if (!div || !autoScroll) return;\n        isScrollingToBottomRef.current = true;\n        div.scrollTo({\n            top: div.scrollHeight,\n            behavior\n        });\n    };\n    const handleScroll = ()=>{\n        const div = divRef.current;\n        if (!div) return;\n        const isAtBottom = threadViewportStore.getState().isAtBottom;\n        const newIsAtBottom = div.scrollHeight - div.scrollTop <= div.clientHeight + 1;\n        if (!newIsAtBottom && lastScrollTop.current < div.scrollTop) {} else {\n            if (newIsAtBottom) {\n                isScrollingToBottomRef.current = false;\n            }\n            if (newIsAtBottom !== isAtBottom) {\n                writableStore(threadViewportStore).setState({\n                    isAtBottom: newIsAtBottom\n                });\n            }\n        }\n        lastScrollTop.current = div.scrollTop;\n    };\n    const resizeRef = useOnResizeContent(()=>{\n        if (isScrollingToBottomRef.current || threadViewportStore.getState().isAtBottom) {\n            scrollToBottom(\"instant\");\n        }\n        handleScroll();\n    });\n    const scrollRef = useManagedRef((el)=>{\n        el.addEventListener(\"scroll\", handleScroll);\n        return ()=>{\n            el.removeEventListener(\"scroll\", handleScroll);\n        };\n    });\n    const autoScrollRef = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_8__.useComposedRefs)(resizeRef, scrollRef, divRef);\n    useOnScrollToBottom(()=>{\n        scrollToBottom(\"auto\");\n    });\n    const threadRuntime = useThreadRuntime();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!unstable_scrollToBottomOnRunStart) return void 0;\n        return threadRuntime.unstable_on(\"run-start\", focus);\n    }, [\n        unstable_scrollToBottomOnRunStart\n    ]);\n    return autoScrollRef;\n};\n// src/primitives/thread/ThreadViewport.tsx\n\nvar ThreadPrimitiveViewport = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ autoScroll, children, ...rest }, forwardedRef)=>{\n    const autoScrollRef = useThreadViewportAutoScroll({\n        autoScroll\n    });\n    const ref = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_8__.useComposedRefs)(forwardedRef, autoScrollRef);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.div, {\n        ...rest,\n        ref,\n        children\n    });\n});\nThreadPrimitiveViewport.displayName = \"ThreadPrimitive.Viewport\";\n// src/primitives/thread/ThreadMessages.tsx\n\n// src/context/providers/MessageRuntimeProvider.tsx\n\n\n// src/context/stores/MessageUtils.ts\n\nvar makeMessageUtilsStore = ()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set)=>{\n        return {\n            isCopied: false,\n            setIsCopied: (value)=>{\n                set({\n                    isCopied: value\n                });\n            },\n            isHovering: false,\n            setIsHovering: (value)=>{\n                set({\n                    isHovering: value\n                });\n            }\n        };\n    });\n// src/context/providers/MessageRuntimeProvider.tsx\n\nvar useMessageRuntimeStore = (runtime)=>{\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>runtime));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        writableStore(store).setState(runtime, true);\n    }, [\n        runtime,\n        store\n    ]);\n    return store;\n};\nvar useMessageStore2 = (runtime)=>{\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>runtime.getState()));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const updateState = ()=>writableStore(store).setState(runtime.getState(), true);\n        updateState();\n        return runtime.subscribe(updateState);\n    }, [\n        runtime,\n        store\n    ]);\n    return store;\n};\nvar useMessageUtilsStore2 = ()=>{\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>makeMessageUtilsStore());\n    return store;\n};\nvar useEditComposerStore2 = (useMessageRuntime2)=>{\n    const runtime = useMessageRuntime2.getState().composer;\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>(0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)(()=>runtime.getState()));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const updateState = ()=>writableStore(store).setState(runtime.getState());\n        updateState();\n        return runtime.subscribe(updateState);\n    }, [\n        runtime,\n        store\n    ]);\n    return store;\n};\nvar MessageRuntimeProvider = ({ runtime, children })=>{\n    const useMessageRuntime2 = useMessageRuntimeStore(runtime);\n    const useMessage2 = useMessageStore2(runtime);\n    const useMessageUtils2 = useMessageUtilsStore2();\n    const useEditComposer2 = useEditComposerStore2(useMessageRuntime2);\n    const [context] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        return {\n            useMessageRuntime: useMessageRuntime2,\n            useMessage: useMessage2,\n            useMessageUtils: useMessageUtils2,\n            useEditComposer: useEditComposer2\n        };\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MessageContext.Provider, {\n        value: context,\n        children\n    });\n};\n// src/primitives/thread/ThreadMessages.tsx\n\nvar isComponentsSame = (prev, next)=>{\n    return prev.Message === next.Message && prev.EditComposer === next.EditComposer && prev.UserEditComposer === next.UserEditComposer && prev.AssistantEditComposer === next.AssistantEditComposer && prev.SystemEditComposer === next.SystemEditComposer && prev.UserMessage === next.UserMessage && prev.AssistantMessage === next.AssistantMessage && prev.SystemMessage === next.SystemMessage;\n};\nvar DEFAULT_SYSTEM_MESSAGE = ()=>null;\nvar getComponent3 = (components, role, isEditing)=>{\n    switch(role){\n        case \"user\":\n            if (isEditing) {\n                return components.UserEditComposer ?? components.EditComposer ?? components.UserMessage ?? components.Message;\n            } else {\n                return components.UserMessage ?? components.Message;\n            }\n        case \"assistant\":\n            if (isEditing) {\n                return components.AssistantEditComposer ?? components.EditComposer ?? components.AssistantMessage ?? components.Message;\n            } else {\n                return components.AssistantMessage ?? components.Message;\n            }\n        case \"system\":\n            if (isEditing) {\n                return components.SystemEditComposer ?? components.EditComposer ?? components.SystemMessage ?? components.Message;\n            } else {\n                return components.SystemMessage ?? DEFAULT_SYSTEM_MESSAGE;\n            }\n        default:\n            const _exhaustiveCheck = role;\n            throw new Error(`Unknown message role: ${_exhaustiveCheck}`);\n    }\n};\nvar ThreadMessageComponent = ({ components })=>{\n    const role = useMessage((m)=>m.role);\n    const isEditing = useEditComposer((c)=>c.isEditing);\n    const Component = getComponent3(components, role, isEditing);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, {});\n};\nvar ThreadMessageImpl = ({ messageIndex, components })=>{\n    const threadRuntime = useThreadRuntime();\n    const runtime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>threadRuntime.getMesssageByIndex(messageIndex), [\n        threadRuntime,\n        messageIndex\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MessageRuntimeProvider, {\n        runtime,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadMessageComponent, {\n            components\n        })\n    });\n};\nvar ThreadMessage = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(ThreadMessageImpl, (prev, next)=>prev.messageIndex === next.messageIndex && isComponentsSame(prev.components, next.components));\nvar ThreadPrimitiveMessagesImpl = ({ components })=>{\n    const messagesLength = useThread((t)=>t.messages.length);\n    if (messagesLength === 0) return null;\n    return Array.from({\n        length: messagesLength\n    }, (_, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadMessage, {\n            messageIndex: index,\n            components\n        }, index));\n};\nThreadPrimitiveMessagesImpl.displayName = \"ThreadPrimitive.Messages\";\nvar ThreadPrimitiveMessages = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(ThreadPrimitiveMessagesImpl, (prev, next)=>isComponentsSame(prev.components, next.components));\n// src/primitives/thread/ThreadScrollToBottom.tsx\nvar ThreadPrimitiveScrollToBottom = createActionButton(\"ThreadPrimitive.ScrollToBottom\", useThreadScrollToBottom);\n// src/primitives/thread/ThreadSuggestion.tsx\nvar ThreadPrimitiveSuggestion = createActionButton(\"ThreadPrimitive.Suggestion\", useThreadSuggestion, [\n    \"prompt\",\n    \"autoSend\",\n    \"method\"\n]);\n// src/runtimes/core/subscribeToMainThread.ts\nvar subscribeToMainThread = (runtime, callback)=>{\n    let first = true;\n    let cleanup;\n    const inner = ()=>{\n        cleanup?.();\n        cleanup = runtime.thread.subscribe(callback);\n        if (!first) {\n            callback();\n        }\n        first = false;\n    };\n    const unsubscribe = runtime.subscribe(inner);\n    inner();\n    return ()=>{\n        unsubscribe();\n        cleanup?.();\n    };\n};\n// src/runtimes/local/useLocalRuntime.tsx\n\n// src/runtimes/core/BaseAssistantRuntimeCore.tsx\nvar BaseAssistantRuntimeCore = class {\n    constructor(_thread){\n        this._subscriptions = /* @__PURE__ */ new Set();\n        this.subscriptionHandler = ()=>{\n            for (const callback of this._subscriptions)callback();\n        };\n        this._thread = _thread;\n        this._thread = _thread;\n    }\n    get thread() {\n        return this._thread;\n    }\n    set thread(thread) {\n        this._thread = thread;\n        this.subscriptionHandler();\n    }\n    subscribe(callback) {\n        this._subscriptions.add(callback);\n        return ()=>this._subscriptions.delete(callback);\n    }\n};\n// src/internal.ts\nvar internal_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(internal_exports, {\n    AssistantRuntimeImpl: ()=>AssistantRuntimeImpl,\n    BaseAssistantRuntimeCore: ()=>BaseAssistantRuntimeCore,\n    DefaultThreadComposerRuntimeCore: ()=>DefaultThreadComposerRuntimeCore,\n    MessageRepository: ()=>MessageRepository,\n    ProxyConfigProvider: ()=>ProxyConfigProvider,\n    ThreadRuntimeImpl: ()=>ThreadRuntimeImpl,\n    TooltipIconButton: ()=>TooltipIconButton,\n    generateId: ()=>generateId,\n    useSmooth: ()=>useSmooth,\n    useSmoothStatus: ()=>useSmoothStatus,\n    withSmoothContextProvider: ()=>withSmoothContextProvider\n});\n// src/runtimes/composer/BaseComposerRuntimeCore.tsx\nvar isAttachmentComplete = (a)=>a.status.type === \"complete\";\nvar BaseComposerRuntimeCore = class {\n    getAttachmentAccept() {\n        return this.getAttachmentAdapter()?.accept ?? \"*\";\n    }\n    set attachments(value) {\n        this._attachments = value;\n        this.notifySubscribers();\n    }\n    get attachments() {\n        return this._attachments;\n    }\n    get isEmpty() {\n        return !this.text.trim() && !this.attachments.length;\n    }\n    get text() {\n        return this._text;\n    }\n    setText(value) {\n        this._text = value;\n        this.notifySubscribers();\n    }\n    reset() {\n        this._text = \"\";\n        this._attachments = [];\n        this.notifySubscribers();\n    }\n    async send() {\n        const adapter = this.getAttachmentAdapter();\n        const attachments = adapter && this.attachments.length > 0 ? await Promise.all(this.attachments.map(async (a)=>{\n            if (isAttachmentComplete(a)) return a;\n            const result = await adapter.send(a);\n            if (result.status?.type !== \"complete\") {\n                result.status = {\n                    type: \"complete\"\n                };\n            }\n            return result;\n        })) : [];\n        const message = {\n            role: \"user\",\n            content: this.text ? [\n                {\n                    type: \"text\",\n                    text: this.text\n                }\n            ] : [],\n            attachments\n        };\n        this.reset();\n        this.handleSend(message);\n    }\n    async addAttachment(file) {\n        const adapter = this.getAttachmentAdapter();\n        if (!adapter) throw new Error(\"Attachments are not supported\");\n        const attachment = await adapter.add({\n            file\n        });\n        if (attachment.status === void 0) {\n            attachment.status = {\n                type: \"requires-action\",\n                reason: \"composer-send\"\n            };\n        }\n        this._attachments = [\n            ...this._attachments,\n            attachment\n        ];\n        this.notifySubscribers();\n    }\n    async removeAttachment(attachmentId) {\n        const adapter = this.getAttachmentAdapter();\n        if (!adapter) throw new Error(\"Attachments are not supported\");\n        const index = this._attachments.findIndex((a)=>a.id === attachmentId);\n        if (index === -1) throw new Error(\"Attachment not found\");\n        const attachment = this._attachments[index];\n        await adapter.remove(attachment);\n        this._attachments = this._attachments.toSpliced(index, 1);\n        this.notifySubscribers();\n    }\n    notifySubscribers() {\n        for (const callback of this._subscriptions)callback();\n    }\n    subscribe(callback) {\n        this._subscriptions.add(callback);\n        return ()=>this._subscriptions.delete(callback);\n    }\n    constructor(){\n        this.isEditing = true;\n        this._attachments = [];\n        this._text = \"\";\n        this._subscriptions = /* @__PURE__ */ new Set();\n    }\n};\n// src/runtimes/composer/DefaultThreadComposerRuntimeCore.tsx\nvar DefaultThreadComposerRuntimeCore = class extends BaseComposerRuntimeCore {\n    constructor(runtime){\n        super();\n        this._canCancel = false;\n        this.runtime = runtime;\n        this.connect();\n    }\n    get canCancel() {\n        return this._canCancel;\n    }\n    get attachments() {\n        return super.attachments;\n    }\n    getAttachmentAdapter() {\n        return this.runtime.adapters?.attachments;\n    }\n    connect() {\n        return this.runtime.subscribe(()=>{\n            if (this.canCancel !== this.runtime.capabilities.cancel) {\n                this._canCancel = this.runtime.capabilities.cancel;\n                this.notifySubscribers();\n            }\n        });\n    }\n    async handleSend(message) {\n        this.runtime.append({\n            ...message,\n            parentId: this.runtime.messages.at(-1)?.id ?? null\n        });\n    }\n    async cancel() {\n        this.runtime.cancelRun();\n    }\n};\n// src/utils/ProxyConfigProvider.ts\nvar ProxyConfigProvider = class {\n    getModelConfig() {\n        return (0,_chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.mergeModelConfigs)(this._providers);\n    }\n    registerModelConfigProvider(provider) {\n        this._providers.add(provider);\n        const unsubscribe = provider.subscribe?.(()=>{\n            this.notifySubscribers();\n        });\n        this.notifySubscribers();\n        return ()=>{\n            this._providers.delete(provider);\n            unsubscribe?.();\n            this.notifySubscribers();\n        };\n    }\n    notifySubscribers() {\n        for (const callback of this._subscribers)callback();\n    }\n    subscribe(callback) {\n        this._subscribers.add(callback);\n        return ()=>this._subscribers.delete(callback);\n    }\n    constructor(){\n        this._providers = /* @__PURE__ */ new Set();\n        this._subscribers = /* @__PURE__ */ new Set();\n    }\n};\n// src/utils/idUtils.tsx\n\nvar generateId = (0,nanoid_non_secure__WEBPACK_IMPORTED_MODULE_13__.customAlphabet)(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", 7);\nvar optimisticPrefix = \"__optimistic__\";\nvar generateOptimisticId = ()=>`${optimisticPrefix}${generateId()}`;\n// src/runtimes/edge/converters/fromCoreMessage.ts\nvar fromCoreMessages = (message)=>{\n    return message.map((message2)=>fromCoreMessage(message2));\n};\nvar fromCoreMessage = (message, { id = generateId(), status = {\n    type: \"complete\",\n    reason: \"unknown\"\n}, attachments = [] } = {})=>{\n    const commonProps = {\n        id,\n        createdAt: /* @__PURE__ */ new Date()\n    };\n    const role = message.role;\n    switch(role){\n        case \"assistant\":\n            return {\n                ...commonProps,\n                role,\n                content: message.content.map((part)=>{\n                    if (part.type === \"tool-call\") {\n                        return {\n                            ...part,\n                            argsText: JSON.stringify(part.args)\n                        };\n                    }\n                    return part;\n                }),\n                status\n            };\n        case \"user\":\n            return {\n                ...commonProps,\n                role,\n                content: message.content,\n                attachments\n            };\n        case \"system\":\n            return {\n                ...commonProps,\n                role,\n                content: message.content\n            };\n        default:\n            {\n                const unsupportedRole = role;\n                throw new Error(`Unknown message role: ${unsupportedRole}`);\n            }\n    }\n};\n// src/runtimes/utils/MessageRepository.tsx\nvar findHead = (message)=>{\n    if (message.next) return findHead(message.next);\n    if (\"current\" in message) return message;\n    return null;\n};\nvar MessageRepository = class {\n    performOp(newParent, child, operation) {\n        const parentOrRoot = child.prev ?? this.root;\n        const newParentOrRoot = newParent ?? this.root;\n        if (operation === \"relink\" && parentOrRoot === newParentOrRoot) return;\n        if (operation !== \"link\") {\n            parentOrRoot.children = parentOrRoot.children.filter((m)=>m !== child.current.id);\n            if (parentOrRoot.next === child) {\n                const fallbackId = parentOrRoot.children.at(-1);\n                const fallback = fallbackId ? this.messages.get(fallbackId) : null;\n                if (fallback === void 0) {\n                    throw new Error(\"MessageRepository(performOp/cut): Fallback sibling message not found. This is likely an internal bug in assistant-ui.\");\n                }\n                parentOrRoot.next = fallback;\n            }\n        }\n        if (operation !== \"cut\") {\n            for(let current = newParent; current; current = current.prev){\n                if (current.current.id === child.current.id) {\n                    throw new Error(\"MessageRepository(performOp/link): A message with the same id already exists in the parent tree. This error occurs if the same message id is found multiple times. This is likely an internal bug in assistant-ui.\");\n                }\n            }\n            newParentOrRoot.children = [\n                ...newParentOrRoot.children,\n                child.current.id\n            ];\n            if (findHead(child) === this.head || newParentOrRoot.next === null) {\n                newParentOrRoot.next = child;\n            }\n            child.prev = newParent;\n        }\n    }\n    getMessages() {\n        const messages2 = new Array(this.head?.level ?? 0);\n        for(let current = this.head; current; current = current.prev){\n            messages2[current.level] = current.current;\n        }\n        return messages2;\n    }\n    addOrUpdateMessage(parentId, message) {\n        const existingItem = this.messages.get(message.id);\n        const prev = parentId ? this.messages.get(parentId) : null;\n        if (prev === void 0) throw new Error(\"MessageRepository(addOrUpdateMessage): Parent message not found. This is likely an internal bug in assistant-ui.\");\n        if (existingItem) {\n            existingItem.current = message;\n            this.performOp(prev, existingItem, \"relink\");\n            return;\n        }\n        const newItem = {\n            prev,\n            current: message,\n            next: null,\n            children: [],\n            level: prev ? prev.level + 1 : 0\n        };\n        this.messages.set(message.id, newItem);\n        this.performOp(prev, newItem, \"link\");\n        if (this.head === prev) {\n            this.head = newItem;\n        }\n    }\n    getMessage(messageId) {\n        const message = this.messages.get(messageId);\n        if (!message) throw new Error(\"MessageRepository(updateMessage): Message not found. This is likely an internal bug in assistant-ui.\");\n        return {\n            parentId: message.prev?.current.id ?? null,\n            message: message.current\n        };\n    }\n    appendOptimisticMessage(parentId, message) {\n        let optimisticId;\n        do {\n            optimisticId = generateOptimisticId();\n        }while (this.messages.has(optimisticId));\n        this.addOrUpdateMessage(parentId, fromCoreMessage(message, {\n            id: optimisticId,\n            status: {\n                type: \"running\"\n            }\n        }));\n        return optimisticId;\n    }\n    deleteMessage(messageId, replacementId) {\n        const message = this.messages.get(messageId);\n        if (!message) throw new Error(\"MessageRepository(deleteMessage): Optimistic message not found. This is likely an internal bug in assistant-ui.\");\n        const replacement = replacementId === void 0 ? message.prev : replacementId === null ? null : this.messages.get(replacementId);\n        if (replacement === void 0) throw new Error(\"MessageRepository(deleteMessage): Replacement not found. This is likely an internal bug in assistant-ui.\");\n        for (const child of message.children){\n            const childMessage = this.messages.get(child);\n            if (!childMessage) throw new Error(\"MessageRepository(deleteMessage): Child message not found. This is likely an internal bug in assistant-ui.\");\n            this.performOp(replacement, childMessage, \"relink\");\n        }\n        this.performOp(null, message, \"cut\");\n        this.messages.delete(messageId);\n        if (this.head === message) {\n            this.head = findHead(replacement ?? this.root);\n        }\n    }\n    getBranches(messageId) {\n        const message = this.messages.get(messageId);\n        if (!message) throw new Error(\"MessageRepository(getBranches): Message not found. This is likely an internal bug in assistant-ui.\");\n        const { children } = message.prev ?? this.root;\n        return children;\n    }\n    switchToBranch(messageId) {\n        const message = this.messages.get(messageId);\n        if (!message) throw new Error(\"MessageRepository(switchToBranch): Branch not found. This is likely an internal bug in assistant-ui.\");\n        const prevOrRoot = message.prev ?? this.root;\n        prevOrRoot.next = message;\n        this.head = findHead(message);\n    }\n    resetHead(messageId) {\n        if (messageId === null) {\n            this.head = null;\n            return;\n        }\n        const message = this.messages.get(messageId);\n        if (!message) throw new Error(\"MessageRepository(resetHead): Branch not found. This is likely an internal bug in assistant-ui.\");\n        this.head = message;\n        for(let current = message; current; current = current.prev){\n            if (current.prev) {\n                current.prev.next = current;\n            }\n        }\n    }\n    export() {\n        const exportItems = [];\n        for (const [, message] of this.messages){\n            exportItems.push({\n                message: message.current,\n                parentId: message.prev?.current.id ?? null\n            });\n        }\n        return {\n            headId: this.head?.current.id ?? null,\n            messages: exportItems\n        };\n    }\n    import({ headId, messages: messages2 }) {\n        for (const { message, parentId } of messages2){\n            this.addOrUpdateMessage(parentId, message);\n        }\n        this.resetHead(headId ?? messages2.at(-1)?.message.id ?? null);\n    }\n    constructor(){\n        this.messages = /* @__PURE__ */ new Map();\n        // message_id -> item\n        this.head = null;\n        this.root = {\n            children: [],\n            next: null\n        };\n    }\n};\n// src/ui/base/tooltip-icon-button.tsx\n\n// src/ui/base/tooltip.tsx\n\n// src/ui/utils/withDefaults.tsx\n\n\n\nvar withDefaultProps = ({ className, ...defaultProps })=>({ className: classNameProp, ...props })=>{\n        return {\n            className: classnames__WEBPACK_IMPORTED_MODULE_14__(className, classNameProp),\n            ...defaultProps,\n            ...props\n        };\n    };\nvar withDefaults = (Component, defaultProps)=>{\n    const getProps = withDefaultProps(defaultProps);\n    const WithDefaults = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n        const ComponentAsAny = Component;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComponentAsAny, {\n            ...getProps(props),\n            ref\n        });\n    });\n    WithDefaults.displayName = \"withDefaults(\" + (typeof Component === \"string\" ? Component : Component.displayName) + \")\";\n    return WithDefaults;\n};\n// src/ui/base/tooltip.tsx\n\nvar Tooltip = (props)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_15__.Provider, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_15__.Root, {\n            ...props\n        })\n    });\n};\nTooltip.displayName = \"Tooltip\";\nvar TooltipTrigger = _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_15__.Trigger;\nvar TooltipContent = withDefaults(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_15__.Content, {\n    sideOffset: 4,\n    className: \"aui-tooltip-content\"\n});\nTooltipContent.displayName = \"TooltipContent\";\n// src/ui/base/button.tsx\n\n\n\n\nvar buttonVariants = (0,class_variance_authority__WEBPACK_IMPORTED_MODULE_16__.cva)(\"aui-button\", {\n    variants: {\n        variant: {\n            default: \"aui-button-primary\",\n            outline: \"aui-button-outline\",\n            ghost: \"aui-button-ghost\"\n        },\n        size: {\n            default: \"aui-button-medium\",\n            icon: \"aui-button-icon\"\n        }\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\"\n    }\n});\nvar Button = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ className, variant, size, ...props }, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_4__.Primitive.button, {\n        className: buttonVariants({\n            variant,\n            size,\n            className\n        }),\n        ...props,\n        ref\n    });\n});\nButton.displayName = \"Button\";\n// src/ui/base/tooltip-icon-button.tsx\n\nvar TooltipIconButton = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, tooltip, side = \"bottom\", ...rest }, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(Tooltip, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipTrigger, {\n                asChild: true,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(Button, {\n                    variant: \"ghost\",\n                    size: \"icon\",\n                    ...rest,\n                    ref,\n                    children: [\n                        children,\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", {\n                            className: \"aui-sr-only\",\n                            children: tooltip\n                        })\n                    ]\n                })\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipContent, {\n                side,\n                children: tooltip\n            })\n        ]\n    });\n});\nTooltipIconButton.displayName = \"TooltipIconButton\";\n// src/api/ThreadRuntime.ts\nvar toAppendMessage = (messages2, message)=>{\n    if (typeof message === \"string\") {\n        return {\n            parentId: messages2.at(-1)?.id ?? null,\n            role: \"user\",\n            content: [\n                {\n                    type: \"text\",\n                    text: message\n                }\n            ],\n            attachments: []\n        };\n    }\n    if (message.role && message.parentId && message.attachments) {\n        return message;\n    }\n    return {\n        parentId: message.parentId ?? messages2.at(-1)?.id ?? null,\n        role: message.role ?? \"user\",\n        content: message.content,\n        attachments: message.attachments ?? []\n    };\n};\nvar getThreadState = (runtime)=>{\n    const lastMessage = runtime.messages.at(-1);\n    return Object.freeze({\n        threadId: runtime.threadId,\n        capabilities: runtime.capabilities,\n        isDisabled: runtime.isDisabled,\n        isRunning: lastMessage?.role !== \"assistant\" ? false : lastMessage.status.type === \"running\",\n        messages: runtime.messages,\n        suggestions: runtime.suggestions,\n        extras: runtime.extras,\n        speech: runtime.speech\n    });\n};\nvar ThreadRuntimeImpl = class {\n    get path() {\n        return this._threadBinding.path;\n    }\n    /**\n   * @deprecated Use `getState().threadId` instead. This will be removed in 0.6.0.\n   */ get threadId() {\n        return this.getState().threadId;\n    }\n    /**\n   * @deprecated Use `getState().isDisabled` instead. This will be removed in 0.6.0.\n   */ get isDisabled() {\n        return this.getState().isDisabled;\n    }\n    /**\n   * @deprecated Use `getState().isRunning` instead. This will be removed in 0.6.0.\n   */ get isRunning() {\n        return this.getState().isRunning;\n    }\n    /**\n   * @deprecated Use `getState().capabilities` instead. This will be removed in 0.6.0.\n   */ get capabilities() {\n        return this.getState().capabilities;\n    }\n    /**\n   * @deprecated Use `getState().extras` instead. This will be removed in 0.6.0.\n   */ get extras() {\n        return this._threadBinding.getState().extras;\n    }\n    /**\n   * @deprecated Use `getState().followupSuggestions` instead. This will be removed in 0.6.0.\n   */ get suggestions() {\n        return this._threadBinding.getState().suggestions;\n    }\n    /**\n   * @deprecated Use `getState().messages` instead. This will be removed in 0.6.0.\n   */ get messages() {\n        return this._threadBinding.getState().messages;\n    }\n    /**\n   * @deprecated Use `getState().speechState` instead. This will be removed in 0.6.0.\n   */ get speech() {\n        return this._threadBinding.getState().speech;\n    }\n    unstable_getCore() {\n        return this._threadBinding.getState();\n    }\n    constructor(threadBinding){\n        this._eventListenerNestedSubscriptions = /* @__PURE__ */ new Map();\n        const stateBinding = new LazyMemoizeSubject({\n            path: threadBinding.path,\n            getState: ()=>getThreadState(threadBinding.getState()),\n            subscribe: (callback)=>threadBinding.subscribe(callback)\n        });\n        this._threadBinding = {\n            path: threadBinding.path,\n            getState: ()=>threadBinding.getState(),\n            getStateState: ()=>stateBinding.getState(),\n            outerSubscribe: (callback)=>threadBinding.outerSubscribe(callback),\n            subscribe: (callback)=>threadBinding.subscribe(callback)\n        };\n        this.composer = new ThreadComposerRuntimeImpl(new NestedSubscriptionSubject({\n            path: {\n                ...this.path,\n                ref: this.path.ref + `${this.path.ref}.composer`,\n                composerSource: \"thread\"\n            },\n            getState: ()=>this._threadBinding.getState().composer,\n            subscribe: (callback)=>this._threadBinding.subscribe(callback)\n        }));\n    }\n    getState() {\n        return this._threadBinding.getStateState();\n    }\n    append(message) {\n        this._threadBinding.getState().append(toAppendMessage(this._threadBinding.getState().messages, message));\n    }\n    subscribe(callback) {\n        return this._threadBinding.subscribe(callback);\n    }\n    /**\n   * @derprecated Use `getMesssageById(id).getState().branchNumber` / `getMesssageById(id).getState().branchCount` instead. This will be removed in 0.6.0.\n   */ getBranches(messageId) {\n        return this._threadBinding.getState().getBranches(messageId);\n    }\n    getModelConfig() {\n        return this._threadBinding.getState().getModelConfig();\n    }\n    // TODO sometimes you want to continue when there is no child message\n    startRun(parentId) {\n        return this._threadBinding.getState().startRun(parentId);\n    }\n    cancelRun() {\n        this._threadBinding.getState().cancelRun();\n    }\n    /**\n   * @deprecated Use `getMesssageById(id).getContentPartByToolCallId(toolCallId).addToolResult({ result })` instead. This will be removed in 0.6.0.\n   */ addToolResult(options) {\n        this._threadBinding.getState().addToolResult(options);\n    }\n    /**\n   * @deprecated Use `getMesssageById(id).switchToBranch({ options })` instead. This will be removed in 0.6.0.\n   */ switchToBranch(branchId) {\n        return this._threadBinding.getState().switchToBranch(branchId);\n    }\n    /**\n   * @deprecated Use `getMesssageById(id).speak()` instead. This will be removed in 0.6.0.\n   */ speak(messageId) {\n        return this._threadBinding.getState().speak(messageId);\n    }\n    stopSpeaking() {\n        return this._threadBinding.getState().stopSpeaking();\n    }\n    getSubmittedFeedback(messageId) {\n        return this._threadBinding.getState().getSubmittedFeedback(messageId);\n    }\n    /**\n   * @deprecated Use `getMesssageById(id).submitFeedback({ type })` instead. This will be removed in 0.6.0.\n   */ submitFeedback(options) {\n        return this._threadBinding.getState().submitFeedback(options);\n    }\n    /**\n   * @deprecated Use `getMesssageById(id).getMessageByIndex(idx).composer` instead. This will be removed in 0.6.0.\n   */ getEditComposer(messageId) {\n        return this._threadBinding.getState().getEditComposer(messageId);\n    }\n    /**\n   * @deprecated Use `getMesssageById(id).getMessageByIndex(idx).composer.beginEdit()` instead. This will be removed in 0.6.0.\n   */ beginEdit(messageId) {\n        return this._threadBinding.getState().beginEdit(messageId);\n    }\n    export() {\n        return this._threadBinding.getState().export();\n    }\n    import(data) {\n        this._threadBinding.getState().import(data);\n    }\n    getMesssageByIndex(idx) {\n        if (idx < 0) throw new Error(\"Message index must be >= 0\");\n        return this._getMessageRuntime({\n            ...this.path,\n            ref: this.path.ref + `${this.path.ref}.messages[${idx}]`,\n            messageSelector: {\n                type: \"index\",\n                index: idx\n            }\n        }, ()=>{\n            const messages2 = this._threadBinding.getState().messages;\n            const message = messages2[idx];\n            if (!message) return void 0;\n            return {\n                message,\n                parentId: messages2[idx - 1]?.id ?? null\n            };\n        });\n    }\n    getMesssageById(messageId) {\n        return this._getMessageRuntime({\n            ...this.path,\n            ref: this.path.ref + `${this.path.ref}.messages[messageId=${JSON.stringify(messageId)}]`,\n            messageSelector: {\n                type: \"messageId\",\n                messageId\n            }\n        }, ()=>this._threadBinding.getState().getMessageById(messageId));\n    }\n    _getMessageRuntime(path, callback) {\n        return new MessageRuntimeImpl(new ShallowMemoizeSubject({\n            path,\n            getState: ()=>{\n                const { message, parentId } = callback() ?? {};\n                const { messages: messages2, speech: speechState } = this._threadBinding.getState();\n                if (!message || parentId === void 0) return SKIP_UPDATE;\n                const thread = this._threadBinding.getState();\n                const branches = thread.getBranches(message.id);\n                const submittedFeedback = thread.getSubmittedFeedback(message.id);\n                return {\n                    ...message,\n                    message,\n                    isLast: messages2.at(-1)?.id === message.id,\n                    parentId,\n                    branches,\n                    branchNumber: branches.indexOf(message.id) + 1,\n                    branchCount: branches.length,\n                    speech: speechState?.messageId === message.id ? speechState : void 0,\n                    submittedFeedback\n                };\n            },\n            subscribe: (callback2)=>this._threadBinding.subscribe(callback2)\n        }), this._threadBinding);\n    }\n    unstable_on(event, callback) {\n        let subject = this._eventListenerNestedSubscriptions.get(event);\n        if (!subject) {\n            subject = new NestedSubscriptionSubject({\n                path: this.path,\n                getState: ()=>({\n                        subscribe: (callback2)=>this._threadBinding.getState().unstable_on(event, callback2)\n                    }),\n                subscribe: (callback2)=>this._threadBinding.outerSubscribe(callback2)\n            });\n            this._eventListenerNestedSubscriptions.set(event, subject);\n        }\n        return subject.subscribe(callback);\n    }\n};\n// src/api/AssistantRuntime.ts\nvar AssistantRuntimeImpl = class _AssistantRuntimeImpl {\n    constructor(_core, _thread){\n        this._core = _core;\n        this._thread = _thread;\n    }\n    get thread() {\n        return this._thread;\n    }\n    switchToNewThread() {\n        return this._core.switchToNewThread();\n    }\n    switchToThread(threadId) {\n        return this._core.switchToThread(threadId);\n    }\n    registerModelConfigProvider(provider) {\n        return this._core.registerModelConfigProvider(provider);\n    }\n    /**\n   * @deprecated Thread is now static and never gets updated. This will be removed in 0.6.0.\n   */ subscribe(callback) {\n        return this._core.subscribe(callback);\n    }\n    static createMainThreadRuntime(_core, CustomThreadRuntime = ThreadRuntimeImpl) {\n        return new CustomThreadRuntime(new NestedSubscriptionSubject({\n            path: {\n                ref: \"threads.main\",\n                threadSelector: {\n                    type: \"main\"\n                }\n            },\n            getState: ()=>_core.thread,\n            subscribe: (callback)=>_core.subscribe(callback)\n        }));\n    }\n    static create(_core, CustomThreadRuntime = ThreadRuntimeImpl) {\n        return new _AssistantRuntimeImpl(_core, _AssistantRuntimeImpl.createMainThreadRuntime(_core, CustomThreadRuntime));\n    }\n};\n// src/runtimes/edge/converters/fromLanguageModelMessages.ts\nvar fromLanguageModelMessages = (lm, { mergeSteps })=>{\n    const messages2 = [];\n    for (const lmMessage of lm){\n        const role = lmMessage.role;\n        switch(role){\n            case \"system\":\n                {\n                    messages2.push({\n                        role: \"system\",\n                        content: [\n                            {\n                                type: \"text\",\n                                text: lmMessage.content\n                            }\n                        ]\n                    });\n                    break;\n                }\n            case \"user\":\n                {\n                    messages2.push({\n                        role: \"user\",\n                        content: lmMessage.content.map((part)=>{\n                            const type = part.type;\n                            switch(type){\n                                case \"text\":\n                                    {\n                                        return {\n                                            type: \"text\",\n                                            text: part.text\n                                        };\n                                    }\n                                case \"image\":\n                                    {\n                                        if (part.image instanceof URL) {\n                                            return {\n                                                type: \"image\",\n                                                image: part.image.href\n                                            };\n                                        }\n                                        throw new Error(\"Only images with URL data are supported\");\n                                    }\n                                case \"file\":\n                                    {\n                                        throw new Error(\"File content parts are not supported\");\n                                    }\n                                default:\n                                    {\n                                        const unhandledType = type;\n                                        throw new Error(`Unknown content part type: ${unhandledType}`);\n                                    }\n                            }\n                        })\n                    });\n                    break;\n                }\n            case \"assistant\":\n                {\n                    const newContent = lmMessage.content.map((part)=>{\n                        if (part.type === \"tool-call\") {\n                            return {\n                                type: \"tool-call\",\n                                toolCallId: part.toolCallId,\n                                toolName: part.toolName,\n                                argsText: JSON.stringify(part.args),\n                                args: part.args\n                            };\n                        }\n                        return part;\n                    });\n                    if (mergeSteps) {\n                        const previousMessage = messages2[messages2.length - 1];\n                        if (previousMessage?.role === \"assistant\") {\n                            previousMessage.content.push(...newContent);\n                            break;\n                        }\n                    }\n                    messages2.push({\n                        role: \"assistant\",\n                        content: newContent\n                    });\n                    break;\n                }\n            case \"tool\":\n                {\n                    const previousMessage = messages2[messages2.length - 1];\n                    if (previousMessage?.role !== \"assistant\") throw new Error(\"A tool message must be preceded by an assistant message.\");\n                    for (const tool of lmMessage.content){\n                        const toolCall = previousMessage.content.find((c)=>c.type === \"tool-call\" && c.toolCallId === tool.toolCallId);\n                        if (!toolCall) throw new Error(\"Received tool result for an unknown tool call.\");\n                        if (toolCall.toolName !== tool.toolName) throw new Error(\"Tool call name mismatch.\");\n                        toolCall.result = tool.result;\n                        if (tool.isError) {\n                            toolCall.isError = true;\n                        }\n                    }\n                    break;\n                }\n            default:\n                {\n                    const unhandledRole = role;\n                    throw new Error(`Unknown message role: ${unhandledRole}`);\n                }\n        }\n    }\n    return messages2;\n};\n// src/runtimes/edge/converters/fromLanguageModelTools.ts\nvar fromLanguageModelTools = (tools)=>{\n    return Object.fromEntries(tools.map((tool)=>[\n            tool.name,\n            {\n                description: tool.description,\n                parameters: tool.parameters\n            }\n        ]));\n};\n// src/runtimes/edge/streams/utils/chunkByLineStream.ts\nfunction chunkByLineStream() {\n    let buffer = \"\";\n    return new TransformStream({\n        transform (chunk, controller) {\n            buffer += chunk;\n            const lines = buffer.split(\"\\n\");\n            for(let i = 0; i < lines.length - 1; i++){\n                controller.enqueue(lines[i]);\n            }\n            buffer = lines[lines.length - 1];\n        },\n        flush (controller) {\n            if (buffer) {\n                controller.enqueue(buffer);\n            }\n        }\n    });\n}\n// src/runtimes/edge/streams/utils/streamPartDecoderStream.ts\nvar decodeStreamPart = (part)=>{\n    const index = part.indexOf(\":\");\n    if (index === -1) throw new Error(\"Invalid stream part\");\n    return {\n        type: part.slice(0, index),\n        value: JSON.parse(part.slice(index + 1))\n    };\n};\nfunction streamPartDecoderStream() {\n    const decodeStream = new TransformStream({\n        transform (chunk, controller) {\n            controller.enqueue(decodeStreamPart(chunk));\n        }\n    });\n    return new _chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.PipeableTransformStream((readable)=>{\n        return readable.pipeThrough(new TextDecoderStream()).pipeThrough(chunkByLineStream()).pipeThrough(decodeStream);\n    });\n}\n// src/runtimes/edge/streams/utils/index.ts\nvar streamUtils = {\n    streamPartEncoderStream: _chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.streamPartEncoderStream,\n    streamPartDecoderStream\n};\n// src/runtimes/edge/useEdgeRuntime.ts\n\n// src/runtimes/edge/streams/assistantDecoderStream.ts\nfunction assistantDecoderStream() {\n    const toolCallNames = /* @__PURE__ */ new Map();\n    let currentToolCall;\n    return new TransformStream({\n        transform ({ type, value }, controller) {\n            if (currentToolCall && type !== \"c\" /* ToolCallDelta */  && type !== \"3\" /* Error */ ) {\n                controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallType: \"function\",\n                    toolCallId: currentToolCall.id,\n                    toolName: currentToolCall.name,\n                    args: currentToolCall.argsText\n                });\n                currentToolCall = void 0;\n            }\n            switch(type){\n                case \"0\" /* TextDelta */ :\n                    {\n                        controller.enqueue({\n                            type: \"text-delta\",\n                            textDelta: value\n                        });\n                        break;\n                    }\n                case \"b\" /* ToolCallBegin */ :\n                    {\n                        const { toolCallId: id, toolName: name } = value;\n                        toolCallNames.set(id, name);\n                        currentToolCall = {\n                            id,\n                            name,\n                            argsText: \"\"\n                        };\n                        controller.enqueue({\n                            type: \"tool-call-delta\",\n                            toolCallType: \"function\",\n                            toolCallId: id,\n                            toolName: name,\n                            argsTextDelta: \"\"\n                        });\n                        break;\n                    }\n                case \"c\" /* ToolCallDelta */ :\n                    {\n                        const { toolCallId, argsTextDelta } = value;\n                        const toolName = toolCallNames.get(toolCallId);\n                        if (currentToolCall?.id === toolCallId) {\n                            currentToolCall.argsText += argsTextDelta;\n                        }\n                        controller.enqueue({\n                            type: \"tool-call-delta\",\n                            toolCallType: \"function\",\n                            toolCallId,\n                            toolName,\n                            argsTextDelta\n                        });\n                        break;\n                    }\n                case \"a\" /* ToolCallResult */ :\n                    {\n                        controller.enqueue({\n                            type: \"tool-result\",\n                            toolCallType: \"function\",\n                            toolCallId: value.toolCallId,\n                            toolName: toolCallNames.get(value.toolCallId),\n                            result: value.result\n                        });\n                        break;\n                    }\n                case \"d\" /* Finish */ :\n                    {\n                        controller.enqueue({\n                            type: \"finish\",\n                            ...value\n                        });\n                        break;\n                    }\n                case \"3\" /* Error */ :\n                    {\n                        controller.enqueue({\n                            type: \"error\",\n                            error: value\n                        });\n                        break;\n                    }\n                case \"9\" /* ToolCall */ :\n                    {\n                        const { toolCallId, toolName, args } = value;\n                        const argsText = JSON.stringify(args);\n                        controller.enqueue({\n                            type: \"tool-call-delta\",\n                            toolCallType: \"function\",\n                            toolCallId,\n                            toolName,\n                            argsTextDelta: argsText\n                        });\n                        controller.enqueue({\n                            type: \"tool-call\",\n                            toolCallType: \"function\",\n                            toolCallId,\n                            toolName,\n                            args: argsText\n                        });\n                        break;\n                    }\n                case \"e\" /* StepFinish */ :\n                    {\n                        controller.enqueue({\n                            type: \"step-finish\",\n                            ...value\n                        });\n                        break;\n                    }\n                // TODO\n                case \"2\" /* Data */ :\n                    break;\n                default:\n                    {\n                        const unhandledType = type;\n                        throw new Error(`Unhandled chunk type: ${unhandledType}`);\n                    }\n            }\n        }\n    });\n}\n// src/runtimes/edge/EdgeChatAdapter.ts\nfunction asAsyncIterable(source) {\n    return {\n        [Symbol.asyncIterator]: ()=>{\n            const reader = source.getReader();\n            return {\n                async next () {\n                    const { done, value } = await reader.read();\n                    return done ? {\n                        done: true,\n                        value: void 0\n                    } : {\n                        done: false,\n                        value\n                    };\n                }\n            };\n        }\n    };\n}\nvar EdgeChatAdapter = class {\n    constructor(options){\n        this.options = options;\n    }\n    async *run({ messages: messages2, abortSignal, config }) {\n        const headers = new Headers(this.options.headers);\n        headers.set(\"Content-Type\", \"application/json\");\n        const result = await fetch(this.options.api, {\n            method: \"POST\",\n            headers,\n            credentials: this.options.credentials ?? \"same-origin\",\n            body: JSON.stringify({\n                system: config.system,\n                messages: (0,_chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.toCoreMessages)(messages2),\n                tools: config.tools ? (0,_chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.toLanguageModelTools)(config.tools) : [],\n                ...config.callSettings,\n                ...config.config,\n                ...this.options.body\n            }),\n            signal: abortSignal\n        });\n        if (!result.ok) {\n            throw new Error(`Status ${result.status}: ${await result.text()}`);\n        }\n        const stream = result.body.pipeThrough(streamPartDecoderStream()).pipeThrough(assistantDecoderStream()).pipeThrough((0,_chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.toolResultStream)(config.tools, abortSignal)).pipeThrough((0,_chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.runResultStream)());\n        let update;\n        for await (update of asAsyncIterable(stream)){\n            yield update;\n        }\n        if (update === void 0) throw new Error(\"No data received from Edge Runtime\");\n    }\n};\n// src/runtimes/local/LocalRuntimeOptions.tsx\nvar splitLocalRuntimeOptions = (options)=>{\n    const { initialMessages, maxToolRoundtrips, maxSteps, adapters, ...rest } = options;\n    return {\n        localRuntimeOptions: {\n            initialMessages,\n            maxToolRoundtrips,\n            maxSteps,\n            adapters\n        },\n        otherOptions: rest\n    };\n};\n// src/runtimes/edge/useEdgeRuntime.ts\nvar useEdgeRuntime = (options)=>{\n    const { localRuntimeOptions, otherOptions } = splitLocalRuntimeOptions(options);\n    const [adapter] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new EdgeChatAdapter(otherOptions));\n    return useLocalRuntime(adapter, localRuntimeOptions);\n};\n// src/runtimes/local/shouldContinue.tsx\nvar shouldContinue = (result)=>result.status?.type === \"requires-action\" && result.status.reason === \"tool-calls\" && result.content.every((c)=>c.type !== \"tool-call\" || !!c.result);\n// src/runtimes/composer/DefaultEditComposerRuntimeCore.tsx\nvar DefaultEditComposerRuntimeCore = class extends BaseComposerRuntimeCore {\n    constructor(runtime, endEditCallback, { parentId, message }){\n        super();\n        this.runtime = runtime;\n        this.endEditCallback = endEditCallback;\n        this._parentId = parentId;\n        this._previousText = getThreadMessageText(message);\n        this.setText(this._previousText);\n        this._nonTextParts = message.content.filter((part)=>part.type !== \"text\" && part.type !== \"ui\");\n        this.attachments = message.attachments ?? [];\n    }\n    get canCancel() {\n        return true;\n    }\n    getAttachmentAdapter() {\n        return this.runtime.adapters?.attachments;\n    }\n    async handleSend(message) {\n        const text = getThreadMessageText(message);\n        if (text !== this._previousText) {\n            this.runtime.append({\n                ...message,\n                content: [\n                    ...message.content,\n                    ...this._nonTextParts\n                ],\n                parentId: this._parentId\n            });\n        }\n        this.endEditCallback();\n        this.notifySubscribers();\n    }\n    async cancel() {\n        this.endEditCallback();\n        this.notifySubscribers();\n    }\n};\n// src/runtimes/core/BaseThreadRuntimeCore.tsx\nvar BaseThreadRuntimeCore = class {\n    constructor(configProvider){\n        this._subscriptions = /* @__PURE__ */ new Set();\n        this.repository = new MessageRepository();\n        this.composer = new DefaultThreadComposerRuntimeCore(this);\n        this._editComposers = /* @__PURE__ */ new Map();\n        this._submittedFeedback = {};\n        this._eventSubscribers = /* @__PURE__ */ new Map();\n        this.configProvider = configProvider;\n        this.configProvider.subscribe?.(()=>{\n            this._notifyEventSubscribers(\"model-config-update\");\n        });\n    }\n    get messages() {\n        return this.repository.getMessages();\n    }\n    getModelConfig() {\n        return this.configProvider.getModelConfig();\n    }\n    getEditComposer(messageId) {\n        return this._editComposers.get(messageId);\n    }\n    beginEdit(messageId) {\n        if (this._editComposers.has(messageId)) throw new Error(\"Edit already in progress\");\n        this._editComposers.set(messageId, new DefaultEditComposerRuntimeCore(this, ()=>this._editComposers.delete(messageId), this.repository.getMessage(messageId)));\n        this._notifySubscribers();\n    }\n    getMessageById(messageId) {\n        return this.repository.getMessage(messageId);\n    }\n    getBranches(messageId) {\n        return this.repository.getBranches(messageId);\n    }\n    switchToBranch(branchId) {\n        this.repository.switchToBranch(branchId);\n        this._notifySubscribers();\n    }\n    _notifySubscribers() {\n        for (const callback of this._subscriptions)callback();\n    }\n    _notifyEventSubscribers(event) {\n        const subscribers = this._eventSubscribers.get(event);\n        if (!subscribers) return;\n        for (const callback of subscribers)callback();\n    }\n    subscribe(callback) {\n        this._subscriptions.add(callback);\n        return ()=>this._subscriptions.delete(callback);\n    }\n    getSubmittedFeedback(messageId) {\n        return this._submittedFeedback[messageId];\n    }\n    submitFeedback({ messageId, type }) {\n        const adapter = this.adapters?.feedback;\n        if (!adapter) throw new Error(\"Feedback adapter not configured\");\n        const { message } = this.repository.getMessage(messageId);\n        adapter.submit({\n            message,\n            type\n        });\n        this._submittedFeedback[messageId] = {\n            type\n        };\n        this._notifySubscribers();\n    }\n    speak(messageId) {\n        const adapter = this.adapters?.speech;\n        if (!adapter) throw new Error(\"Speech adapter not configured\");\n        const { message } = this.repository.getMessage(messageId);\n        this._stopSpeaking?.();\n        const utterance = adapter.speak(getThreadMessageText(message));\n        const unsub = utterance.subscribe(()=>{\n            if (utterance.status.type === \"ended\") {\n                this._stopSpeaking = void 0;\n                this.speech = void 0;\n            } else {\n                this.speech = {\n                    messageId,\n                    status: utterance.status\n                };\n            }\n            this._notifySubscribers();\n        });\n        this.speech = {\n            messageId,\n            status: utterance.status\n        };\n        this._notifySubscribers();\n        this._stopSpeaking = ()=>{\n            utterance.cancel();\n            unsub();\n            this.speech = void 0;\n            this._stopSpeaking = void 0;\n        };\n    }\n    stopSpeaking() {\n        if (!this._stopSpeaking) throw new Error(\"No message is being spoken\");\n        this._stopSpeaking();\n        this._notifySubscribers();\n    }\n    export() {\n        return this.repository.export();\n    }\n    import(data) {\n        this.repository.import(data);\n        this._notifySubscribers();\n    }\n    unstable_on(event, callback) {\n        const subscribers = this._eventSubscribers.get(event);\n        if (!subscribers) {\n            this._eventSubscribers.set(event, /* @__PURE__ */ new Set([\n                callback\n            ]));\n        } else {\n            subscribers.add(callback);\n        }\n        return ()=>{\n            const subscribers2 = this._eventSubscribers.get(event);\n            subscribers2.delete(callback);\n        };\n    }\n};\n// src/runtimes/local/LocalThreadRuntimeCore.tsx\nvar LocalThreadRuntimeCore = class extends BaseThreadRuntimeCore {\n    constructor(configProvider, adapter, { initialMessages, ...options }){\n        super(configProvider);\n        this.capabilities = {\n            switchToBranch: true,\n            edit: true,\n            reload: true,\n            cancel: true,\n            unstable_copy: true,\n            speech: false,\n            attachments: false,\n            feedback: false\n        };\n        this.abortController = null;\n        this.isDisabled = false;\n        this.suggestions = [];\n        this.adapter = adapter;\n        this.threadId = generateId();\n        this.options = options;\n        if (initialMessages) {\n            let parentId = null;\n            const messages2 = fromCoreMessages(initialMessages);\n            for (const message of messages2){\n                this.repository.addOrUpdateMessage(parentId, message);\n                parentId = message.id;\n            }\n        }\n    }\n    get adapters() {\n        return this.options.adapters;\n    }\n    get options() {\n        return this._options;\n    }\n    get extras() {\n        return void 0;\n    }\n    set options({ initialMessages, ...options }) {\n        this._options = options;\n        let hasUpdates = false;\n        const canSpeak = options.adapters?.speech !== void 0;\n        if (this.capabilities.speech !== canSpeak) {\n            this.capabilities.speech = canSpeak;\n            hasUpdates = true;\n        }\n        const canAttach = options.adapters?.attachments !== void 0;\n        if (this.capabilities.attachments !== canAttach) {\n            this.capabilities.attachments = canAttach;\n            hasUpdates = true;\n        }\n        const canFeedback = options.adapters?.feedback !== void 0;\n        if (this.capabilities.feedback !== canFeedback) {\n            this.capabilities.feedback = canFeedback;\n            hasUpdates = true;\n        }\n        if (hasUpdates) this._notifySubscribers();\n    }\n    async append(message) {\n        const newMessage = fromCoreMessage(message, {\n            attachments: message.attachments\n        });\n        this.repository.addOrUpdateMessage(message.parentId, newMessage);\n        if (message.role === \"user\") {\n            await this.startRun(newMessage.id);\n        } else {\n            this.repository.resetHead(newMessage.id);\n            this._notifySubscribers();\n        }\n    }\n    async startRun(parentId) {\n        this.repository.resetHead(parentId);\n        const id = generateId();\n        let message = {\n            id,\n            role: \"assistant\",\n            status: {\n                type: \"running\"\n            },\n            content: [],\n            createdAt: /* @__PURE__ */ new Date()\n        };\n        this._notifyEventSubscribers(\"run-start\");\n        do {\n            message = await this.performRoundtrip(parentId, message);\n        }while (shouldContinue(message));\n    }\n    async performRoundtrip(parentId, message) {\n        const messages2 = this.repository.getMessages();\n        this.abortController?.abort();\n        this.abortController = new AbortController();\n        const initialContent = message.content;\n        const initialSteps = message.metadata?.steps;\n        const initalCustom = message.metadata?.custom;\n        const updateMessage = (m)=>{\n            const newSteps = m.metadata?.steps || m.metadata?.roundtrips;\n            const steps2 = newSteps ? [\n                ...initialSteps ?? [],\n                ...newSteps\n            ] : void 0;\n            message = {\n                ...message,\n                ...m.content ? {\n                    content: [\n                        ...initialContent,\n                        ...m.content ?? []\n                    ]\n                } : void 0,\n                status: m.status ?? message.status,\n                // TODO deprecated, remove in v0.6\n                ...steps2 ? {\n                    roundtrips: steps2\n                } : void 0,\n                ...m.metadata ? {\n                    metadata: {\n                        ...message.metadata,\n                        ...steps2 ? {\n                            roundtrips: steps2,\n                            steps: steps2\n                        } : void 0,\n                        ...m.metadata?.custom ? {\n                            custom: {\n                                ...initalCustom ?? {},\n                                ...m.metadata.custom\n                            }\n                        } : void 0\n                    }\n                } : void 0\n            };\n            this.repository.addOrUpdateMessage(parentId, message);\n            this._notifySubscribers();\n        };\n        const maxSteps = this.options.maxSteps ? this.options.maxSteps : (this.options.maxToolRoundtrips ?? 1) + 1;\n        const steps = message.metadata?.steps?.length ?? 0;\n        if (steps >= maxSteps) {\n            updateMessage({\n                status: {\n                    type: \"incomplete\",\n                    reason: \"tool-calls\"\n                }\n            });\n            return message;\n        } else {\n            updateMessage({\n                status: {\n                    type: \"running\"\n                }\n            });\n        }\n        try {\n            const promiseOrGenerator = this.adapter.run({\n                messages: messages2,\n                abortSignal: this.abortController.signal,\n                config: this.getModelConfig(),\n                onUpdate: updateMessage\n            });\n            if (Symbol.asyncIterator in promiseOrGenerator) {\n                for await (const r of promiseOrGenerator){\n                    updateMessage(r);\n                }\n            } else {\n                updateMessage(await promiseOrGenerator);\n            }\n            this.abortController = null;\n            if (message.status.type === \"running\") {\n                updateMessage({\n                    status: {\n                        type: \"complete\",\n                        reason: \"unknown\"\n                    }\n                });\n            }\n        } catch (e) {\n            this.abortController = null;\n            if (e instanceof Error && e.name === \"AbortError\") {\n                updateMessage({\n                    status: {\n                        type: \"incomplete\",\n                        reason: \"cancelled\"\n                    }\n                });\n            } else {\n                updateMessage({\n                    status: {\n                        type: \"incomplete\",\n                        reason: \"error\",\n                        error: e\n                    }\n                });\n                throw e;\n            }\n        }\n        return message;\n    }\n    cancelRun() {\n        this.abortController?.abort();\n        this.abortController = null;\n    }\n    addToolResult({ messageId, toolCallId, result }) {\n        const messageData = this.repository.getMessage(messageId);\n        const { parentId } = messageData;\n        let { message } = messageData;\n        if (message.role !== \"assistant\") throw new Error(\"Tried to add tool result to non-assistant message\");\n        let added = false;\n        let found = false;\n        const newContent = message.content.map((c)=>{\n            if (c.type !== \"tool-call\") return c;\n            if (c.toolCallId !== toolCallId) return c;\n            found = true;\n            if (!c.result) added = true;\n            return {\n                ...c,\n                result\n            };\n        });\n        if (!found) throw new Error(\"Tried to add tool result to non-existing tool call\");\n        message = {\n            ...message,\n            content: newContent\n        };\n        this.repository.addOrUpdateMessage(parentId, message);\n        if (added && shouldContinue(message)) {\n            this.performRoundtrip(parentId, message);\n        }\n    }\n};\n// src/runtimes/local/LocalRuntimeCore.tsx\nvar LocalRuntimeCore = class extends BaseAssistantRuntimeCore {\n    constructor(adapter, options){\n        const proxyConfigProvider = new ProxyConfigProvider();\n        super(new LocalThreadRuntimeCore(proxyConfigProvider, adapter, options));\n        this._proxyConfigProvider = proxyConfigProvider;\n    }\n    registerModelConfigProvider(provider) {\n        return this._proxyConfigProvider.registerModelConfigProvider(provider);\n    }\n    switchToNewThread() {\n        const { initialMessages, ...options } = this.thread.options;\n        this.thread = new LocalThreadRuntimeCore(this._proxyConfigProvider, this.thread.adapter, options);\n        this.thread._notifyEventSubscribers(\"switched-to\");\n    }\n    switchToThread(threadId) {\n        if (threadId !== null) {\n            throw new Error(\"LocalRuntime does not yet support switching threads\");\n        }\n        this.switchToNewThread();\n    }\n    reset({ initialMessages } = {}) {\n        this.switchToThread(null);\n        if (!initialMessages) return;\n        const messages2 = fromCoreMessages(initialMessages);\n        this.thread.import({\n            messages: messages2.map((m, idx)=>({\n                    parentId: messages2[idx - 1]?.id ?? null,\n                    message: m\n                }))\n        });\n    }\n};\n// src/runtimes/local/useLocalRuntime.tsx\nvar LocalRuntimeImpl = class _LocalRuntimeImpl extends AssistantRuntimeImpl {\n    constructor(core, thread){\n        super(core, thread);\n        this.core = core;\n    }\n    reset(options) {\n        this.core.reset(options);\n    }\n    static create(_core) {\n        return new _LocalRuntimeImpl(_core, AssistantRuntimeImpl.createMainThreadRuntime(_core, ThreadRuntimeImpl));\n    }\n};\nvar useLocalRuntime = (adapter, options = {})=>{\n    const [runtime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new LocalRuntimeCore(adapter, options));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useInsertionEffect)(()=>{\n        runtime.thread.adapter = adapter;\n        runtime.thread.options = options;\n    });\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>LocalRuntimeImpl.create(runtime), [\n        runtime\n    ]);\n};\n// src/runtimes/external-store/useExternalStoreRuntime.tsx\n\n// src/runtimes/external-store/getExternalStoreMessage.tsx\nvar symbolInnerMessage = Symbol(\"innerMessage\");\nvar getExternalStoreMessage = (message)=>{\n    return message[symbolInnerMessage];\n};\n// src/runtimes/external-store/ThreadMessageConverter.ts\nvar ThreadMessageConverter = class {\n    convertMessages(messages2, converter) {\n        return messages2.map((m, idx)=>{\n            const cached = this.cache.get(m);\n            const newMessage = converter(cached, m, idx);\n            this.cache.set(m, newMessage);\n            return newMessage;\n        });\n    }\n    constructor(){\n        this.cache = /* @__PURE__ */ new WeakMap();\n    }\n};\n// src/runtimes/external-store/auto-status.tsx\nvar AUTO_STATUS_RUNNING = Object.freeze({\n    type: \"running\"\n});\nvar AUTO_STATUS_COMPLETE = Object.freeze({\n    type: \"complete\",\n    reason: \"unknown\"\n});\nvar isAutoStatus = (status)=>status === AUTO_STATUS_RUNNING || status === AUTO_STATUS_COMPLETE;\nvar getAutoStatus = (isLast, isRunning)=>isLast && isRunning ? AUTO_STATUS_RUNNING : AUTO_STATUS_COMPLETE;\n// src/runtimes/external-store/ThreadMessageLike.tsx\nvar fromThreadMessageLike = (like, fallbackId, fallbackStatus)=>{\n    const { role, id, createdAt, attachments, status } = like;\n    const common = {\n        id: id ?? fallbackId,\n        createdAt: createdAt ?? /* @__PURE__ */ new Date()\n    };\n    const content = typeof like.content === \"string\" ? [\n        {\n            type: \"text\",\n            text: like.content\n        }\n    ] : like.content;\n    if (role !== \"user\" && attachments) throw new Error(\"Attachments are only supported for user messages\");\n    switch(role){\n        case \"assistant\":\n            return {\n                ...common,\n                role,\n                content: content.map((part)=>{\n                    const type = part.type;\n                    switch(type){\n                        case \"text\":\n                            if (part.text.trim().length === 0) return null;\n                            return part;\n                        case \"ui\":\n                            return part;\n                        case \"tool-call\":\n                            {\n                                if (\"argsText\" in part) return part;\n                                return {\n                                    ...part,\n                                    argsText: JSON.stringify(part.args)\n                                };\n                            }\n                        default:\n                            {\n                                const unhandledType = type;\n                                throw new Error(`Unknown content part type: ${unhandledType}`);\n                            }\n                    }\n                }).filter((c)=>!!c),\n                status: status ?? fallbackStatus\n            };\n        case \"user\":\n            return {\n                ...common,\n                role,\n                content: content.map((part)=>{\n                    const type = part.type;\n                    switch(type){\n                        case \"text\":\n                        case \"ui\":\n                        case \"image\":\n                            return part;\n                        default:\n                            {\n                                const unhandledType = type;\n                                throw new Error(`Unknown content part type: ${unhandledType}`);\n                            }\n                    }\n                }),\n                attachments: attachments ?? []\n            };\n        case \"system\":\n            if (content.length !== 1 || content[0].type !== \"text\") throw new Error(\"System messages must have exactly one text content part.\");\n            return {\n                ...common,\n                role,\n                content\n            };\n        default:\n            {\n                const unsupportedRole = role;\n                throw new Error(`Unknown message role: ${unsupportedRole}`);\n            }\n    }\n};\n// src/runtimes/external-store/ExternalStoreThreadRuntimeCore.tsx\nvar EMPTY_ARRAY2 = Object.freeze([]);\nvar hasUpcomingMessage = (isRunning, messages2)=>{\n    return isRunning && messages2[messages2.length - 1]?.role !== \"assistant\";\n};\nvar ExternalStoreThreadRuntimeCore = class extends BaseThreadRuntimeCore {\n    get capabilities() {\n        return this._capabilities;\n    }\n    get messages() {\n        return this._messages;\n    }\n    get adapters() {\n        return this._store.adapters;\n    }\n    beginEdit(messageId) {\n        if (!this.store.onEdit) throw new Error(\"Runtime does not support editing.\");\n        super.beginEdit(messageId);\n    }\n    constructor(configProvider, store){\n        super(configProvider);\n        this.assistantOptimisticId = null;\n        this._capabilities = {\n            switchToBranch: false,\n            edit: false,\n            reload: false,\n            cancel: false,\n            unstable_copy: false,\n            speech: false,\n            attachments: false,\n            feedback: false\n        };\n        this.suggestions = [];\n        this.extras = void 0;\n        this._converter = new ThreadMessageConverter();\n        this.updateMessages = (messages2)=>{\n            this._store.setMessages?.(messages2.flatMap(getExternalStoreMessage).filter((m)=>m != null));\n        };\n        this.store = store;\n    }\n    get store() {\n        return this._store;\n    }\n    set store(store) {\n        if (this._store === store) return;\n        this.threadId = store.threadId ?? this.threadId ?? generateId();\n        const isRunning = store.isRunning ?? false;\n        this.isDisabled = store.isDisabled ?? false;\n        const oldStore = this._store;\n        this._store = store;\n        this.extras = store.extras;\n        this.suggestions = store.suggestions ?? EMPTY_ARRAY2;\n        this._capabilities = {\n            switchToBranch: this._store.setMessages !== void 0,\n            edit: this._store.onEdit !== void 0,\n            reload: this._store.onReload !== void 0,\n            cancel: this._store.onCancel !== void 0,\n            speech: this._store.adapters?.speech !== void 0,\n            unstable_copy: this._store.unstable_capabilities?.copy !== false,\n            // default true\n            attachments: !!this.store.adapters?.attachments,\n            feedback: !!this.store.adapters?.feedback\n        };\n        if (oldStore) {\n            if (oldStore.convertMessage !== store.convertMessage) {\n                this._converter = new ThreadMessageConverter();\n            } else if (oldStore.isRunning === store.isRunning && oldStore.messages === store.messages) {\n                this._notifySubscribers();\n                return;\n            }\n        }\n        const messages2 = !store.convertMessage ? store.messages : this._converter.convertMessages(store.messages, (cache, m, idx)=>{\n            if (!store.convertMessage) return m;\n            const isLast = idx === store.messages.length - 1;\n            const autoStatus = getAutoStatus(isLast, isRunning);\n            if (cache && (cache.role !== \"assistant\" || !isAutoStatus(cache.status) || cache.status === autoStatus)) return cache;\n            const newMessage = fromThreadMessageLike(store.convertMessage(m, idx), idx.toString(), autoStatus);\n            newMessage[symbolInnerMessage] = m;\n            return newMessage;\n        });\n        for(let i = 0; i < messages2.length; i++){\n            const message = messages2[i];\n            const parent = messages2[i - 1];\n            this.repository.addOrUpdateMessage(parent?.id ?? null, message);\n        }\n        if (this.assistantOptimisticId) {\n            this.repository.deleteMessage(this.assistantOptimisticId);\n            this.assistantOptimisticId = null;\n        }\n        if (hasUpcomingMessage(isRunning, messages2)) {\n            this.assistantOptimisticId = this.repository.appendOptimisticMessage(messages2.at(-1)?.id ?? null, {\n                role: \"assistant\",\n                content: []\n            });\n        }\n        this.repository.resetHead(this.assistantOptimisticId ?? messages2.at(-1)?.id ?? null);\n        this._messages = this.repository.getMessages();\n        this._notifySubscribers();\n    }\n    switchToBranch(branchId) {\n        if (!this._store.setMessages) throw new Error(\"Runtime does not support switching branches.\");\n        this.repository.switchToBranch(branchId);\n        this.updateMessages(this.repository.getMessages());\n    }\n    async append(message) {\n        if (message.parentId !== (this.messages.at(-1)?.id ?? null)) {\n            if (!this._store.onEdit) throw new Error(\"Runtime does not support editing messages.\");\n            await this._store.onEdit(message);\n        } else {\n            await this._store.onNew(message);\n        }\n    }\n    async startRun(parentId) {\n        if (!this._store.onReload) throw new Error(\"Runtime does not support reloading messages.\");\n        await this._store.onReload(parentId);\n    }\n    cancelRun() {\n        if (!this._store.onCancel) throw new Error(\"Runtime does not support cancelling runs.\");\n        this._store.onCancel();\n        if (this.assistantOptimisticId) {\n            this.repository.deleteMessage(this.assistantOptimisticId);\n            this.assistantOptimisticId = null;\n        }\n        let messages2 = this.repository.getMessages();\n        const previousMessage = messages2[messages2.length - 1];\n        if (previousMessage?.role === \"user\" && previousMessage.id === messages2.at(-1)?.id) {\n            this.repository.deleteMessage(previousMessage.id);\n            if (!this.composer.text.trim()) {\n                this.composer.setText(getThreadMessageText(previousMessage));\n            }\n            messages2 = this.repository.getMessages();\n        } else {\n            this._notifySubscribers();\n        }\n        setTimeout(()=>{\n            this.updateMessages(messages2);\n        }, 0);\n    }\n    addToolResult(options) {\n        if (!this._store.onAddToolResult) throw new Error(\"Runtime does not support tool results.\");\n        this._store.onAddToolResult(options);\n    }\n};\n// src/runtimes/external-store/ExternalStoreRuntimeCore.tsx\nvar ExternalStoreRuntimeCore = class extends BaseAssistantRuntimeCore {\n    constructor(store){\n        const provider = new ProxyConfigProvider();\n        super(new ExternalStoreThreadRuntimeCore(provider, store));\n        this._proxyConfigProvider = provider;\n    }\n    getModelConfig() {\n        return this._proxyConfigProvider.getModelConfig();\n    }\n    registerModelConfigProvider(provider) {\n        return this._proxyConfigProvider.registerModelConfigProvider(provider);\n    }\n    async switchToNewThread() {\n        if (!this.thread.store.onSwitchToNewThread) throw new Error(\"Runtime does not support switching to new threads.\");\n        this.thread = new ExternalStoreThreadRuntimeCore(this._proxyConfigProvider, {\n            ...this.thread.store,\n            messages: []\n        });\n        await this.thread.store.onSwitchToNewThread();\n        this.thread._notifyEventSubscribers(\"switched-to\");\n    }\n    async switchToThread(threadId) {\n        if (threadId !== null) {\n            if (!this.thread.store.onSwitchToThread) throw new Error(\"Runtime does not support switching threads.\");\n            this.thread = new ExternalStoreThreadRuntimeCore(this._proxyConfigProvider, {\n                ...this.thread.store,\n                messages: []\n            });\n            await this.thread.store.onSwitchToThread(threadId);\n            this.thread._notifyEventSubscribers(\"switched-to\");\n        } else {\n            this.switchToNewThread();\n        }\n    }\n};\n// src/runtimes/external-store/useExternalStoreRuntime.tsx\nvar useExternalStoreRuntime = (store)=>{\n    const [runtime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new ExternalStoreRuntimeCore(store));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        runtime.thread.store = store;\n    });\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>AssistantRuntimeImpl.create(runtime, ThreadRuntimeImpl), [\n        runtime\n    ]);\n};\n// src/runtimes/external-store/external-message-converter.tsx\n\nvar joinExternalMessages = (messages2)=>{\n    const assistantMessage = {\n        role: \"assistant\",\n        content: []\n    };\n    for (const output of messages2){\n        if (output.role === \"tool\") {\n            const toolCallIdx = assistantMessage.content.findIndex((c)=>c.type === \"tool-call\" && c.toolCallId === output.toolCallId);\n            if (toolCallIdx !== -1) {\n                const toolCall = assistantMessage.content[toolCallIdx];\n                if (output.toolName) {\n                    if (toolCall.toolName !== output.toolName) throw new Error(`Tool call name ${output.toolCallId} ${output.toolName} does not match existing tool call ${toolCall.toolName}`);\n                }\n                assistantMessage.content[toolCallIdx] = {\n                    ...toolCall,\n                    result: output.result\n                };\n            } else {\n                throw new Error(`Tool call ${output.toolCallId} ${output.toolName} not found in assistant message`);\n            }\n        } else {\n            const role = output.role;\n            switch(role){\n                case \"system\":\n                case \"user\":\n                    return output;\n                case \"assistant\":\n                    if (assistantMessage.content.length === 0) {\n                        assistantMessage.id = output.id;\n                        assistantMessage.createdAt ??= output.createdAt;\n                        assistantMessage.status ??= output.status;\n                    }\n                    assistantMessage.content.push(...output.content);\n                    break;\n                default:\n                    {\n                        const unsupportedRole = role;\n                        throw new Error(`Unknown message role: ${unsupportedRole}`);\n                    }\n            }\n        }\n    }\n    return assistantMessage;\n};\nvar chunkExternalMessages = (callbackResults)=>{\n    const results = [];\n    let isAssistant = false;\n    let inputs = [];\n    let outputs = [];\n    const flush = ()=>{\n        if (outputs.length) {\n            results.push({\n                inputs,\n                outputs\n            });\n        }\n        inputs = [];\n        outputs = [];\n    };\n    for (const callbackResult of callbackResults){\n        for (const output of callbackResult.outputs){\n            if (!isAssistant || output.role === \"user\" || output.role === \"system\") {\n                flush();\n            }\n            isAssistant = output.role === \"assistant\" || output.role === \"tool\";\n            if (inputs.at(-1) !== callbackResult.input) {\n                inputs.push(callbackResult.input);\n            }\n            outputs.push(output);\n        }\n    }\n    flush();\n    return results;\n};\nvar useExternalMessageConverter = ({ callback, messages: messages2, isRunning })=>{\n    const state = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            callback,\n            callbackCache: /* @__PURE__ */ new WeakMap(),\n            chunkCache: /* @__PURE__ */ new WeakMap(),\n            converterCache: new ThreadMessageConverter()\n        }), [\n        callback\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const callbackResults = [];\n        for (const message of messages2){\n            let result = state.callbackCache.get(message);\n            if (!result) {\n                const output = state.callback(message);\n                const outputs = Array.isArray(output) ? output : [\n                    output\n                ];\n                result = {\n                    input: message,\n                    outputs\n                };\n                state.callbackCache.set(message, result);\n            }\n            callbackResults.push(result);\n        }\n        const chunks = chunkExternalMessages(callbackResults).map((m)=>{\n            const key = m.outputs[0];\n            if (!key) return m;\n            const cached = state.chunkCache.get(key);\n            if (cached && shallowArrayEqual(cached.outputs, m.outputs)) return cached;\n            state.chunkCache.set(key, m);\n            return m;\n        });\n        return state.converterCache.convertMessages(chunks, (cache, message, idx)=>{\n            const isLast = idx === chunks.length - 1;\n            const autoStatus = getAutoStatus(isLast, isRunning);\n            if (cache && (cache.role !== \"assistant\" || !isAutoStatus(cache.status) || cache.status === autoStatus)) {\n                const inputs = getExternalStoreMessage(cache);\n                if (shallowArrayEqual(inputs, message.inputs)) {\n                    return cache;\n                }\n            }\n            const newMessage = fromThreadMessageLike(joinExternalMessages(message.outputs), idx.toString(), autoStatus);\n            newMessage[symbolInnerMessage] = message.inputs;\n            return newMessage;\n        });\n    }, [\n        state,\n        messages2,\n        isRunning\n    ]);\n};\nvar shallowArrayEqual = (a, b)=>{\n    if (a.length !== b.length) return false;\n    for(let i = 0; i < a.length; i++){\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n};\n// src/runtimes/dangerous-in-browser/useDangerousInBrowserRuntime.ts\n\n// src/runtimes/dangerous-in-browser/DangerousInBrowserAdapter.ts\nvar DangerousInBrowserAdapter = class {\n    constructor(options){\n        this.options = options;\n    }\n    async *run({ messages: messages2, abortSignal, config }) {\n        const res = await (0,_chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.getEdgeRuntimeStream)({\n            options: this.options,\n            abortSignal,\n            requestData: {\n                system: config.system,\n                messages: (0,_chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.toCoreMessages)(messages2),\n                tools: config.tools ? (0,_chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.toLanguageModelTools)(config.tools) : [],\n                ...config.callSettings,\n                ...config.config\n            }\n        });\n        const stream = res.pipeThrough((0,_chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.toolResultStream)(config.tools, abortSignal)).pipeThrough((0,_chunk_TWIMAOZR_mjs__WEBPACK_IMPORTED_MODULE_12__.runResultStream)());\n        for await (const update of asAsyncIterable(stream)){\n            yield update;\n        }\n    }\n};\n// src/runtimes/dangerous-in-browser/useDangerousInBrowserRuntime.ts\nvar useDangerousInBrowserRuntime = (options)=>{\n    const { localRuntimeOptions, otherOptions } = splitLocalRuntimeOptions(options);\n    const [adapter] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new DangerousInBrowserAdapter(otherOptions));\n    return useLocalRuntime(adapter, localRuntimeOptions);\n};\n// src/runtimes/speech/WebSpeechSynthesisAdapter.ts\nvar WebSpeechSynthesisAdapter = class {\n    speak(text) {\n        const utterance = new SpeechSynthesisUtterance(text);\n        const subscribers = /* @__PURE__ */ new Set();\n        const handleEnd = (reason, error)=>{\n            if (res.status.type === \"ended\") return;\n            res.status = {\n                type: \"ended\",\n                reason,\n                error\n            };\n            subscribers.forEach((handler)=>handler());\n        };\n        utterance.addEventListener(\"end\", ()=>handleEnd(\"finished\"));\n        utterance.addEventListener(\"error\", (e)=>handleEnd(\"error\", e.error));\n        window.speechSynthesis.speak(utterance);\n        const res = {\n            status: {\n                type: \"running\"\n            },\n            cancel: ()=>{\n                window.speechSynthesis.cancel();\n                handleEnd(\"cancelled\");\n            },\n            subscribe: (callback)=>{\n                if (res.status.type === \"ended\") {\n                    let cancelled = false;\n                    queueMicrotask(()=>{\n                        if (!cancelled) callback();\n                    });\n                    return ()=>{\n                        cancelled = true;\n                    };\n                } else {\n                    subscribers.add(callback);\n                    return ()=>{\n                        subscribers.delete(callback);\n                    };\n                }\n            }\n        };\n        return res;\n    }\n};\n// src/runtimes/attachment/SimpleImageAttachmentAdapter.ts\nvar SimpleImageAttachmentAdapter = class {\n    async add(state) {\n        return {\n            id: state.file.name,\n            type: \"image\",\n            name: state.file.name,\n            contentType: state.file.type,\n            file: state.file,\n            status: {\n                type: \"requires-action\",\n                reason: \"composer-send\"\n            }\n        };\n    }\n    async send(attachment) {\n        return {\n            ...attachment,\n            status: {\n                type: \"complete\"\n            },\n            content: [\n                {\n                    type: \"image\",\n                    image: await getFileDataURL(attachment.file)\n                }\n            ]\n        };\n    }\n    async remove() {}\n    constructor(){\n        this.accept = \"image/*\";\n    }\n};\nvar getFileDataURL = (file)=>new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = ()=>resolve(reader.result);\n        reader.onerror = (error)=>reject(error);\n        reader.readAsDataURL(file);\n    });\n// src/runtimes/attachment/SimpleTextAttachmentAdapter.ts\nvar SimpleTextAttachmentAdapter = class {\n    async add(state) {\n        return {\n            id: state.file.name,\n            type: \"document\",\n            name: state.file.name,\n            contentType: state.file.type,\n            file: state.file,\n            status: {\n                type: \"requires-action\",\n                reason: \"composer-send\"\n            }\n        };\n    }\n    async send(attachment) {\n        return {\n            ...attachment,\n            status: {\n                type: \"complete\"\n            },\n            content: [\n                {\n                    type: \"text\",\n                    text: `<attachment name=${attachment.name}>\n${await getFileText(attachment.file)}\n</attachment>`\n                }\n            ]\n        };\n    }\n    async remove() {}\n    constructor(){\n        this.accept = \"text/plain,text/html,text/markdown,text/csv,text/xml,text/json,text/css\";\n    }\n};\nvar getFileText = (file)=>new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = ()=>resolve(reader.result);\n        reader.onerror = (error)=>reject(error);\n        reader.readAsText(file);\n    });\n// src/runtimes/attachment/CompositeAttachmentAdapter.ts\nfunction fileMatchesAccept(file, acceptString) {\n    if (acceptString === \"*\") {\n        return true;\n    }\n    const allowedTypes = acceptString.split(\",\").map((type)=>type.trim().toLowerCase());\n    const fileExtension = \".\" + file.name.split(\".\").pop().toLowerCase();\n    const fileMimeType = file.type.toLowerCase();\n    for (const type of allowedTypes){\n        if (type.startsWith(\".\") && type === fileExtension) {\n            return true;\n        }\n        if (type.includes(\"/\") && type === fileMimeType) {\n            return true;\n        }\n        if (type === \"image/*\" || type === \"video/*\" || type === \"audio/*\") {\n            if (type.endsWith(\"/*\")) {\n                const generalType = type.split(\"/\")[0];\n                if (fileMimeType.startsWith(generalType + \"/\")) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nvar CompositeAttachmentAdapter = class {\n    constructor(adapters){\n        this._adapters = adapters;\n        const wildcardIdx = adapters.findIndex((a)=>a.accept === \"*\");\n        if (wildcardIdx !== -1) {\n            if (wildcardIdx !== adapters.length - 1) throw new Error(\"A wildcard adapter (handling all files) can only be specified as the last adapter.\");\n            this.accept = \"*\";\n        } else {\n            this.accept = adapters.map((a)=>a.accept).join(\",\");\n        }\n    }\n    async add(state) {\n        for (const adapter of this._adapters){\n            if (fileMatchesAccept(state.file, adapter.accept)) {\n                return adapter.add(state);\n            }\n        }\n        throw new Error(\"No matching adapter found for file\");\n    }\n    async send(attachment) {\n        const adapters = this._adapters.slice();\n        for (const adapter of adapters){\n            if (fileMatchesAccept(attachment.file, adapter.accept)) {\n                return adapter.send(attachment);\n            }\n        }\n        throw new Error(\"No matching adapter found for attachment\");\n    }\n    async remove(attachment) {\n        const adapters = this._adapters.slice();\n        for (const adapter of adapters){\n            if (fileMatchesAccept({\n                name: attachment.name,\n                type: attachment.contentType ?? \"unknown/unknown\"\n            }, adapter.accept)) {\n                return adapter.remove(attachment);\n            }\n        }\n        throw new Error(\"No matching adapter found for attachment\");\n    }\n};\n// src/ui/thread-config.tsx\n\n\nvar ThreadConfigContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nvar useThreadConfig = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThreadConfigContext);\n};\nvar ThreadConfigProvider = ({ children, config })=>{\n    const hasAssistant = !!useAssistantRuntime({\n        optional: true\n    });\n    const configProvider = config && Object.keys(config ?? {}).length > 0 ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadConfigContext.Provider, {\n        value: config,\n        children\n    }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n        children\n    });\n    if (!config?.runtime) return configProvider;\n    if (hasAssistant) {\n        throw new Error(\"You provided a runtime to <Thread> while simulataneously using <AssistantRuntimeProvider>. This is not allowed.\");\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantRuntimeProvider, {\n        runtime: config.runtime,\n        children: configProvider\n    });\n};\nThreadConfigProvider.displayName = \"ThreadConfigProvider\";\n// src/ui/assistant-action-bar.tsx\n\n\n\nvar useAllowCopy = (ensureCapability = false)=>{\n    const { assistantMessage: { allowCopy = true } = {} } = useThreadConfig();\n    const copySupported = useThread((t)=>t.capabilities.unstable_copy);\n    return allowCopy && (!ensureCapability || copySupported);\n};\nvar useAllowSpeak = (ensureCapability = false)=>{\n    const { assistantMessage: { allowSpeak = true } = {} } = useThreadConfig();\n    const speechSupported = useThread((t)=>t.capabilities.speech);\n    return allowSpeak && (!ensureCapability || speechSupported);\n};\nvar useAllowReload = (ensureCapability = false)=>{\n    const { assistantMessage: { allowReload = true } = {} } = useThreadConfig();\n    const reloadSupported = useThread((t)=>t.capabilities.reload);\n    return allowReload && (!ensureCapability || reloadSupported);\n};\nvar useAllowFeedbackPositive = (ensureCapability = false)=>{\n    const { assistantMessage: { allowFeedbackPositive = true } = {} } = useThreadConfig();\n    const feedbackSupported = useThread((t)=>t.capabilities.feedback);\n    return allowFeedbackPositive && (!ensureCapability || feedbackSupported);\n};\nvar useAllowFeedbackNegative = (ensureCapability = false)=>{\n    const { assistantMessage: { allowFeedbackNegative = true } = {} } = useThreadConfig();\n    const feedbackSupported = useThread((t)=>t.capabilities.feedback);\n    return allowFeedbackNegative && (!ensureCapability || feedbackSupported);\n};\nvar AssistantActionBar = ()=>{\n    const allowCopy = useAllowCopy(true);\n    const allowReload = useAllowReload(true);\n    const allowSpeak = useAllowSpeak(true);\n    const allowFeedbackPositive = useAllowFeedbackPositive(true);\n    const allowFeedbackNegative = useAllowFeedbackNegative(true);\n    if (!allowCopy && !allowReload && !allowSpeak && !allowFeedbackPositive && !allowFeedbackNegative) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(AssistantActionBarRoot, {\n        hideWhenRunning: true,\n        autohide: \"not-last\",\n        autohideFloat: \"single-branch\",\n        children: [\n            allowSpeak && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantActionBarSpeechControl, {}),\n            allowCopy && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantActionBarCopy, {}),\n            allowReload && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantActionBarReload, {}),\n            allowFeedbackPositive && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantActionBarFeedbackPositive, {}),\n            allowFeedbackNegative && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantActionBarFeedbackNegative, {})\n        ]\n    });\n};\nAssistantActionBar.displayName = \"AssistantActionBar\";\nvar AssistantActionBarRoot = withDefaults(actionBar_exports.Root, {\n    className: \"aui-assistant-action-bar-root\"\n});\nAssistantActionBarRoot.displayName = \"AssistantActionBarRoot\";\nvar AssistantActionBarCopy = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ copiedDuration, ...props }, ref)=>{\n    const { strings: { assistantMessage: { copy: { tooltip = \"Copy\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(actionBar_exports.Copy, {\n        copiedDuration,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(message_exports.If, {\n                        copied: true,\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_17__[\"default\"], {})\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(message_exports.If, {\n                        copied: false,\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {})\n                    })\n                ]\n            })\n        })\n    });\n});\nAssistantActionBarCopy.displayName = \"AssistantActionBarCopy\";\nvar AssistantActionBarSpeechControl = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(message_exports.If, {\n                speaking: false,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantActionBarSpeak, {})\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(message_exports.If, {\n                speaking: true,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantActionBarStopSpeaking, {})\n            })\n        ]\n    });\n};\nvar AssistantActionBarSpeak = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { assistantMessage: { speak: { tooltip = \"Read aloud\" } = {} } = {} } = {} } = useThreadConfig();\n    const allowSpeak = useAllowSpeak();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(actionBar_exports.Speak, {\n        disabled: !allowSpeak,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {})\n        })\n    });\n});\nAssistantActionBarSpeak.displayName = \"AssistantActionBarSpeak\";\nvar AssistantActionBarStopSpeaking = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { assistantMessage: { speak: { stop: { tooltip: stopTooltip = \"Stop\" } = {} } = {} } = {} } = {} } = useThreadConfig();\n    const allowSpeak = useAllowSpeak();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(actionBar_exports.StopSpeaking, {\n        disabled: !allowSpeak,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipIconButton, {\n            tooltip: stopTooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {})\n        })\n    });\n});\nAssistantActionBarStopSpeaking.displayName = \"AssistantActionBarStopSpeaking\";\nvar AssistantActionBarReload = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { assistantMessage: { reload: { tooltip = \"Refresh\" } = {} } = {} } = {} } = useThreadConfig();\n    const allowReload = useAllowReload();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(actionBar_exports.Reload, {\n        disabled: !allowReload,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {})\n        })\n    });\n});\nAssistantActionBarReload.displayName = \"AssistantActionBarReload\";\nvar AssistantActionBarFeedbackPositive = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { assistantMessage: { feedback: { positive: { tooltip = \"Good response\" } = {} } = {} } = {} } = {} } = useThreadConfig();\n    const allowFeedbackPositive = useAllowFeedbackPositive();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(actionBar_exports.FeedbackPositive, {\n        disabled: !allowFeedbackPositive,\n        className: \"aui-assistant-action-bar-feedback-positive\",\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_22__[\"default\"], {})\n        })\n    });\n});\nAssistantActionBarFeedbackPositive.displayName = \"AssistantActionBarFeedbackPositive\";\nvar AssistantActionBarFeedbackNegative = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { assistantMessage: { feedback: { negative: { tooltip = \"Bad response\" } = {} } = {} } = {} } = {} } = useThreadConfig();\n    const allowFeedbackNegative = useAllowFeedbackNegative();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(actionBar_exports.FeedbackNegative, {\n        disabled: !allowFeedbackNegative,\n        className: \"aui-assistant-action-bar-feedback-negative\",\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_ThumbsDownIcon_ThumbsUpIcon_lucide_react__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {})\n        })\n    });\n});\nAssistantActionBarFeedbackNegative.displayName = \"AssistantActionBarFeedbackNegative\";\nvar exports = {\n    Root: AssistantActionBarRoot,\n    Reload: AssistantActionBarReload,\n    Copy: AssistantActionBarCopy,\n    Speak: AssistantActionBarSpeak,\n    StopSpeaking: AssistantActionBarStopSpeaking,\n    SpeechControl: AssistantActionBarSpeechControl,\n    FeedbackPositive: AssistantActionBarFeedbackPositive,\n    FeedbackNegative: AssistantActionBarFeedbackNegative\n};\nvar assistant_action_bar_default = Object.assign(AssistantActionBar, exports);\n// src/ui/assistant-message.tsx\n\n// src/ui/branch-picker.tsx\n\n\n\nvar useAllowBranchPicker = (ensureCapability = false)=>{\n    const { branchPicker: { allowBranchPicker = true } = {} } = useThreadConfig();\n    const branchPickerSupported = useThread((t)=>t.capabilities.edit);\n    return allowBranchPicker && (!ensureCapability || branchPickerSupported);\n};\nvar BranchPicker = ()=>{\n    const allowBranchPicker = useAllowBranchPicker(true);\n    if (!allowBranchPicker) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(BranchPickerRoot, {\n        hideWhenSingleBranch: true,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BranchPickerPrevious, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BranchPickerState, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BranchPickerNext, {})\n        ]\n    });\n};\nBranchPicker.displayName = \"BranchPicker\";\nvar BranchPickerRoot = withDefaults(branchPicker_exports.Root, {\n    className: \"aui-branch-picker-root\"\n});\nBranchPickerRoot.displayName = \"BranchPickerRoot\";\nvar BranchPickerPrevious = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { branchPicker: { previous: { tooltip = \"Previous\" } = {} } = {} } = {} } = useThreadConfig();\n    const allowBranchPicker = useAllowBranchPicker();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(branchPicker_exports.Previous, {\n        disabled: !allowBranchPicker,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_ChevronLeftIcon_ChevronRightIcon_lucide_react__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {})\n        })\n    });\n});\nBranchPickerPrevious.displayName = \"BranchPickerPrevious\";\nvar BranchPickerStateWrapper = withDefaults(\"span\", {\n    className: \"aui-branch-picker-state\"\n});\nvar BranchPickerState = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(BranchPickerStateWrapper, {\n        ...props,\n        ref,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(branchPicker_exports.Number, {}),\n            \" / \",\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(branchPicker_exports.Count, {})\n        ]\n    });\n});\nBranchPickerState.displayName = \"BranchPickerState\";\nvar BranchPickerNext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { branchPicker: { next: { tooltip = \"Next\" } = {} } = {} } = {} } = useThreadConfig();\n    const allowBranchPicker = useAllowBranchPicker();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(branchPicker_exports.Next, {\n        disabled: !allowBranchPicker,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_ChevronLeftIcon_ChevronRightIcon_lucide_react__WEBPACK_IMPORTED_MODULE_25__[\"default\"], {})\n        })\n    });\n});\nBranchPickerNext.displayName = \"BranchPickerNext\";\nvar exports2 = {\n    Root: BranchPickerRoot,\n    Previous: BranchPickerPrevious,\n    Next: BranchPickerNext\n};\nvar branch_picker_default = Object.assign(BranchPicker, exports2);\n// src/ui/base/avatar.tsx\n\n\nvar Avatar = ({ src, alt, fallback })=>{\n    if (src == null && fallback == null) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(AvatarRoot, {\n        children: [\n            src != null && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AvatarImage, {\n                src,\n                alt\n            }),\n            fallback != null && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AvatarFallback, {\n                children: fallback\n            })\n        ]\n    });\n};\nAvatar.displayName = \"Avatar\";\nvar AvatarRoot = withDefaults(_radix_ui_react_avatar__WEBPACK_IMPORTED_MODULE_26__.Root, {\n    className: \"aui-avatar-root\"\n});\nAvatarRoot.displayName = \"AvatarRoot\";\nvar AvatarImage = withDefaults(_radix_ui_react_avatar__WEBPACK_IMPORTED_MODULE_26__.Image, {\n    className: \"aui-avatar-image\"\n});\nAvatarImage.displayName = \"AvatarImage\";\nvar AvatarFallback = withDefaults(_radix_ui_react_avatar__WEBPACK_IMPORTED_MODULE_26__.Fallback, {\n    className: \"aui-avatar-fallback\"\n});\nAvatarFallback.displayName = \"AvatarFallback\";\n// src/ui/content-part.tsx\n\n\nvar Text = ()=>{\n    const status = useSmoothStatus();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(contentPart_exports.Text, {\n        className: classnames__WEBPACK_IMPORTED_MODULE_14__(\"aui-text\", status.type === \"running\" && \"aui-text-running\"),\n        component: \"p\"\n    });\n};\nvar exports3 = {\n    Text: withSmoothContextProvider(Text)\n};\nvar content_part_default = exports3;\n// src/ui/assistant-message.tsx\n\nvar AssistantMessage = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(AssistantMessageRoot, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantMessageAvatar, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantMessageContent, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(branch_picker_default, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(assistant_action_bar_default, {})\n        ]\n    });\n};\nAssistantMessage.displayName = \"AssistantMessage\";\nvar AssistantMessageAvatar = ()=>{\n    const { assistantAvatar: avatar = {\n        fallback: \"A\"\n    } } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Avatar, {\n        ...avatar\n    });\n};\nvar AssistantMessageRoot = withDefaults(message_exports.Root, {\n    className: \"aui-assistant-message-root\"\n});\nAssistantMessageRoot.displayName = \"AssistantMessageRoot\";\nvar AssistantMessageContentWrapper = withDefaults(\"div\", {\n    className: \"aui-assistant-message-content\"\n});\nvar AssistantMessageContent = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ components: componentsProp, ...rest }, ref)=>{\n    const { tools, assistantMessage: { components = {} } = {} } = useThreadConfig();\n    const toolsComponents = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            by_name: !tools ? void 0 : Object.fromEntries(tools.map((t)=>[\n                    t.unstable_tool.toolName,\n                    t.unstable_tool.render\n                ])),\n            Fallback: components.ToolFallback\n        }), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        ...tools ?? [],\n        components.ToolFallback\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantMessageContentWrapper, {\n        ...rest,\n        ref,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(message_exports.Content, {\n            components: {\n                ...componentsProp,\n                Text: componentsProp?.Text ?? components.Text ?? content_part_default.Text,\n                tools: toolsComponents\n            }\n        })\n    });\n});\nAssistantMessageContent.displayName = \"AssistantMessageContent\";\nvar exports4 = {\n    Root: AssistantMessageRoot,\n    Avatar: AssistantMessageAvatar,\n    Content: AssistantMessageContent\n};\nvar assistant_message_default = Object.assign(AssistantMessage, exports4);\n// src/ui/assistant-modal.tsx\n\n\n// src/ui/thread.tsx\n\n\n// src/ui/composer.tsx\n\n\n// src/ui/base/CircleStopIcon.tsx\n\nvar CircleStopIcon = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        width: \"16\",\n        height: \"16\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"rect\", {\n            width: \"10\",\n            height: \"10\",\n            x: \"3\",\n            y: \"3\",\n            rx: \"2\"\n        })\n    });\n};\nCircleStopIcon.displayName = \"CircleStopIcon\";\n// src/ui/attachment.tsx\n\n\n// src/ui/base/dialog.tsx\n\n\n\n\nvar Dialog = _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_27__.Root;\nvar DialogTrigger = _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_27__.Trigger;\nvar DialogPortal = _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_27__.Portal;\nvar DialogOverlay = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ className, ...props }, ref)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_27__.Overlay, {\n        ref,\n        className: classnames__WEBPACK_IMPORTED_MODULE_14__(\"aui-dialog-overlay\", className),\n        ...props\n    }));\nDialogOverlay.displayName = _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_27__.Overlay.displayName;\nvar DialogContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ className, children, ...props }, ref)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(DialogPortal, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DialogOverlay, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_27__.Content, {\n                ref,\n                className: classnames__WEBPACK_IMPORTED_MODULE_14__(\"aui-dialog-content\", className),\n                ...props,\n                children\n            })\n        ]\n    }));\nDialogContent.displayName = _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_27__.Content.displayName;\n// src/ui/attachment.tsx\n\n\nvar AttachmentRoot = withDefaults(attachment_exports.Root, {\n    className: \"aui-attachment-root\"\n});\nAttachmentRoot.displayName = \"AttachmentRoot\";\nvar useFileSrc = (file)=>{\n    const [src, setSrc] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!file) {\n            setSrc(void 0);\n            return;\n        }\n        const objectUrl = URL.createObjectURL(file);\n        setSrc(objectUrl);\n        return ()=>{\n            URL.revokeObjectURL(objectUrl);\n        };\n    }, [\n        file\n    ]);\n    return src;\n};\nvar useAttachmentSrc = ()=>{\n    const { file, src } = useAttachment((a)=>{\n        if (a.type !== \"image\") return {};\n        if (a.file) return {\n            file: a.file\n        };\n        const src2 = a.content?.filter((c)=>c.type === \"image\")[0]?.image;\n        if (!src2) return {};\n        return {\n            src: src2\n        };\n    });\n    return useFileSrc(file) ?? src;\n};\nvar AttachmentPreview = ({ src })=>{\n    const [isLoaded, setIsLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    return(// eslint-disable-next-line @next/next/no-img-element\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", {\n        src,\n        style: {\n            width: \"auto\",\n            height: \"auto\",\n            maxWidth: \"75dvh\",\n            maxHeight: \"75dvh\",\n            display: isLoaded ? \"block\" : \"none\",\n            overflow: \"clip\"\n        },\n        onLoad: ()=>setIsLoaded(true),\n        alt: \"Image Preview\"\n    }));\n};\nvar AttachmentPreviewDialog = ({ children })=>{\n    const src = useAttachmentSrc();\n    if (!src) return children;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(Dialog, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DialogTrigger, {\n                className: \"aui-attachment-preview-trigger\",\n                asChild: true,\n                children\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DialogContent, {\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AttachmentPreview, {\n                    src\n                })\n            })\n        ]\n    });\n};\nvar AttachmentThumb = ()=>{\n    const isImage = useAttachment((a)=>a.type === \"image\");\n    const src = useAttachmentSrc();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(AvatarRoot, {\n        className: \"aui-attachment-thumb\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_radix_ui_react_avatar__WEBPACK_IMPORTED_MODULE_26__.AvatarFallback, {\n                delayMs: isImage ? 200 : 0,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_CircleXIcon_FileIcon_lucide_react__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {})\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AvatarImage, {\n                src\n            })\n        ]\n    });\n};\nvar Attachment = ()=>{\n    const canRemove = useAttachment((a)=>a.source !== \"message\");\n    const typeLabel = useAttachment((a)=>{\n        const type = a.type;\n        switch(type){\n            case \"image\":\n                return \"Image\";\n            case \"document\":\n                return \"Document\";\n            case \"file\":\n                return \"File\";\n            default:\n                const _exhaustiveCheck = type;\n                throw new Error(`Unknown attachment type: ${_exhaustiveCheck}`);\n        }\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(Tooltip, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AttachmentPreviewDialog, {\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipTrigger, {\n                    asChild: true,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(AttachmentRoot, {\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AttachmentThumb, {}),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n                                className: \"aui-attachment-text\",\n                                children: [\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", {\n                                        className: \"aui-attachment-name\",\n                                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(attachment_exports.Name, {})\n                                    }),\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", {\n                                        className: \"aui-attachment-type\",\n                                        children: typeLabel\n                                    })\n                                ]\n                            }),\n                            canRemove && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AttachmentRemove, {})\n                        ]\n                    })\n                })\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipContent, {\n                side: \"top\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(attachment_exports.Name, {})\n            })\n        ]\n    });\n};\nAttachment.displayName = \"Attachment\";\nvar AttachmentRemove = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { composer: { removeAttachment: { tooltip = \"Remove file\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(attachment_exports.Remove, {\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipIconButton, {\n            tooltip,\n            className: \"aui-attachment-remove\",\n            side: \"top\",\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_CircleXIcon_FileIcon_lucide_react__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {})\n        })\n    });\n});\nAttachmentRemove.displayName = \"AttachmentRemove\";\nvar exports5 = {\n    Root: AttachmentRoot,\n    Remove: AttachmentRemove\n};\nvar attachment_default = Object.assign(Attachment, exports5);\n// src/ui/composer.tsx\n\nvar useAllowAttachments = (ensureCapability = false)=>{\n    const { composer: { allowAttachments = true } = {} } = useThreadConfig();\n    const attachmentsSupported = useThread((t)=>t.capabilities.attachments);\n    return allowAttachments && (!ensureCapability || attachmentsSupported);\n};\nvar Composer = ()=>{\n    const allowAttachments = useAllowAttachments(true);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(ComposerRoot, {\n        children: [\n            allowAttachments && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerAttachments, {}),\n            allowAttachments && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerAddAttachment, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerInput, {\n                autoFocus: true\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerAction, {})\n        ]\n    });\n};\nComposer.displayName = \"Composer\";\nvar ComposerRoot = withDefaults(composer_exports.Root, {\n    className: \"aui-composer-root\"\n});\nComposerRoot.displayName = \"ComposerRoot\";\nvar ComposerInputStyled = withDefaults(composer_exports.Input, {\n    rows: 1,\n    autoFocus: true,\n    className: \"aui-composer-input\"\n});\nvar ComposerInput = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { composer: { input: { placeholder = \"Write a message...\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerInputStyled, {\n        placeholder,\n        ...props,\n        ref\n    });\n});\nComposerInput.displayName = \"ComposerInput\";\nvar ComposerAttachmentsContainer = withDefaults(\"div\", {\n    className: \"aui-composer-attachments\"\n});\nvar ComposerAttachments = ({ components })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerAttachmentsContainer, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(composer_exports.Attachments, {\n            components: {\n                ...components,\n                Attachment: components?.Attachment ?? attachment_default\n            }\n        })\n    });\n};\nvar ComposerAttachButton = withDefaults(TooltipIconButton, {\n    variant: \"default\",\n    className: \"aui-composer-attach\"\n});\nvar ComposerAddAttachment = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { composer: { addAttachment: { tooltip = \"Attach file\" } = {} } = {} } = {} } = useThreadConfig();\n    const allowAttachments = useAllowAttachments();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(composer_exports.AddAttachment, {\n        disabled: !allowAttachments,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerAttachButton, {\n            tooltip,\n            variant: \"ghost\",\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_PaperclipIcon_SendHorizontalIcon_lucide_react__WEBPACK_IMPORTED_MODULE_30__[\"default\"], {})\n        })\n    });\n});\nComposerAddAttachment.displayName = \"ComposerAddAttachment\";\nvar useAllowCancel = ()=>{\n    const cancelSupported = useThread((t)=>t.capabilities.cancel);\n    return cancelSupported;\n};\nvar ComposerAction = ()=>{\n    const allowCancel = useAllowCancel();\n    if (!allowCancel) return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerSend, {});\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(thread_exports.If, {\n                running: false,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerSend, {})\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(thread_exports.If, {\n                running: true,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerCancel, {})\n            })\n        ]\n    });\n};\nComposerAction.displayName = \"ComposerAction\";\nvar ComposerSendButton = withDefaults(TooltipIconButton, {\n    variant: \"default\",\n    className: \"aui-composer-send\"\n});\nvar ComposerSend = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { composer: { send: { tooltip = \"Send\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(composer_exports.Send, {\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerSendButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_PaperclipIcon_SendHorizontalIcon_lucide_react__WEBPACK_IMPORTED_MODULE_31__[\"default\"], {})\n        })\n    });\n});\nComposerSend.displayName = \"ComposerSend\";\nvar ComposerCancelButton = withDefaults(TooltipIconButton, {\n    variant: \"default\",\n    className: \"aui-composer-cancel\"\n});\nvar ComposerCancel = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { composer: { cancel: { tooltip = \"Cancel\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(composer_exports.Cancel, {\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerCancelButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CircleStopIcon, {})\n        })\n    });\n});\nComposerCancel.displayName = \"ComposerCancel\";\nvar exports6 = {\n    Root: ComposerRoot,\n    Input: ComposerInput,\n    Action: ComposerAction,\n    Send: ComposerSend,\n    Cancel: ComposerCancel,\n    AddAttachment: ComposerAddAttachment,\n    Attachments: ComposerAttachments\n};\nvar composer_default = Object.assign(Composer, exports6);\n// src/ui/thread-welcome.tsx\n\n\nvar ThreadWelcome = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(ThreadWelcomeRoot, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(ThreadWelcomeCenter, {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadWelcomeAvatar, {}),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadWelcomeMessage, {})\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadWelcomeSuggestions, {})\n        ]\n    });\n};\nThreadWelcome.displayName = \"ThreadWelcome\";\nvar ThreadWelcomeRootStyled = withDefaults(\"div\", {\n    className: \"aui-thread-welcome-root\"\n});\nvar ThreadWelcomeCenter = withDefaults(\"div\", {\n    className: \"aui-thread-welcome-center\"\n});\nvar ThreadWelcomeRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(thread_exports.Empty, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadWelcomeRootStyled, {\n            ...props,\n            ref\n        })\n    });\n});\nThreadWelcomeRoot.displayName = \"ThreadWelcomeRoot\";\nvar ThreadWelcomeAvatar = ()=>{\n    const { assistantAvatar: avatar = {\n        fallback: \"A\"\n    } } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Avatar, {\n        ...avatar\n    });\n};\nvar ThreadWelcomeMessageStyled = withDefaults(\"p\", {\n    className: \"aui-thread-welcome-message\"\n});\nvar ThreadWelcomeMessage = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ message: messageProp, ...rest }, ref)=>{\n    const { welcome: { message = \"How can I help you today?\" } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadWelcomeMessageStyled, {\n        ...rest,\n        ref,\n        children: messageProp ?? message\n    });\n});\nThreadWelcomeMessage.displayName = \"ThreadWelcomeMessage\";\nvar ThreadWelcomeSuggestionContainer = withDefaults(\"div\", {\n    className: \"aui-thread-welcome-suggestion-container\"\n});\nvar ThreadWelcomeSuggestionStyled = withDefaults(thread_exports.Suggestion, {\n    className: \"aui-thread-welcome-suggestion\"\n});\nvar ThreadWelcomeSuggestion = ({ suggestion: { text, prompt } })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadWelcomeSuggestionStyled, {\n        prompt,\n        method: \"replace\",\n        autoSend: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", {\n            className: \"aui-thread-welcome-suggestion-text\",\n            children: text ?? prompt\n        })\n    });\n};\nvar ThreadWelcomeSuggestions = ()=>{\n    const suggestions2 = useThread((t)=>t.suggestions);\n    const { welcome: { suggestions } = {} } = useThreadConfig();\n    const finalSuggestions = suggestions2.length ? suggestions2 : suggestions;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadWelcomeSuggestionContainer, {\n        children: finalSuggestions?.map((suggestion, idx)=>{\n            const key = `${suggestion.prompt}-${idx}`;\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadWelcomeSuggestion, {\n                suggestion\n            }, key);\n        })\n    });\n};\nThreadWelcomeSuggestions.displayName = \"ThreadWelcomeSuggestions\";\nvar exports7 = {\n    Root: ThreadWelcomeRoot,\n    Center: ThreadWelcomeCenter,\n    Avatar: ThreadWelcomeAvatar,\n    Message: ThreadWelcomeMessage,\n    Suggestions: ThreadWelcomeSuggestions,\n    Suggestion: ThreadWelcomeSuggestion\n};\nvar thread_welcome_default = Object.assign(ThreadWelcome, exports7);\n// src/ui/user-message.tsx\n\n// src/ui/user-action-bar.tsx\n\n\n\nvar useAllowEdit = (ensureCapability = false)=>{\n    const { userMessage: { allowEdit = true } = {} } = useThreadConfig();\n    const editSupported = useThread((t)=>t.capabilities.edit);\n    return allowEdit && (!ensureCapability || editSupported);\n};\nvar UserActionBar = ()=>{\n    const allowEdit = useAllowEdit(true);\n    if (!allowEdit) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(UserActionBarRoot, {\n        hideWhenRunning: true,\n        autohide: \"not-last\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(UserActionBarEdit, {})\n    });\n};\nUserActionBar.displayName = \"UserActionBar\";\nvar UserActionBarRoot = withDefaults(actionBar_exports.Root, {\n    className: \"aui-user-action-bar-root\"\n});\nUserActionBarRoot.displayName = \"UserActionBarRoot\";\nvar UserActionBarEdit = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { userMessage: { edit: { tooltip = \"Edit\" } = {} } = {} } = {} } = useThreadConfig();\n    const allowEdit = useAllowEdit();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(actionBar_exports.Edit, {\n        disabled: !allowEdit,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_PencilIcon_lucide_react__WEBPACK_IMPORTED_MODULE_32__[\"default\"], {})\n        })\n    });\n});\nUserActionBarEdit.displayName = \"UserActionBarEdit\";\nvar exports8 = {\n    Root: UserActionBarRoot,\n    Edit: UserActionBarEdit\n};\nvar user_action_bar_default = Object.assign(UserActionBar, exports8);\n// src/ui/user-message.tsx\n\nvar UserMessage = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(UserMessageRoot, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(UserMessageAttachments, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(message_exports.If, {\n                hasContent: true,\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(user_action_bar_default, {}),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(UserMessageContent, {})\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(branch_picker_default, {})\n        ]\n    });\n};\nUserMessage.displayName = \"UserMessage\";\nvar UserMessageRoot = withDefaults(message_exports.Root, {\n    className: \"aui-user-message-root\"\n});\nUserMessageRoot.displayName = \"UserMessageRoot\";\nvar UserMessageContentWrapper = withDefaults(\"div\", {\n    className: \"aui-user-message-content\"\n});\nvar UserMessageContent = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ components, ...props }, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(UserMessageContentWrapper, {\n        ...props,\n        ref,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(message_exports.Content, {\n            components: {\n                ...components,\n                Text: components?.Text ?? content_part_default.Text\n            }\n        })\n    });\n});\nUserMessageContent.displayName = \"UserMessageContent\";\nvar UserMessageAttachmentsContainer = withDefaults(\"div\", {\n    className: \"aui-user-message-attachments\"\n});\nvar UserMessageAttachments = ({ components })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(message_exports.If, {\n        hasAttachments: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(UserMessageAttachmentsContainer, {\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(message_exports.Attachments, {\n                components: {\n                    ...components,\n                    Attachment: components?.Attachment ?? attachment_default\n                }\n            })\n        })\n    });\n};\nvar exports9 = {\n    Root: UserMessageRoot,\n    Content: UserMessageContent,\n    Attachments: UserMessageAttachments\n};\nvar user_message_default = Object.assign(UserMessage, exports9);\n// src/ui/edit-composer.tsx\n\n\nvar EditComposer = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(EditComposerRoot, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EditComposerInput, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(EditComposerFooter, {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EditComposerCancel, {}),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EditComposerSend, {})\n                ]\n            })\n        ]\n    });\n};\nEditComposer.displayName = \"EditComposer\";\nvar EditComposerRoot = withDefaults(composer_exports.Root, {\n    className: \"aui-edit-composer-root\"\n});\nEditComposerRoot.displayName = \"EditComposerRoot\";\nvar EditComposerInput = withDefaults(composer_exports.Input, {\n    className: \"aui-edit-composer-input\"\n});\nEditComposerInput.displayName = \"EditComposerInput\";\nvar EditComposerFooter = withDefaults(\"div\", {\n    className: \"aui-edit-composer-footer\"\n});\nEditComposerFooter.displayName = \"EditComposerFooter\";\nvar EditComposerCancel = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { editComposer: { cancel: { label = \"Cancel\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(composer_exports.Cancel, {\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, {\n            variant: \"ghost\",\n            ...props,\n            ref,\n            children: props.children ?? label\n        })\n    });\n});\nEditComposerCancel.displayName = \"EditComposerCancel\";\nvar EditComposerSend = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { editComposer: { send: { label = \"Send\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(composer_exports.Send, {\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, {\n            ...props,\n            ref,\n            children: props.children ?? label\n        })\n    });\n});\nEditComposerSend.displayName = \"EditComposerSend\";\nvar exports10 = {\n    Root: EditComposerRoot,\n    Input: EditComposerInput,\n    Footer: EditComposerFooter,\n    Cancel: EditComposerCancel,\n    Send: EditComposerSend\n};\nvar edit_composer_default = Object.assign(EditComposer, exports10);\n// src/ui/thread.tsx\n\nvar Thread = (config)=>{\n    const { components: { Composer: ComposerComponent = composer_default, ThreadWelcome: ThreadWelcomeComponent = thread_welcome_default } = {} } = config;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadRoot, {\n        config,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(ThreadViewport, {\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadWelcomeComponent, {}),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadMessages, {}),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadFollowupSuggestions, {}),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(ThreadViewportFooter, {\n                    children: [\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadScrollToBottom, {}),\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ComposerComponent, {})\n                    ]\n                })\n            ]\n        })\n    });\n};\nvar ThreadRootStyled = withDefaults(thread_exports.Root, {\n    className: \"aui-root aui-thread-root\"\n});\nvar ThreadRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ config, ...props }, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadConfigProvider, {\n        config,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadRootStyled, {\n            ...props,\n            ref\n        })\n    });\n});\nThreadRoot.displayName = \"ThreadRoot\";\nvar ThreadViewport = withDefaults(thread_exports.Viewport, {\n    className: \"aui-thread-viewport\"\n});\nThreadViewport.displayName = \"ThreadViewport\";\nvar ThreadViewportFooter = withDefaults(\"div\", {\n    className: \"aui-thread-viewport-footer\"\n});\nThreadViewportFooter.displayName = \"ThreadViewportFooter\";\nvar SystemMessage = ()=>null;\nvar ThreadMessages = ({ components, unstable_flexGrowDiv: flexGrowDiv = true, ...rest })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(thread_exports.Messages, {\n                components: {\n                    UserMessage: components?.UserMessage ?? user_message_default,\n                    EditComposer: components?.EditComposer ?? edit_composer_default,\n                    AssistantMessage: components?.AssistantMessage ?? assistant_message_default,\n                    SystemMessage: components?.SystemMessage ?? SystemMessage\n                },\n                ...rest\n            }),\n            flexGrowDiv && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(thread_exports.If, {\n                empty: false,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                    style: {\n                        flexGrow: 1\n                    }\n                })\n            })\n        ]\n    });\n};\nThreadMessages.displayName = \"ThreadMessages\";\nvar ThreadFollowupSuggestions = ()=>{\n    const suggestions = useThread((t)=>t.suggestions);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(thread_exports.If, {\n        empty: false,\n        running: false,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n            className: \"aui-thread-followup-suggestions\",\n            children: suggestions?.map((suggestion, idx)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(thread_exports.Suggestion, {\n                    className: \"aui-thread-followup-suggestion\",\n                    prompt: suggestion.prompt,\n                    method: \"replace\",\n                    autoSend: true,\n                    children: suggestion.prompt\n                }, idx))\n        })\n    });\n};\nvar ThreadScrollToBottomIconButton = withDefaults(TooltipIconButton, {\n    variant: \"outline\",\n    className: \"aui-thread-scroll-to-bottom\"\n});\nvar ThreadScrollToBottom = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { thread: { scrollToBottom: { tooltip = \"Scroll to bottom\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(thread_exports.ScrollToBottom, {\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadScrollToBottomIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_ArrowDownIcon_lucide_react__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {})\n        })\n    });\n});\nThreadScrollToBottom.displayName = \"ThreadScrollToBottom\";\nvar exports11 = {\n    Root: ThreadRoot,\n    Viewport: ThreadViewport,\n    Messages: ThreadMessages,\n    FollowupSuggestions: ThreadFollowupSuggestions,\n    ScrollToBottom: ThreadScrollToBottom,\n    ViewportFooter: ThreadViewportFooter\n};\nvar thread_default = Object.assign(Thread, exports11);\n// src/ui/assistant-modal.tsx\n\nvar AssistantModal = (config)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(AssistantModalRoot, {\n        config,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantModalTrigger, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantModalContent, {\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(thread_default, {})\n            })\n        ]\n    });\n};\nAssistantModal.displayName = \"AssistantModal\";\nvar AssistantModalRoot = ({ config, ...props })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThreadConfigProvider, {\n        config,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(assistantModal_exports.Root, {\n            ...props\n        })\n    });\n};\nAssistantModalRoot.displayName = \"AssistantModalRoot\";\nvar AssistantModalTrigger = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantModalAnchor, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(assistantModal_exports.Trigger, {\n            asChild: true,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AssistantModalButton, {\n                ...props,\n                ref\n            })\n        })\n    });\n});\nAssistantModalTrigger.displayName = \"AssistantModalTrigger\";\nvar AssistantModalAnchor = withDefaults(assistantModal_exports.Anchor, {\n    className: \"aui-root aui-modal-anchor\"\n});\nAssistantModalAnchor.displayName = \"AssistantModalAnchor\";\nvar ModalButtonStyled = withDefaults(TooltipIconButton, {\n    variant: \"default\",\n    className: \"aui-modal-button\"\n});\nvar AssistantModalButton = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ \"data-state\": state, ...rest }, ref)=>{\n    const { strings: { assistantModal: { open: { button: { tooltip: openTooltip = \"Close Assistant\" } = {} } = {}, closed: { button: { tooltip: closedTooltip = \"Open Assistant\" } = {} } = {} } = {} } = {} } = useThreadConfig();\n    const tooltip = state === \"open\" ? openTooltip : closedTooltip;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ModalButtonStyled, {\n        side: \"left\",\n        tooltip,\n        \"data-state\": state,\n        ...rest,\n        ref,\n        children: rest.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_BotIcon_ChevronDownIcon_lucide_react__WEBPACK_IMPORTED_MODULE_34__[\"default\"], {\n                    \"data-state\": state,\n                    className: \"aui-modal-button-closed-icon\"\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_barrel_optimize_names_BotIcon_ChevronDownIcon_lucide_react__WEBPACK_IMPORTED_MODULE_35__[\"default\"], {\n                    \"data-state\": state,\n                    className: \"aui-modal-button-open-icon\"\n                })\n            ]\n        })\n    });\n});\nAssistantModalButton.displayName = \"AssistantModalButton\";\nvar AssistantModalContent = withDefaults(assistantModal_exports.Content, {\n    className: \"aui-root aui-modal-content\",\n    sideOffset: 16\n});\nAssistantModalContent.displayName = \"AssistantModalContent\";\nvar exports12 = {\n    Root: AssistantModalRoot,\n    Trigger: AssistantModalTrigger,\n    Content: AssistantModalContent,\n    Button: AssistantModalButton,\n    Anchor: AssistantModalAnchor\n};\nvar assistant_modal_default = Object.assign(AssistantModal, exports12);\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@assistant-ui/react/dist/index.mjs\n");

/***/ })

};
;